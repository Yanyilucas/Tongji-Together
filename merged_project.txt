
#########################################################
# 文件路径: ./readfile.py
import os

# 设置根目录和输出文件名
root_dir = os.getcwd()
output_file = "merged_project.txt"

# 设定可接受的文件扩展名
include_ext = {".py", ".md", ".toml", ".txt", ".json", ".html", ".js", ".ts", ".vue",
               ".scss", ".lock"}

with open(output_file, "w", encoding="utf-8") as outfile:
    for folder, _, files in os.walk(root_dir):
        for filename in files:
            ext = os.path.splitext(filename)[1]
            if ext.lower() in include_ext:
                filepath = os.path.join(folder, filename)
                rel_path = os.path.relpath(filepath, root_dir)
                try:
                    with open(filepath, "r", encoding="utf-8") as infile:
                        content = infile.read()
                        outfile.write(f"\n\n#########################################################\n")
                        outfile.write(f"# 文件路径: ./{rel_path}\n")
                        outfile.write(content)
                except Exception as e:
                    print(f"跳过文件 {rel_path}: {e}")


#########################################################
# 文件路径: ./README.md
# Tongji-Together

同济同行:手机私家车拼车软件(微信小程序)

### 🏗️准备步骤

------

- 安装 `pnpm`
- 安装微信开发者工具

## 📱前端

基于 `uniapp-vue3-vite`

- 🔗 参考模版`uni-preset-vue3-vite`  [点这里](https://github.com/gitboyzcf/uni-preset-vue3-vite?tab=readme-ov-file#uniappvitevue3piniaunocss-小程序h5-项目模板)
- 🔗 参考博客 `uniapp-vue3-vite 搭建小程序、H5 项目模板` [点这里](https://juejin.cn/post/7430827768054775817)
- 🔗 组件库 ***京东风格的轻量级移动端组件库*** `nutui-uniapp` [点这里](https://nutui-uniapp.pages.dev/guide/overview.html)

#### ⚙️启动方式

在 `frontend`目录下执行

```shell
pnpm dev:mp-weixin
```

运行方式：打开 微信开发者工具, 导入 `dist/dev/mp-weixin` 运行。



运行前需要检查**服务端**的 `IP`地址(使用 `ifconfig /ipconfig` 查看),并修改文件 `.env` `.env.development` 中的这一行.

```
VITE_APP_PUBLIC_BASE = 'http://xxx.xxx.xxx.xxx:3001'
```



📁重要目录说明

- `@/api` 存放与后端交互的各类`api`,如 `API_LOGIN_POST` , `API_REGISTER_POST`
  - `service.js`自动拦截器

- `@/layouts` 设置页面布局,如界面底部的导航栏 `tabBar`的设置,每个 `page`的展示都会按照 `layout`进行布局
- `@/pages` 手机应用的各个页面,每个页面需要到 `pages.json` 中注册路由
- `@/store` 应用的持久化信息,如登录后的身份凭证 `token`的持久化存储
- `@/static` 存放如图片等静态元素



🔑 **API**

使用腾讯地图的 API,并在 `.env` `.env.development` 进行管理,可以替换为你自己 `key`

```shell
ITE_TENCENT_MAP_API_KEY = xxxxx
```



## 💻后端

使用 `uv` 进行环境管理,并已创建了虚拟环境和依赖

```shell
uv sync
uv run server.py
```

我们也提供了虚拟环境,使用前只需

```shell
 source .venv/bin/activate
 python server.py
```

后端框架 `Flask`数据库使用 `SQLite`并结合 `SQLAlchemy`实现 `ORM` 数据表映射

#########################################################
# 文件路径: ./backend/pyproject.toml
[project]
name = "backend"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "coverage>=7.9.1",
    "flask>=3.1.1",
    "flask-bcrypt>=1.0.1",
    "flask-cors>=6.0.0",
    "flask-jwt-extended>=4.7.1",
    "flask-migrate>=4.1.0",
    "flask-sqlalchemy>=3.1.1",
    "ipdb>=0.13.13",
    "pytest>=8.4.0",
]


#########################################################
# 文件路径: ./backend/README.md


#########################################################
# 文件路径: ./backend/server.py
import os
import uuid
from datetime import datetime
from datetime import timedelta
import math
from flask import Flask, send_from_directory
from flask import request, jsonify
from flask_bcrypt import Bcrypt
from flask_cors import CORS
from flask_jwt_extended import JWTManager, create_access_token, get_jwt_identity, jwt_required, verify_jwt_in_request
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import decode_token, exceptions as jwt_exc

db = SQLAlchemy()
app = Flask(__name__, static_url_path='')
# 在应用启动时自动迁移
app.secret_key = '2251316#TJTX'
app.config['JWT_SECRET_KEY'] = '2251316#TJTX'
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///TJTX.db"
app.config['JWT_EXPIRATION_DELTA'] = timedelta(days=7)
app.config['JWT_TOKEN_LOCATION'] = ['headers']
app.config['JWT_HEADER_NAME'] = 'Authorization'
app.config['JWT_HEADER_TYPE'] = 'Bearer'
app.config['PROPAGATE_EXCEPTIONS'] = True
# 配置上传文件夹
UPLOAD_FOLDER = os.path.join(app.root_path, 'static')
if not os.path.exists(UPLOAD_FOLDER):
	os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 最大上传大小为16MB
# 允许的文件扩展名
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
# 允许跨域
CORS(app, supports_credentials=True)
def allowed_file(filename):
	return '.' in filename and \
		filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
db.init_app(app)
migrate = Migrate(app, db)
jwt = JWTManager()
jwt.init_app(app)
bcrypt = Bcrypt()

"""
用户模型
"""
class User(db.Model):
    __tablename__ = 'Users'
    UserID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    Password = db.Column(db.String(127), nullable=False)
    Name = db.Column(db.String(127), nullable=False)
    Tel = db.Column(db.String(15), nullable=False, unique=True)
    isDriver = db.Column(db.Boolean, default=False) # 是否为司机 / 是否为乘客
    
    def serialize(self):
        return {
            'UserID': self.UserID,
            'Name': self.Name,
            'Tel': self.Tel,
            'isDriver': self.isDriver
        }
        
    def set_password(self, password):
        """设置用户密码"""
        self.Password = bcrypt.generate_password_hash(password).decode('utf-8')
    
    def check_password(self, password):
        """检查用户密码"""
        return bcrypt.check_password_hash(self.Password, password)

    def __repr__(self):
        return f"<User(UserID={self.UserID}, Name={self.Name}, Tel={self.Tel}, isDriver={self.isDriver})>"

class DriverPosting(db.Model):
    __tablename__ = 'DriverPostings'
    PostingID      = db.Column(db.Integer     , primary_key=True, autoincrement=True)
    DrviverID      = db.Column(db.Integer     , db.ForeignKey('Users.UserID'), nullable=False)
    From           = db.Column(db.String(255)      , nullable=False)  # 出发地
    To             = db.Column(db.String(255)        , nullable=False)  # 目的地
    
    FromLat        = db.Column(db.Float, nullable=False)  # 出发地纬度
    FromLng        = db.Column(db.Float, nullable=False)  # 出发地经度
    ToLat          = db.Column(db.Float, nullable=False)    # 目的地纬度
    ToLng          = db.Column(db.Float, nullable=False)    # 目的地经度
    CreatedAt      = db.Column(db.DateTime, server_default=db.func.now())  # 创建时间
    
    PlateNumber    = db.Column(db.String(20), nullable=False)  # 车牌号
    DepartureTime  = db.Column(db.DateTime, nullable=False)  # 出发时间
    SeatsAvailable = db.Column(db.Integer, nullable=False)  # 可用座位数
    JoinCount      = db.Column(db.Integer, default=0)  # 预约人数统计
    Fare           = db.Column(db.Float, nullable=False)  # 费用
    Note           = db.Column(db.String(255), nullable=True)  # 附加说明
    driver         = db.relationship('User', backref='driver_postings')

    
    def serialize(self):
        return {
            'PostingID': self.PostingID,
            'DrviverID': self.DrviverID,
            'From': self.From,
            'To': self.To,
            'FromLat': self.FromLat,
            'FromLng': self.FromLng,
            'ToLat': self.ToLat,
            'ToLng': self.ToLng,
            'CreatedAt': self.CreatedAt.isoformat(),
            'PlateNumber': self.PlateNumber,
            'DepartureTime': self.DepartureTime.isoformat(),
            'SeatsAvailable': self.SeatsAvailable,
            'Fare': self.Fare,
            'Note': self.Note
        }
class RideJoin(db.Model):
    __tablename__ = 'RideJoins'
    JoinID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID'), nullable=False)
    PostingID = db.Column(db.Integer, db.ForeignKey('DriverPostings.PostingID'), nullable=False)
    CreatedAt = db.Column(db.DateTime, server_default=db.func.now())  # 创建时间
    user = db.relationship('User', backref='ride_joins')
    posting = db.relationship('DriverPosting', backref='ride_joins')

    def serialize(self):
        return {
            'JoinID': self.JoinID,
            'UserID': self.UserID,
            'PostingID': self.PostingID,
            'CreatedAt': self.CreatedAt.isoformat()
        }
        
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    if not data:
        return jsonify({'error': 'No input data provided'}), 400
	# 提取并验证数据
    tel = data.get('Tel', '').strip().lower()
    password = data.get('password', '').strip()
    if not tel:
        return jsonify({'error': 'tel is required'}), 400
    if not password:
        return jsonify({'error': 'Password is required'}), 400
    existing_user = User.query.filter_by(Tel=tel).first()
    if not existing_user:
        return jsonify({'error': '未注册的手机号'}), 400
	# 验证密码
    if not existing_user.check_password(password):
        return jsonify({'error': '密码错误'}), 401
	# 生成 JWT token
    token = create_access_token(identity=str(existing_user.UserID))
    
    return jsonify({'message': '登录成功', 'token': token}), 200

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    if not data:
        return jsonify({'error': 'No input data provided'}), 400

    # 提取并初步校验
    name          = (data.get('name') or '').strip()
    tel           = (data.get('tel') or '').strip().lower()
    password      = (data.get('password') or '').strip()
    confirm       = (data.get('confirmPassword') or '').strip()
    is_driver     = bool(data.get('isDriver', False))

    if not name:
        return jsonify({'error': '用户名不能为空'}), 400
    if not tel:
        return jsonify({'error': '手机号不能为空'}), 400
    if not password:
        return jsonify({'error': '密码不能为空'}), 400
    if password != confirm:
        return jsonify({'error': '两次输入的密码不一致'}), 400

    # 手机号唯一性检查
    if User.query.filter_by(Tel=tel).first():
        return jsonify({'error': '该手机号已注册'}), 400

    # 创建并保存用户
    user = User(Name=name, Tel=tel, isDriver=is_driver)
    user.set_password(password)
    db.session.add(user)
    db.session.commit()

    # 返回 JWT + 成功信息
    return jsonify({'message': '注册成功'}), 201

@app.route('/userinfo', methods=['GET'])
@jwt_required()
def get_user_info():
    identity = get_jwt_identity()
    print(f"🔑 Token 校验成功，用户 ID: {identity}")
    user_id =int(identity)

    user = User.query.filter_by(UserID=user_id).first()
    if not user:
        return jsonify({'error': '用户不存在'}), 404
    return jsonify(user.serialize()), 200

@app.route('/register_driver', methods=['POST'])
@jwt_required()
def apply_driver():
    identity = get_jwt_identity()
    user_id = int(identity)

    user = db.session.get(User, user_id)
    if not user:
        return jsonify({'error': '用户不存在'}), 404

    if user.isDriver:
        return jsonify({'error': '您已经是车主'}), 400

    user.isDriver = True
    db.session.commit()
    return jsonify({'message': '申请成功'}), 200

@app.route('/unregister_driver', methods=['POST'])
@jwt_required()
def cancel_driver():
    identity = get_jwt_identity()
    user_id = int(identity)

    user = db.session.get(User, user_id)
    if not user:
        return jsonify({'error': '用户不存在'}), 404

    if not user.isDriver:
        return jsonify({'error': '您不是车主'}), 400

    user.isDriver = False
    db.session.commit()
    return jsonify({'message': '注销车主成功'}), 200


@app.route('/post_driver_posting', methods=['POST'])
@jwt_required()
def create_driver_posting():
    identity = get_jwt_identity()
    user_id = int(identity)

    user = db.session.get(User, user_id)
    if not user:
        return jsonify({'error': '用户不存在'}), 404

    if not user.isDriver:
        return jsonify({'error': '您不是车主'}), 400
    
    data = request.get_json()
    if not data:
        return jsonify({'error': 'No input data provided'}), 400

    # ----------------- 提取并验证数据 -----------------
    required_fields = [
        'From', 'To',
        'FromLat', 'FromLng',
        'ToLat', 'ToLng',
        'DepartureTime',
        'SeatsAvailable',
        'Fare',
        'PlateNumber'
    ]
    missing = [f for f in required_fields if f not in data or data[f] in (None, '')]
    if missing:
        return jsonify({'error': f"缺少必要字段: {', '.join(missing)}"}), 400

    # 字段预处理 & 类型转换
    try:
        posting_kwargs = {
            'DrviverID': user_id,
            'From':        str(data['From']).strip(),
            'To':          str(data['To']).strip(),
            'FromLat':     float(data['FromLat']),
            'FromLng':     float(data['FromLng']),
            'ToLat':       float(data['ToLat']),
            'ToLng':       float(data['ToLng']),
            'PlateNumber': str(data['PlateNumber']).strip(),
            'SeatsAvailable': int(data['SeatsAvailable']),
            'Fare':          float(data['Fare']),
            'Note':          str(data.get('Note') or '').strip()
        }
    except (ValueError, TypeError):
        return jsonify({'error': '坐标、座位数或费用格式不正确'}), 400

    # 解析出发时间 (ISO8601 或 “YYYY-MM-DD HH:MM”)
    departure_raw = str(data['DepartureTime']).strip()
    try:
        if 'T' in departure_raw:
            # ISO 格式
            departure_dt = datetime.fromisoformat(departure_raw)
        else:
            departure_dt = datetime.strptime(departure_raw, '%Y-%m-%d %H:%M')
    except ValueError:
        return jsonify({'error': 'DepartureTime 时间格式应为 ISO8601 或 YYYY-MM-DD HH:MM'}), 400
    posting_kwargs['DepartureTime'] = departure_dt

    # 创建并保存
    posting = DriverPosting(**posting_kwargs)
    db.session.add(posting)
    db.session.commit()

    return jsonify({'message': '发布成功', 'posting': posting.serialize()}), 201

# --------------------------------  行程列表接口  --------------------------------
def _haversine(lat1, lng1, lat2, lng2):
    """
    Returns great‑circle distance in kilometres between two points on the Earth.
    """
    R = 6371.0
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlambda = math.radians(lng2 - lng1)
    a = math.sin(dphi / 2)**2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda / 2)**2
    return 2 * R * math.asin(math.sqrt(a))


@app.route('/get_driver_postings', methods=['GET'])
@jwt_required()
def list_driver_postings():
    limit = request.args.get('limit', 2, type=int)
    now = db.func.now()
    identity = get_jwt_identity()
    user_id = int(identity)
    postings = DriverPosting.query.filter((DriverPosting.DepartureTime > now) &\
       (DriverPosting.DrviverID!=user_id)).all()

    def _coord(name):
        try:
            return float(request.args.get(name))
        except (TypeError, ValueError):
            return None

    from_name = request.args.get('From', '')
    to_name = request.args.get('To', '')
    flt, flng = _coord('FromLat'), _coord('FromLng')
    tlt, tlng = _coord('ToLat'), _coord('ToLng')

    # 排序逻辑保持不变
    if from_name == '' and to_name != '' and None not in (tlt, tlng):
        postings.sort(key=lambda p: _haversine(tlt, tlng, p.ToLat, p.ToLng))
    elif from_name != '' and to_name == '' and None not in (flt, flng):
        postings.sort(key=lambda p: _haversine(flt, flng, p.FromLat, p.FromLng))
    elif from_name != '' and to_name != '' and None not in (flt, flng, tlt, tlng):
        postings.sort(key=lambda p: (
            _haversine(flt, flng, p.FromLat, p.FromLng) +
            _haversine(tlt, tlng, p.ToLat, p.ToLng)
        ))
    else:
        postings.sort(key=lambda p: p.DepartureTime)

    # 查询所有 PostingID
    posting_ids = [p.PostingID for p in postings]


    # 在每条 posting 上添加预约人数字段
    result = []
    for p in postings[:limit]:
        obj = p.serialize()
        obj['Tel'] = p.driver.Tel if p.driver else None
        obj['Name'] = p.driver.Name if p.driver else None
        result.append(obj)

    return jsonify(result), 200

@app.route('/my_trip', methods=['GET'])
@jwt_required()
def get_my_trip():
    identity = get_jwt_identity()
    user_id = int(identity)

    now = db.func.now()

    ride = (RideJoin.query
        .join(DriverPosting, RideJoin.PostingID == DriverPosting.PostingID)
        .filter(RideJoin.UserID == user_id)
        .filter(DriverPosting.DepartureTime > now)
        .order_by(DriverPosting.DepartureTime.asc())
        .first())
    if not ride:
        return jsonify([]), 200
    # 构造与 /get_driver_postings 相同的结构
    postings = [ride.posting]
    posting_ids = [p.PostingID for p in postings]

    # 查询预约人数统计
    counts = db.session.query(
        RideJoin.PostingID,
        db.func.count(RideJoin.JoinID).label('join_count')
    ).filter(RideJoin.PostingID.in_(posting_ids)) \
     .group_by(RideJoin.PostingID).all()

    join_count_map = {cid: cnt for cid, cnt in counts}

    result = []
    for p in postings:
        obj = p.serialize()
        obj['JoinCount'] = join_count_map.get(p.PostingID, 0)  # 默认0
        obj['Tel'] = p.driver.Tel if p.driver else None
        obj['Name'] = p.driver.Name if p.driver else None
        result.append(obj)

    return jsonify(result), 200



@app.route('/join_trip', methods=['POST'])
@jwt_required()
def join_trip():
    identity = get_jwt_identity()
    user_id = int(identity)

    data = request.get_json()
    if not data or 'PostingID' not in data:
        return jsonify({'error': '缺少 PostingID'}), 400

    posting_id = data['PostingID']
    posting = db.session.get(DriverPosting, posting_id)
    if not posting:
        return jsonify({'error': '行程不存在'}), 404

    # 检查用户是否已经加入该行程
    existing_join = RideJoin.query.filter_by(UserID=user_id, PostingID=posting_id).first()
    if existing_join:
        return jsonify({'error': '您已加入该行程'}), 400

    # 检查座位是否足够
    if  posting.JoinCount==posting.SeatsAvailable:
        return jsonify({'error': '该行程座位已满'}), 400

    # 创建新的 RideJoin
    new_join = RideJoin(UserID=user_id, PostingID=posting_id)
    db.session.add(new_join)

    # 更新可用座位数
    posting.JoinCount += 1
    db.session.commit()

    return jsonify({'message': '加入行程成功', 'JoinID': new_join.JoinID}), 201


@app.route('/cancel_trip', methods=['POST'])
@jwt_required()
def cancel_trip():
    user_id = int(get_jwt_identity())
    data = request.get_json()
    posting_id = data.get('PostingID')

    if not posting_id:
        return jsonify({'error': 'PostingID is required'}), 400

    ride = RideJoin.query.filter_by(PostingID=posting_id, UserID=user_id).first()

    if not ride:
        return jsonify({'error': '未找到对应的预约记录'}), 404

    posting = DriverPosting.query.filter_by(PostingID=posting_id).first()
    if not posting:
        return jsonify({'error': '对应行程不存在'}), 404

    db.session.delete(ride)

    # 归还座位，仅当当前人数少于总数
    if posting.JoinCount > 0:
        posting.JoinCount -= 1

    db.session.commit()

    return jsonify({'message': '取消成功'}), 200




if __name__ == '__main__':
	with app.app_context():
		db.create_all()  # 确保所有表已创建
	app.run(host='0.0.0.0', port=3001, debug=True)

#########################################################
# 文件路径: ./backend/uv.lock
version = 1
revision = 2
requires-python = ">=3.12"

[[package]]
name = "alembic"
version = "1.16.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mako" },
    { name = "sqlalchemy" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/20/89/bfb4fe86e3fc3972d35431af7bedbc60fa606e8b17196704a1747f7aa4c3/alembic-1.16.1.tar.gz", hash = "sha256:43d37ba24b3d17bc1eb1024fe0f51cd1dc95aeb5464594a02c6bb9ca9864bfa4", size = 1955006, upload-time = "2025-05-21T23:11:05.991Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/31/59/565286efff3692c5716c212202af61466480f6357c4ae3089d4453bff1f3/alembic-1.16.1-py3-none-any.whl", hash = "sha256:0cdd48acada30d93aa1035767d67dff25702f8de74d7c3919f2e8492c8db2e67", size = 242488, upload-time = "2025-05-21T23:11:07.783Z" },
]

[[package]]
name = "asttokens"
version = "3.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/4a/e7/82da0a03e7ba5141f05cce0d302e6eed121ae055e0456ca228bf693984bc/asttokens-3.0.0.tar.gz", hash = "sha256:0dcd8baa8d62b0c1d118b399b2ddba3c4aff271d0d7a9e0d4c1681c79035bbc7", size = 61978, upload-time = "2024-11-30T04:30:14.439Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/25/8a/c46dcc25341b5bce5472c718902eb3d38600a903b14fa6aeecef3f21a46f/asttokens-3.0.0-py3-none-any.whl", hash = "sha256:e3078351a059199dd5138cb1c706e6430c05eff2ff136af5eb4790f9d28932e2", size = 26918, upload-time = "2024-11-30T04:30:10.946Z" },
]

[[package]]
name = "backend"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "coverage" },
    { name = "flask" },
    { name = "flask-bcrypt" },
    { name = "flask-cors" },
    { name = "flask-jwt-extended" },
    { name = "flask-migrate" },
    { name = "flask-sqlalchemy" },
    { name = "ipdb" },
    { name = "pytest" },
]

[package.metadata]
requires-dist = [
    { name = "coverage", specifier = ">=7.9.1" },
    { name = "flask", specifier = ">=3.1.1" },
    { name = "flask-bcrypt", specifier = ">=1.0.1" },
    { name = "flask-cors", specifier = ">=6.0.0" },
    { name = "flask-jwt-extended", specifier = ">=4.7.1" },
    { name = "flask-migrate", specifier = ">=4.1.0" },
    { name = "flask-sqlalchemy", specifier = ">=3.1.1" },
    { name = "ipdb", specifier = ">=0.13.13" },
    { name = "pytest", specifier = ">=8.4.0" },
]

[[package]]
name = "bcrypt"
version = "4.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bb/5d/6d7433e0f3cd46ce0b43cd65e1db465ea024dbb8216fb2404e919c2ad77b/bcrypt-4.3.0.tar.gz", hash = "sha256:3a3fd2204178b6d2adcf09cb4f6426ffef54762577a7c9b54c159008cb288c18", size = 25697, upload-time = "2025-02-28T01:24:09.174Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bf/2c/3d44e853d1fe969d229bd58d39ae6902b3d924af0e2b5a60d17d4b809ded/bcrypt-4.3.0-cp313-cp313t-macosx_10_12_universal2.whl", hash = "sha256:f01e060f14b6b57bbb72fc5b4a83ac21c443c9a2ee708e04a10e9192f90a6281", size = 483719, upload-time = "2025-02-28T01:22:34.539Z" },
    { url = "https://files.pythonhosted.org/packages/a1/e2/58ff6e2a22eca2e2cff5370ae56dba29d70b1ea6fc08ee9115c3ae367795/bcrypt-4.3.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c5eeac541cefd0bb887a371ef73c62c3cd78535e4887b310626036a7c0a817bb", size = 272001, upload-time = "2025-02-28T01:22:38.078Z" },
    { url = "https://files.pythonhosted.org/packages/37/1f/c55ed8dbe994b1d088309e366749633c9eb90d139af3c0a50c102ba68a1a/bcrypt-4.3.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:59e1aa0e2cd871b08ca146ed08445038f42ff75968c7ae50d2fdd7860ade2180", size = 277451, upload-time = "2025-02-28T01:22:40.787Z" },
    { url = "https://files.pythonhosted.org/packages/d7/1c/794feb2ecf22fe73dcfb697ea7057f632061faceb7dcf0f155f3443b4d79/bcrypt-4.3.0-cp313-cp313t-manylinux_2_28_aarch64.whl", hash = "sha256:0042b2e342e9ae3d2ed22727c1262f76cc4f345683b5c1715f0250cf4277294f", size = 272792, upload-time = "2025-02-28T01:22:43.144Z" },
    { url = "https://files.pythonhosted.org/packages/13/b7/0b289506a3f3598c2ae2bdfa0ea66969812ed200264e3f61df77753eee6d/bcrypt-4.3.0-cp313-cp313t-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:74a8d21a09f5e025a9a23e7c0fd2c7fe8e7503e4d356c0a2c1486ba010619f09", size = 289752, upload-time = "2025-02-28T01:22:45.56Z" },
    { url = "https://files.pythonhosted.org/packages/dc/24/d0fb023788afe9e83cc118895a9f6c57e1044e7e1672f045e46733421fe6/bcrypt-4.3.0-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:0142b2cb84a009f8452c8c5a33ace5e3dfec4159e7735f5afe9a4d50a8ea722d", size = 277762, upload-time = "2025-02-28T01:22:47.023Z" },
    { url = "https://files.pythonhosted.org/packages/e4/38/cde58089492e55ac4ef6c49fea7027600c84fd23f7520c62118c03b4625e/bcrypt-4.3.0-cp313-cp313t-manylinux_2_34_aarch64.whl", hash = "sha256:12fa6ce40cde3f0b899729dbd7d5e8811cb892d31b6f7d0334a1f37748b789fd", size = 272384, upload-time = "2025-02-28T01:22:49.221Z" },
    { url = "https://files.pythonhosted.org/packages/de/6a/d5026520843490cfc8135d03012a413e4532a400e471e6188b01b2de853f/bcrypt-4.3.0-cp313-cp313t-manylinux_2_34_x86_64.whl", hash = "sha256:5bd3cca1f2aa5dbcf39e2aa13dd094ea181f48959e1071265de49cc2b82525af", size = 277329, upload-time = "2025-02-28T01:22:51.603Z" },
    { url = "https://files.pythonhosted.org/packages/b3/a3/4fc5255e60486466c389e28c12579d2829b28a527360e9430b4041df4cf9/bcrypt-4.3.0-cp313-cp313t-musllinux_1_1_aarch64.whl", hash = "sha256:335a420cfd63fc5bc27308e929bee231c15c85cc4c496610ffb17923abf7f231", size = 305241, upload-time = "2025-02-28T01:22:53.283Z" },
    { url = "https://files.pythonhosted.org/packages/c7/15/2b37bc07d6ce27cc94e5b10fd5058900eb8fb11642300e932c8c82e25c4a/bcrypt-4.3.0-cp313-cp313t-musllinux_1_1_x86_64.whl", hash = "sha256:0e30e5e67aed0187a1764911af023043b4542e70a7461ad20e837e94d23e1d6c", size = 309617, upload-time = "2025-02-28T01:22:55.461Z" },
    { url = "https://files.pythonhosted.org/packages/5f/1f/99f65edb09e6c935232ba0430c8c13bb98cb3194b6d636e61d93fe60ac59/bcrypt-4.3.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:3b8d62290ebefd49ee0b3ce7500f5dbdcf13b81402c05f6dafab9a1e1b27212f", size = 335751, upload-time = "2025-02-28T01:22:57.81Z" },
    { url = "https://files.pythonhosted.org/packages/00/1b/b324030c706711c99769988fcb694b3cb23f247ad39a7823a78e361bdbb8/bcrypt-4.3.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:2ef6630e0ec01376f59a006dc72918b1bf436c3b571b80fa1968d775fa02fe7d", size = 355965, upload-time = "2025-02-28T01:22:59.181Z" },
    { url = "https://files.pythonhosted.org/packages/aa/dd/20372a0579dd915dfc3b1cd4943b3bca431866fcb1dfdfd7518c3caddea6/bcrypt-4.3.0-cp313-cp313t-win32.whl", hash = "sha256:7a4be4cbf241afee43f1c3969b9103a41b40bcb3a3f467ab19f891d9bc4642e4", size = 155316, upload-time = "2025-02-28T01:23:00.763Z" },
    { url = "https://files.pythonhosted.org/packages/6d/52/45d969fcff6b5577c2bf17098dc36269b4c02197d551371c023130c0f890/bcrypt-4.3.0-cp313-cp313t-win_amd64.whl", hash = "sha256:5c1949bf259a388863ced887c7861da1df681cb2388645766c89fdfd9004c669", size = 147752, upload-time = "2025-02-28T01:23:02.908Z" },
    { url = "https://files.pythonhosted.org/packages/11/22/5ada0b9af72b60cbc4c9a399fdde4af0feaa609d27eb0adc61607997a3fa/bcrypt-4.3.0-cp38-abi3-macosx_10_12_universal2.whl", hash = "sha256:f81b0ed2639568bf14749112298f9e4e2b28853dab50a8b357e31798686a036d", size = 498019, upload-time = "2025-02-28T01:23:05.838Z" },
    { url = "https://files.pythonhosted.org/packages/b8/8c/252a1edc598dc1ce57905be173328eda073083826955ee3c97c7ff5ba584/bcrypt-4.3.0-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:864f8f19adbe13b7de11ba15d85d4a428c7e2f344bac110f667676a0ff84924b", size = 279174, upload-time = "2025-02-28T01:23:07.274Z" },
    { url = "https://files.pythonhosted.org/packages/29/5b/4547d5c49b85f0337c13929f2ccbe08b7283069eea3550a457914fc078aa/bcrypt-4.3.0-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3e36506d001e93bffe59754397572f21bb5dc7c83f54454c990c74a468cd589e", size = 283870, upload-time = "2025-02-28T01:23:09.151Z" },
    { url = "https://files.pythonhosted.org/packages/be/21/7dbaf3fa1745cb63f776bb046e481fbababd7d344c5324eab47f5ca92dd2/bcrypt-4.3.0-cp38-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:842d08d75d9fe9fb94b18b071090220697f9f184d4547179b60734846461ed59", size = 279601, upload-time = "2025-02-28T01:23:11.461Z" },
    { url = "https://files.pythonhosted.org/packages/6d/64/e042fc8262e971347d9230d9abbe70d68b0a549acd8611c83cebd3eaec67/bcrypt-4.3.0-cp38-abi3-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:7c03296b85cb87db865d91da79bf63d5609284fc0cab9472fdd8367bbd830753", size = 297660, upload-time = "2025-02-28T01:23:12.989Z" },
    { url = "https://files.pythonhosted.org/packages/50/b8/6294eb84a3fef3b67c69b4470fcdd5326676806bf2519cda79331ab3c3a9/bcrypt-4.3.0-cp38-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:62f26585e8b219cdc909b6a0069efc5e4267e25d4a3770a364ac58024f62a761", size = 284083, upload-time = "2025-02-28T01:23:14.5Z" },
    { url = "https://files.pythonhosted.org/packages/62/e6/baff635a4f2c42e8788fe1b1633911c38551ecca9a749d1052d296329da6/bcrypt-4.3.0-cp38-abi3-manylinux_2_34_aarch64.whl", hash = "sha256:beeefe437218a65322fbd0069eb437e7c98137e08f22c4660ac2dc795c31f8bb", size = 279237, upload-time = "2025-02-28T01:23:16.686Z" },
    { url = "https://files.pythonhosted.org/packages/39/48/46f623f1b0c7dc2e5de0b8af5e6f5ac4cc26408ac33f3d424e5ad8da4a90/bcrypt-4.3.0-cp38-abi3-manylinux_2_34_x86_64.whl", hash = "sha256:97eea7408db3a5bcce4a55d13245ab3fa566e23b4c67cd227062bb49e26c585d", size = 283737, upload-time = "2025-02-28T01:23:18.897Z" },
    { url = "https://files.pythonhosted.org/packages/49/8b/70671c3ce9c0fca4a6cc3cc6ccbaa7e948875a2e62cbd146e04a4011899c/bcrypt-4.3.0-cp38-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:191354ebfe305e84f344c5964c7cd5f924a3bfc5d405c75ad07f232b6dffb49f", size = 312741, upload-time = "2025-02-28T01:23:21.041Z" },
    { url = "https://files.pythonhosted.org/packages/27/fb/910d3a1caa2d249b6040a5caf9f9866c52114d51523ac2fb47578a27faee/bcrypt-4.3.0-cp38-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:41261d64150858eeb5ff43c753c4b216991e0ae16614a308a15d909503617732", size = 316472, upload-time = "2025-02-28T01:23:23.183Z" },
    { url = "https://files.pythonhosted.org/packages/dc/cf/7cf3a05b66ce466cfb575dbbda39718d45a609daa78500f57fa9f36fa3c0/bcrypt-4.3.0-cp38-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:33752b1ba962ee793fa2b6321404bf20011fe45b9afd2a842139de3011898fef", size = 343606, upload-time = "2025-02-28T01:23:25.361Z" },
    { url = "https://files.pythonhosted.org/packages/e3/b8/e970ecc6d7e355c0d892b7f733480f4aa8509f99b33e71550242cf0b7e63/bcrypt-4.3.0-cp38-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:50e6e80a4bfd23a25f5c05b90167c19030cf9f87930f7cb2eacb99f45d1c3304", size = 362867, upload-time = "2025-02-28T01:23:26.875Z" },
    { url = "https://files.pythonhosted.org/packages/a9/97/8d3118efd8354c555a3422d544163f40d9f236be5b96c714086463f11699/bcrypt-4.3.0-cp38-abi3-win32.whl", hash = "sha256:67a561c4d9fb9465ec866177e7aebcad08fe23aaf6fbd692a6fab69088abfc51", size = 160589, upload-time = "2025-02-28T01:23:28.381Z" },
    { url = "https://files.pythonhosted.org/packages/29/07/416f0b99f7f3997c69815365babbc2e8754181a4b1899d921b3c7d5b6f12/bcrypt-4.3.0-cp38-abi3-win_amd64.whl", hash = "sha256:584027857bc2843772114717a7490a37f68da563b3620f78a849bcb54dc11e62", size = 152794, upload-time = "2025-02-28T01:23:30.187Z" },
    { url = "https://files.pythonhosted.org/packages/6e/c1/3fa0e9e4e0bfd3fd77eb8b52ec198fd6e1fd7e9402052e43f23483f956dd/bcrypt-4.3.0-cp39-abi3-macosx_10_12_universal2.whl", hash = "sha256:0d3efb1157edebfd9128e4e46e2ac1a64e0c1fe46fb023158a407c7892b0f8c3", size = 498969, upload-time = "2025-02-28T01:23:31.945Z" },
    { url = "https://files.pythonhosted.org/packages/ce/d4/755ce19b6743394787fbd7dff6bf271b27ee9b5912a97242e3caf125885b/bcrypt-4.3.0-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:08bacc884fd302b611226c01014eca277d48f0a05187666bca23aac0dad6fe24", size = 279158, upload-time = "2025-02-28T01:23:34.161Z" },
    { url = "https://files.pythonhosted.org/packages/9b/5d/805ef1a749c965c46b28285dfb5cd272a7ed9fa971f970435a5133250182/bcrypt-4.3.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f6746e6fec103fcd509b96bacdfdaa2fbde9a553245dbada284435173a6f1aef", size = 284285, upload-time = "2025-02-28T01:23:35.765Z" },
    { url = "https://files.pythonhosted.org/packages/ab/2b/698580547a4a4988e415721b71eb45e80c879f0fb04a62da131f45987b96/bcrypt-4.3.0-cp39-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:afe327968aaf13fc143a56a3360cb27d4ad0345e34da12c7290f1b00b8fe9a8b", size = 279583, upload-time = "2025-02-28T01:23:38.021Z" },
    { url = "https://files.pythonhosted.org/packages/f2/87/62e1e426418204db520f955ffd06f1efd389feca893dad7095bf35612eec/bcrypt-4.3.0-cp39-abi3-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:d9af79d322e735b1fc33404b5765108ae0ff232d4b54666d46730f8ac1a43676", size = 297896, upload-time = "2025-02-28T01:23:39.575Z" },
    { url = "https://files.pythonhosted.org/packages/cb/c6/8fedca4c2ada1b6e889c52d2943b2f968d3427e5d65f595620ec4c06fa2f/bcrypt-4.3.0-cp39-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:f1e3ffa1365e8702dc48c8b360fef8d7afeca482809c5e45e653af82ccd088c1", size = 284492, upload-time = "2025-02-28T01:23:40.901Z" },
    { url = "https://files.pythonhosted.org/packages/4d/4d/c43332dcaaddb7710a8ff5269fcccba97ed3c85987ddaa808db084267b9a/bcrypt-4.3.0-cp39-abi3-manylinux_2_34_aarch64.whl", hash = "sha256:3004df1b323d10021fda07a813fd33e0fd57bef0e9a480bb143877f6cba996fe", size = 279213, upload-time = "2025-02-28T01:23:42.653Z" },
    { url = "https://files.pythonhosted.org/packages/dc/7f/1e36379e169a7df3a14a1c160a49b7b918600a6008de43ff20d479e6f4b5/bcrypt-4.3.0-cp39-abi3-manylinux_2_34_x86_64.whl", hash = "sha256:531457e5c839d8caea9b589a1bcfe3756b0547d7814e9ce3d437f17da75c32b0", size = 284162, upload-time = "2025-02-28T01:23:43.964Z" },
    { url = "https://files.pythonhosted.org/packages/1c/0a/644b2731194b0d7646f3210dc4d80c7fee3ecb3a1f791a6e0ae6bb8684e3/bcrypt-4.3.0-cp39-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:17a854d9a7a476a89dcef6c8bd119ad23e0f82557afbd2c442777a16408e614f", size = 312856, upload-time = "2025-02-28T01:23:46.011Z" },
    { url = "https://files.pythonhosted.org/packages/dc/62/2a871837c0bb6ab0c9a88bf54de0fc021a6a08832d4ea313ed92a669d437/bcrypt-4.3.0-cp39-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:6fb1fd3ab08c0cbc6826a2e0447610c6f09e983a281b919ed721ad32236b8b23", size = 316726, upload-time = "2025-02-28T01:23:47.575Z" },
    { url = "https://files.pythonhosted.org/packages/0c/a1/9898ea3faac0b156d457fd73a3cb9c2855c6fd063e44b8522925cdd8ce46/bcrypt-4.3.0-cp39-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:e965a9c1e9a393b8005031ff52583cedc15b7884fce7deb8b0346388837d6cfe", size = 343664, upload-time = "2025-02-28T01:23:49.059Z" },
    { url = "https://files.pythonhosted.org/packages/40/f2/71b4ed65ce38982ecdda0ff20c3ad1b15e71949c78b2c053df53629ce940/bcrypt-4.3.0-cp39-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:79e70b8342a33b52b55d93b3a59223a844962bef479f6a0ea318ebbcadf71505", size = 363128, upload-time = "2025-02-28T01:23:50.399Z" },
    { url = "https://files.pythonhosted.org/packages/11/99/12f6a58eca6dea4be992d6c681b7ec9410a1d9f5cf368c61437e31daa879/bcrypt-4.3.0-cp39-abi3-win32.whl", hash = "sha256:b4d4e57f0a63fd0b358eb765063ff661328f69a04494427265950c71b992a39a", size = 160598, upload-time = "2025-02-28T01:23:51.775Z" },
    { url = "https://files.pythonhosted.org/packages/a9/cf/45fb5261ece3e6b9817d3d82b2f343a505fd58674a92577923bc500bd1aa/bcrypt-4.3.0-cp39-abi3-win_amd64.whl", hash = "sha256:e53e074b120f2877a35cc6c736b8eb161377caae8925c17688bd46ba56daaa5b", size = 152799, upload-time = "2025-02-28T01:23:53.139Z" },
]

[[package]]
name = "blinker"
version = "1.9.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/21/28/9b3f50ce0e048515135495f198351908d99540d69bfdc8c1d15b73dc55ce/blinker-1.9.0.tar.gz", hash = "sha256:b4ce2265a7abece45e7cc896e98dbebe6cead56bcf805a3d23136d145f5445bf", size = 22460, upload-time = "2024-11-08T17:25:47.436Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/10/cb/f2ad4230dc2eb1a74edf38f1a38b9b52277f75bef262d8908e60d957e13c/blinker-1.9.0-py3-none-any.whl", hash = "sha256:ba0efaa9080b619ff2f3459d1d500c57bddea4a6b424b60a91141db6fd2f08bc", size = 8458, upload-time = "2024-11-08T17:25:46.184Z" },
]

[[package]]
name = "click"
version = "8.2.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/60/6c/8ca2efa64cf75a977a0d7fac081354553ebe483345c734fb6b6515d96bbc/click-8.2.1.tar.gz", hash = "sha256:27c491cc05d968d271d5a1db13e3b5a184636d9d930f148c50b038f0d0646202", size = 286342, upload-time = "2025-05-20T23:19:49.832Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/85/32/10bb5764d90a8eee674e9dc6f4db6a0ab47c8c4d0d83c27f7c39ac415a4d/click-8.2.1-py3-none-any.whl", hash = "sha256:61a3265b914e850b85317d0b3109c7f8cd35a670f963866005d6ef1d5175a12b", size = 102215, upload-time = "2025-05-20T23:19:47.796Z" },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697, upload-time = "2022-10-25T02:36:22.414Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335, upload-time = "2022-10-25T02:36:20.889Z" },
]

[[package]]
name = "coverage"
version = "7.9.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/e0/98670a80884f64578f0c22cd70c5e81a6e07b08167721c7487b4d70a7ca0/coverage-7.9.1.tar.gz", hash = "sha256:6cf43c78c4282708a28e466316935ec7489a9c487518a77fa68f716c67909cec", size = 813650, upload-time = "2025-06-13T13:02:28.627Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/68/d9/7f66eb0a8f2fce222de7bdc2046ec41cb31fe33fb55a330037833fb88afc/coverage-7.9.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:a8de12b4b87c20de895f10567639c0797b621b22897b0af3ce4b4e204a743626", size = 212336, upload-time = "2025-06-13T13:01:10.909Z" },
    { url = "https://files.pythonhosted.org/packages/20/20/e07cb920ef3addf20f052ee3d54906e57407b6aeee3227a9c91eea38a665/coverage-7.9.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:5add197315a054e92cee1b5f686a2bcba60c4c3e66ee3de77ace6c867bdee7cb", size = 212571, upload-time = "2025-06-13T13:01:12.518Z" },
    { url = "https://files.pythonhosted.org/packages/78/f8/96f155de7e9e248ca9c8ff1a40a521d944ba48bec65352da9be2463745bf/coverage-7.9.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:600a1d4106fe66f41e5d0136dfbc68fe7200a5cbe85610ddf094f8f22e1b0300", size = 246377, upload-time = "2025-06-13T13:01:14.87Z" },
    { url = "https://files.pythonhosted.org/packages/3e/cf/1d783bd05b7bca5c10ded5f946068909372e94615a4416afadfe3f63492d/coverage-7.9.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:2a876e4c3e5a2a1715a6608906aa5a2e0475b9c0f68343c2ada98110512ab1d8", size = 243394, upload-time = "2025-06-13T13:01:16.23Z" },
    { url = "https://files.pythonhosted.org/packages/02/dd/e7b20afd35b0a1abea09fb3998e1abc9f9bd953bee548f235aebd2b11401/coverage-7.9.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:81f34346dd63010453922c8e628a52ea2d2ccd73cb2487f7700ac531b247c8a5", size = 245586, upload-time = "2025-06-13T13:01:17.532Z" },
    { url = "https://files.pythonhosted.org/packages/4e/38/b30b0006fea9d617d1cb8e43b1bc9a96af11eff42b87eb8c716cf4d37469/coverage-7.9.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:888f8eee13f2377ce86d44f338968eedec3291876b0b8a7289247ba52cb984cd", size = 245396, upload-time = "2025-06-13T13:01:19.164Z" },
    { url = "https://files.pythonhosted.org/packages/31/e4/4d8ec1dc826e16791f3daf1b50943e8e7e1eb70e8efa7abb03936ff48418/coverage-7.9.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:9969ef1e69b8c8e1e70d591f91bbc37fc9a3621e447525d1602801a24ceda898", size = 243577, upload-time = "2025-06-13T13:01:22.433Z" },
    { url = "https://files.pythonhosted.org/packages/25/f4/b0e96c5c38e6e40ef465c4bc7f138863e2909c00e54a331da335faf0d81a/coverage-7.9.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:60c458224331ee3f1a5b472773e4a085cc27a86a0b48205409d364272d67140d", size = 244809, upload-time = "2025-06-13T13:01:24.143Z" },
    { url = "https://files.pythonhosted.org/packages/8a/65/27e0a1fa5e2e5079bdca4521be2f5dabf516f94e29a0defed35ac2382eb2/coverage-7.9.1-cp312-cp312-win32.whl", hash = "sha256:5f646a99a8c2b3ff4c6a6e081f78fad0dde275cd59f8f49dc4eab2e394332e74", size = 214724, upload-time = "2025-06-13T13:01:25.435Z" },
    { url = "https://files.pythonhosted.org/packages/9b/a8/d5b128633fd1a5e0401a4160d02fa15986209a9e47717174f99dc2f7166d/coverage-7.9.1-cp312-cp312-win_amd64.whl", hash = "sha256:30f445f85c353090b83e552dcbbdad3ec84c7967e108c3ae54556ca69955563e", size = 215535, upload-time = "2025-06-13T13:01:27.861Z" },
    { url = "https://files.pythonhosted.org/packages/a3/37/84bba9d2afabc3611f3e4325ee2c6a47cd449b580d4a606b240ce5a6f9bf/coverage-7.9.1-cp312-cp312-win_arm64.whl", hash = "sha256:af41da5dca398d3474129c58cb2b106a5d93bbb196be0d307ac82311ca234342", size = 213904, upload-time = "2025-06-13T13:01:29.202Z" },
    { url = "https://files.pythonhosted.org/packages/d0/a7/a027970c991ca90f24e968999f7d509332daf6b8c3533d68633930aaebac/coverage-7.9.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:31324f18d5969feef7344a932c32428a2d1a3e50b15a6404e97cba1cc9b2c631", size = 212358, upload-time = "2025-06-13T13:01:30.909Z" },
    { url = "https://files.pythonhosted.org/packages/f2/48/6aaed3651ae83b231556750280682528fea8ac7f1232834573472d83e459/coverage-7.9.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:0c804506d624e8a20fb3108764c52e0eef664e29d21692afa375e0dd98dc384f", size = 212620, upload-time = "2025-06-13T13:01:32.256Z" },
    { url = "https://files.pythonhosted.org/packages/6c/2a/f4b613f3b44d8b9f144847c89151992b2b6b79cbc506dee89ad0c35f209d/coverage-7.9.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ef64c27bc40189f36fcc50c3fb8f16ccda73b6a0b80d9bd6e6ce4cffcd810bbd", size = 245788, upload-time = "2025-06-13T13:01:33.948Z" },
    { url = "https://files.pythonhosted.org/packages/04/d2/de4fdc03af5e4e035ef420ed26a703c6ad3d7a07aff2e959eb84e3b19ca8/coverage-7.9.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d4fe2348cc6ec372e25adec0219ee2334a68d2f5222e0cba9c0d613394e12d86", size = 243001, upload-time = "2025-06-13T13:01:35.285Z" },
    { url = "https://files.pythonhosted.org/packages/f5/e8/eed18aa5583b0423ab7f04e34659e51101135c41cd1dcb33ac1d7013a6d6/coverage-7.9.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:34ed2186fe52fcc24d4561041979a0dec69adae7bce2ae8d1c49eace13e55c43", size = 244985, upload-time = "2025-06-13T13:01:36.712Z" },
    { url = "https://files.pythonhosted.org/packages/17/f8/ae9e5cce8885728c934eaa58ebfa8281d488ef2afa81c3dbc8ee9e6d80db/coverage-7.9.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:25308bd3d00d5eedd5ae7d4357161f4df743e3c0240fa773ee1b0f75e6c7c0f1", size = 245152, upload-time = "2025-06-13T13:01:39.303Z" },
    { url = "https://files.pythonhosted.org/packages/5a/c8/272c01ae792bb3af9b30fac14d71d63371db227980682836ec388e2c57c0/coverage-7.9.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:73e9439310f65d55a5a1e0564b48e34f5369bee943d72c88378f2d576f5a5751", size = 243123, upload-time = "2025-06-13T13:01:40.727Z" },
    { url = "https://files.pythonhosted.org/packages/8c/d0/2819a1e3086143c094ab446e3bdf07138527a7b88cb235c488e78150ba7a/coverage-7.9.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:37ab6be0859141b53aa89412a82454b482c81cf750de4f29223d52268a86de67", size = 244506, upload-time = "2025-06-13T13:01:42.184Z" },
    { url = "https://files.pythonhosted.org/packages/8b/4e/9f6117b89152df7b6112f65c7a4ed1f2f5ec8e60c4be8f351d91e7acc848/coverage-7.9.1-cp313-cp313-win32.whl", hash = "sha256:64bdd969456e2d02a8b08aa047a92d269c7ac1f47e0c977675d550c9a0863643", size = 214766, upload-time = "2025-06-13T13:01:44.482Z" },
    { url = "https://files.pythonhosted.org/packages/27/0f/4b59f7c93b52c2c4ce7387c5a4e135e49891bb3b7408dcc98fe44033bbe0/coverage-7.9.1-cp313-cp313-win_amd64.whl", hash = "sha256:be9e3f68ca9edb897c2184ad0eee815c635565dbe7a0e7e814dc1f7cbab92c0a", size = 215568, upload-time = "2025-06-13T13:01:45.772Z" },
    { url = "https://files.pythonhosted.org/packages/09/1e/9679826336f8c67b9c39a359352882b24a8a7aee48d4c9cad08d38d7510f/coverage-7.9.1-cp313-cp313-win_arm64.whl", hash = "sha256:1c503289ffef1d5105d91bbb4d62cbe4b14bec4d13ca225f9c73cde9bb46207d", size = 213939, upload-time = "2025-06-13T13:01:47.087Z" },
    { url = "https://files.pythonhosted.org/packages/bb/5b/5c6b4e7a407359a2e3b27bf9c8a7b658127975def62077d441b93a30dbe8/coverage-7.9.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:0b3496922cb5f4215bf5caaef4cf12364a26b0be82e9ed6d050f3352cf2d7ef0", size = 213079, upload-time = "2025-06-13T13:01:48.554Z" },
    { url = "https://files.pythonhosted.org/packages/a2/22/1e2e07279fd2fd97ae26c01cc2186e2258850e9ec125ae87184225662e89/coverage-7.9.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:9565c3ab1c93310569ec0d86b017f128f027cab0b622b7af288696d7ed43a16d", size = 213299, upload-time = "2025-06-13T13:01:49.997Z" },
    { url = "https://files.pythonhosted.org/packages/14/c0/4c5125a4b69d66b8c85986d3321520f628756cf524af810baab0790c7647/coverage-7.9.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2241ad5dbf79ae1d9c08fe52b36d03ca122fb9ac6bca0f34439e99f8327ac89f", size = 256535, upload-time = "2025-06-13T13:01:51.314Z" },
    { url = "https://files.pythonhosted.org/packages/81/8b/e36a04889dda9960be4263e95e777e7b46f1bb4fc32202612c130a20c4da/coverage-7.9.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3bb5838701ca68b10ebc0937dbd0eb81974bac54447c55cd58dea5bca8451029", size = 252756, upload-time = "2025-06-13T13:01:54.403Z" },
    { url = "https://files.pythonhosted.org/packages/98/82/be04eff8083a09a4622ecd0e1f31a2c563dbea3ed848069e7b0445043a70/coverage-7.9.1-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b30a25f814591a8c0c5372c11ac8967f669b97444c47fd794926e175c4047ece", size = 254912, upload-time = "2025-06-13T13:01:56.769Z" },
    { url = "https://files.pythonhosted.org/packages/0f/25/c26610a2c7f018508a5ab958e5b3202d900422cf7cdca7670b6b8ca4e8df/coverage-7.9.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:2d04b16a6062516df97969f1ae7efd0de9c31eb6ebdceaa0d213b21c0ca1a683", size = 256144, upload-time = "2025-06-13T13:01:58.19Z" },
    { url = "https://files.pythonhosted.org/packages/c5/8b/fb9425c4684066c79e863f1e6e7ecebb49e3a64d9f7f7860ef1688c56f4a/coverage-7.9.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:7931b9e249edefb07cd6ae10c702788546341d5fe44db5b6108a25da4dca513f", size = 254257, upload-time = "2025-06-13T13:01:59.645Z" },
    { url = "https://files.pythonhosted.org/packages/93/df/27b882f54157fc1131e0e215b0da3b8d608d9b8ef79a045280118a8f98fe/coverage-7.9.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:52e92b01041151bf607ee858e5a56c62d4b70f4dac85b8c8cb7fb8a351ab2c10", size = 255094, upload-time = "2025-06-13T13:02:01.37Z" },
    { url = "https://files.pythonhosted.org/packages/41/5f/cad1c3dbed8b3ee9e16fa832afe365b4e3eeab1fb6edb65ebbf745eabc92/coverage-7.9.1-cp313-cp313t-win32.whl", hash = "sha256:684e2110ed84fd1ca5f40e89aa44adf1729dc85444004111aa01866507adf363", size = 215437, upload-time = "2025-06-13T13:02:02.905Z" },
    { url = "https://files.pythonhosted.org/packages/99/4d/fad293bf081c0e43331ca745ff63673badc20afea2104b431cdd8c278b4c/coverage-7.9.1-cp313-cp313t-win_amd64.whl", hash = "sha256:437c576979e4db840539674e68c84b3cda82bc824dd138d56bead1435f1cb5d7", size = 216605, upload-time = "2025-06-13T13:02:05.638Z" },
    { url = "https://files.pythonhosted.org/packages/1f/56/4ee027d5965fc7fc126d7ec1187529cc30cc7d740846e1ecb5e92d31b224/coverage-7.9.1-cp313-cp313t-win_arm64.whl", hash = "sha256:18a0912944d70aaf5f399e350445738a1a20b50fbea788f640751c2ed9208b6c", size = 214392, upload-time = "2025-06-13T13:02:07.642Z" },
    { url = "https://files.pythonhosted.org/packages/08/b8/7ddd1e8ba9701dea08ce22029917140e6f66a859427406579fd8d0ca7274/coverage-7.9.1-py3-none-any.whl", hash = "sha256:66b974b145aa189516b6bf2d8423e888b742517d37872f6ee4c5be0073bd9a3c", size = 204000, upload-time = "2025-06-13T13:02:27.173Z" },
]

[[package]]
name = "decorator"
version = "5.2.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/43/fa/6d96a0978d19e17b68d634497769987b16c8f4cd0a7a05048bec693caa6b/decorator-5.2.1.tar.gz", hash = "sha256:65f266143752f734b0a7cc83c46f4618af75b8c5911b00ccb61d0ac9b6da0360", size = 56711, upload-time = "2025-02-24T04:41:34.073Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4e/8c/f3147f5c4b73e7550fe5f9352eaa956ae838d5c51eb58e7a25b9f3e2643b/decorator-5.2.1-py3-none-any.whl", hash = "sha256:d316bb415a2d9e2d2b3abcc4084c6502fc09240e292cd76a76afc106a1c8e04a", size = 9190, upload-time = "2025-02-24T04:41:32.565Z" },
]

[[package]]
name = "executing"
version = "2.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/91/50/a9d80c47ff289c611ff12e63f7c5d13942c65d68125160cefd768c73e6e4/executing-2.2.0.tar.gz", hash = "sha256:5d108c028108fe2551d1a7b2e8b713341e2cb4fc0aa7dcf966fa4327a5226755", size = 978693, upload-time = "2025-01-22T15:41:29.403Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7b/8f/c4d9bafc34ad7ad5d8dc16dd1347ee0e507a52c3adb6bfa8887e1c6a26ba/executing-2.2.0-py2.py3-none-any.whl", hash = "sha256:11387150cad388d62750327a53d3339fad4888b39a6fe233c3afbb54ecffd3aa", size = 26702, upload-time = "2025-01-22T15:41:25.929Z" },
]

[[package]]
name = "flask"
version = "3.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "blinker" },
    { name = "click" },
    { name = "itsdangerous" },
    { name = "jinja2" },
    { name = "markupsafe" },
    { name = "werkzeug" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c0/de/e47735752347f4128bcf354e0da07ef311a78244eba9e3dc1d4a5ab21a98/flask-3.1.1.tar.gz", hash = "sha256:284c7b8f2f58cb737f0cf1c30fd7eaf0ccfcde196099d24ecede3fc2005aa59e", size = 753440, upload-time = "2025-05-13T15:01:17.447Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3d/68/9d4508e893976286d2ead7f8f571314af6c2037af34853a30fd769c02e9d/flask-3.1.1-py3-none-any.whl", hash = "sha256:07aae2bb5eaf77993ef57e357491839f5fd9f4dc281593a81a9e4d79a24f295c", size = 103305, upload-time = "2025-05-13T15:01:15.591Z" },
]

[[package]]
name = "flask-bcrypt"
version = "1.0.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "bcrypt" },
    { name = "flask" },
]
sdist = { url = "https://files.pythonhosted.org/packages/0c/f4/25dccfafad391d305b63eb6031e7c1dbb757169d54d3a73292939201698e/Flask-Bcrypt-1.0.1.tar.gz", hash = "sha256:f07b66b811417ea64eb188ae6455b0b708a793d966e1a80ceec4a23bc42a4369", size = 5996, upload-time = "2022-04-05T03:59:52.682Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8b/72/af9a3a3dbcf7463223c089984b8dd4f1547593819e24d57d9dc5873e04fe/Flask_Bcrypt-1.0.1-py3-none-any.whl", hash = "sha256:062fd991dc9118d05ac0583675507b9fe4670e44416c97e0e6819d03d01f808a", size = 6050, upload-time = "2022-04-05T03:59:51.589Z" },
]

[[package]]
name = "flask-cors"
version = "6.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "flask" },
    { name = "werkzeug" },
]
sdist = { url = "https://files.pythonhosted.org/packages/20/e7/b3c6afdd984672b55dff07482699c688af6c01bd7fd5dd55f9c9d1a88d1c/flask_cors-6.0.0.tar.gz", hash = "sha256:4592c1570246bf7beee96b74bc0adbbfcb1b0318f6ba05c412e8909eceec3393", size = 11875, upload-time = "2025-05-17T14:35:16.98Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ba/f0/0ee29090016345938f016ee98aa8b5de1c500ee93491dc0c76495848fca1/flask_cors-6.0.0-py3-none-any.whl", hash = "sha256:6332073356452343a8ccddbfec7befdc3fdd040141fe776ec9b94c262f058657", size = 11549, upload-time = "2025-05-17T14:35:15.766Z" },
]

[[package]]
name = "flask-jwt-extended"
version = "4.7.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "flask" },
    { name = "pyjwt" },
    { name = "werkzeug" },
]
sdist = { url = "https://files.pythonhosted.org/packages/51/16/96b101f18cba17ecce3225ab07bc4c8f23e6befd8552dbbed87482e7c7fb/flask_jwt_extended-4.7.1.tar.gz", hash = "sha256:8085d6757505b6f3291a2638c84d207e8f0ad0de662d1f46aa2f77e658a0c976", size = 34411, upload-time = "2024-11-20T23:44:41.044Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/34/9a91da47b1565811ab4aa5fb134632c8d1757960bfa7d457f486947c4d75/Flask_JWT_Extended-4.7.1-py2.py3-none-any.whl", hash = "sha256:52f35bf0985354d7fb7b876e2eb0e0b141aaff865a22ff6cc33d9a18aa987978", size = 22588, upload-time = "2024-11-20T23:44:39.435Z" },
]

[[package]]
name = "flask-migrate"
version = "4.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "alembic" },
    { name = "flask" },
    { name = "flask-sqlalchemy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5a/8e/47c7b3c93855ceffc2eabfa271782332942443321a07de193e4198f920cf/flask_migrate-4.1.0.tar.gz", hash = "sha256:1a336b06eb2c3ace005f5f2ded8641d534c18798d64061f6ff11f79e1434126d", size = 21965, upload-time = "2025-01-10T18:51:11.848Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d2/c4/3f329b23d769fe7628a5fc57ad36956f1fb7132cf8837be6da762b197327/Flask_Migrate-4.1.0-py3-none-any.whl", hash = "sha256:24d8051af161782e0743af1b04a152d007bad9772b2bca67b7ec1e8ceeb3910d", size = 21237, upload-time = "2025-01-10T18:51:09.527Z" },
]

[[package]]
name = "flask-sqlalchemy"
version = "3.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "flask" },
    { name = "sqlalchemy" },
]
sdist = { url = "https://files.pythonhosted.org/packages/91/53/b0a9fcc1b1297f51e68b69ed3b7c3c40d8c45be1391d77ae198712914392/flask_sqlalchemy-3.1.1.tar.gz", hash = "sha256:e4b68bb881802dda1a7d878b2fc84c06d1ee57fb40b874d3dc97dabfa36b8312", size = 81899, upload-time = "2023-09-11T21:42:36.147Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/1d/6a/89963a5c6ecf166e8be29e0d1bf6806051ee8fe6c82e232842e3aeac9204/flask_sqlalchemy-3.1.1-py3-none-any.whl", hash = "sha256:4ba4be7f419dc72f4efd8802d69974803c37259dd42f3913b0dcf75c9447e0a0", size = 25125, upload-time = "2023-09-11T21:42:34.514Z" },
]

[[package]]
name = "greenlet"
version = "3.2.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/c9/92/bb85bd6e80148a4d2e0c59f7c0c2891029f8fd510183afc7d8d2feeed9b6/greenlet-3.2.3.tar.gz", hash = "sha256:8b0dd8ae4c0d6f5e54ee55ba935eeb3d735a9b58a8a1e5b5cbab64e01a39f365", size = 185752, upload-time = "2025-06-05T16:16:09.955Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f3/94/ad0d435f7c48debe960c53b8f60fb41c2026b1d0fa4a99a1cb17c3461e09/greenlet-3.2.3-cp312-cp312-macosx_11_0_universal2.whl", hash = "sha256:25ad29caed5783d4bd7a85c9251c651696164622494c00802a139c00d639242d", size = 271992, upload-time = "2025-06-05T16:11:23.467Z" },
    { url = "https://files.pythonhosted.org/packages/93/5d/7c27cf4d003d6e77749d299c7c8f5fd50b4f251647b5c2e97e1f20da0ab5/greenlet-3.2.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:88cd97bf37fe24a6710ec6a3a7799f3f81d9cd33317dcf565ff9950c83f55e0b", size = 638820, upload-time = "2025-06-05T16:38:52.882Z" },
    { url = "https://files.pythonhosted.org/packages/c6/7e/807e1e9be07a125bb4c169144937910bf59b9d2f6d931578e57f0bce0ae2/greenlet-3.2.3-cp312-cp312-manylinux2014_ppc64le.manylinux_2_17_ppc64le.whl", hash = "sha256:baeedccca94880d2f5666b4fa16fc20ef50ba1ee353ee2d7092b383a243b0b0d", size = 653046, upload-time = "2025-06-05T16:41:36.343Z" },
    { url = "https://files.pythonhosted.org/packages/9d/ab/158c1a4ea1068bdbc78dba5a3de57e4c7aeb4e7fa034320ea94c688bfb61/greenlet-3.2.3-cp312-cp312-manylinux2014_s390x.manylinux_2_17_s390x.whl", hash = "sha256:be52af4b6292baecfa0f397f3edb3c6092ce071b499dd6fe292c9ac9f2c8f264", size = 647701, upload-time = "2025-06-05T16:48:19.604Z" },
    { url = "https://files.pythonhosted.org/packages/cc/0d/93729068259b550d6a0288da4ff72b86ed05626eaf1eb7c0d3466a2571de/greenlet-3.2.3-cp312-cp312-manylinux2014_x86_64.manylinux_2_17_x86_64.whl", hash = "sha256:0cc73378150b8b78b0c9fe2ce56e166695e67478550769536a6742dca3651688", size = 649747, upload-time = "2025-06-05T16:13:04.628Z" },
    { url = "https://files.pythonhosted.org/packages/f6/f6/c82ac1851c60851302d8581680573245c8fc300253fc1ff741ae74a6c24d/greenlet-3.2.3-cp312-cp312-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:706d016a03e78df129f68c4c9b4c4f963f7d73534e48a24f5f5a7101ed13dbbb", size = 605461, upload-time = "2025-06-05T16:12:50.792Z" },
    { url = "https://files.pythonhosted.org/packages/98/82/d022cf25ca39cf1200650fc58c52af32c90f80479c25d1cbf57980ec3065/greenlet-3.2.3-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:419e60f80709510c343c57b4bb5a339d8767bf9aef9b8ce43f4f143240f88b7c", size = 1121190, upload-time = "2025-06-05T16:36:48.59Z" },
    { url = "https://files.pythonhosted.org/packages/f5/e1/25297f70717abe8104c20ecf7af0a5b82d2f5a980eb1ac79f65654799f9f/greenlet-3.2.3-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:93d48533fade144203816783373f27a97e4193177ebaaf0fc396db19e5d61163", size = 1149055, upload-time = "2025-06-05T16:12:40.457Z" },
    { url = "https://files.pythonhosted.org/packages/1f/8f/8f9e56c5e82eb2c26e8cde787962e66494312dc8cb261c460e1f3a9c88bc/greenlet-3.2.3-cp312-cp312-win_amd64.whl", hash = "sha256:7454d37c740bb27bdeddfc3f358f26956a07d5220818ceb467a483197d84f849", size = 297817, upload-time = "2025-06-05T16:29:49.244Z" },
    { url = "https://files.pythonhosted.org/packages/b1/cf/f5c0b23309070ae93de75c90d29300751a5aacefc0a3ed1b1d8edb28f08b/greenlet-3.2.3-cp313-cp313-macosx_11_0_universal2.whl", hash = "sha256:500b8689aa9dd1ab26872a34084503aeddefcb438e2e7317b89b11eaea1901ad", size = 270732, upload-time = "2025-06-05T16:10:08.26Z" },
    { url = "https://files.pythonhosted.org/packages/48/ae/91a957ba60482d3fecf9be49bc3948f341d706b52ddb9d83a70d42abd498/greenlet-3.2.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:a07d3472c2a93117af3b0136f246b2833fdc0b542d4a9799ae5f41c28323faef", size = 639033, upload-time = "2025-06-05T16:38:53.983Z" },
    { url = "https://files.pythonhosted.org/packages/6f/df/20ffa66dd5a7a7beffa6451bdb7400d66251374ab40b99981478c69a67a8/greenlet-3.2.3-cp313-cp313-manylinux2014_ppc64le.manylinux_2_17_ppc64le.whl", hash = "sha256:8704b3768d2f51150626962f4b9a9e4a17d2e37c8a8d9867bbd9fa4eb938d3b3", size = 652999, upload-time = "2025-06-05T16:41:37.89Z" },
    { url = "https://files.pythonhosted.org/packages/51/b4/ebb2c8cb41e521f1d72bf0465f2f9a2fd803f674a88db228887e6847077e/greenlet-3.2.3-cp313-cp313-manylinux2014_s390x.manylinux_2_17_s390x.whl", hash = "sha256:5035d77a27b7c62db6cf41cf786cfe2242644a7a337a0e155c80960598baab95", size = 647368, upload-time = "2025-06-05T16:48:21.467Z" },
    { url = "https://files.pythonhosted.org/packages/8e/6a/1e1b5aa10dced4ae876a322155705257748108b7fd2e4fae3f2a091fe81a/greenlet-3.2.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.whl", hash = "sha256:2d8aa5423cd4a396792f6d4580f88bdc6efcb9205891c9d40d20f6e670992efb", size = 650037, upload-time = "2025-06-05T16:13:06.402Z" },
    { url = "https://files.pythonhosted.org/packages/26/f2/ad51331a157c7015c675702e2d5230c243695c788f8f75feba1af32b3617/greenlet-3.2.3-cp313-cp313-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:2c724620a101f8170065d7dded3f962a2aea7a7dae133a009cada42847e04a7b", size = 608402, upload-time = "2025-06-05T16:12:51.91Z" },
    { url = "https://files.pythonhosted.org/packages/26/bc/862bd2083e6b3aff23300900a956f4ea9a4059de337f5c8734346b9b34fc/greenlet-3.2.3-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:873abe55f134c48e1f2a6f53f7d1419192a3d1a4e873bace00499a4e45ea6af0", size = 1119577, upload-time = "2025-06-05T16:36:49.787Z" },
    { url = "https://files.pythonhosted.org/packages/86/94/1fc0cc068cfde885170e01de40a619b00eaa8f2916bf3541744730ffb4c3/greenlet-3.2.3-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:024571bbce5f2c1cfff08bf3fbaa43bbc7444f580ae13b0099e95d0e6e67ed36", size = 1147121, upload-time = "2025-06-05T16:12:42.527Z" },
    { url = "https://files.pythonhosted.org/packages/27/1a/199f9587e8cb08a0658f9c30f3799244307614148ffe8b1e3aa22f324dea/greenlet-3.2.3-cp313-cp313-win_amd64.whl", hash = "sha256:5195fb1e75e592dd04ce79881c8a22becdfa3e6f500e7feb059b1e6fdd54d3e3", size = 297603, upload-time = "2025-06-05T16:20:12.651Z" },
    { url = "https://files.pythonhosted.org/packages/d8/ca/accd7aa5280eb92b70ed9e8f7fd79dc50a2c21d8c73b9a0856f5b564e222/greenlet-3.2.3-cp314-cp314-macosx_11_0_universal2.whl", hash = "sha256:3d04332dddb10b4a211b68111dabaee2e1a073663d117dc10247b5b1642bac86", size = 271479, upload-time = "2025-06-05T16:10:47.525Z" },
    { url = "https://files.pythonhosted.org/packages/55/71/01ed9895d9eb49223280ecc98a557585edfa56b3d0e965b9fa9f7f06b6d9/greenlet-3.2.3-cp314-cp314-manylinux2014_aarch64.manylinux_2_17_aarch64.whl", hash = "sha256:8186162dffde068a465deab08fc72c767196895c39db26ab1c17c0b77a6d8b97", size = 683952, upload-time = "2025-06-05T16:38:55.125Z" },
    { url = "https://files.pythonhosted.org/packages/ea/61/638c4bdf460c3c678a0a1ef4c200f347dff80719597e53b5edb2fb27ab54/greenlet-3.2.3-cp314-cp314-manylinux2014_ppc64le.manylinux_2_17_ppc64le.whl", hash = "sha256:f4bfbaa6096b1b7a200024784217defedf46a07c2eee1a498e94a1b5f8ec5728", size = 696917, upload-time = "2025-06-05T16:41:38.959Z" },
    { url = "https://files.pythonhosted.org/packages/22/cc/0bd1a7eb759d1f3e3cc2d1bc0f0b487ad3cc9f34d74da4b80f226fde4ec3/greenlet-3.2.3-cp314-cp314-manylinux2014_s390x.manylinux_2_17_s390x.whl", hash = "sha256:ed6cfa9200484d234d8394c70f5492f144b20d4533f69262d530a1a082f6ee9a", size = 692443, upload-time = "2025-06-05T16:48:23.113Z" },
    { url = "https://files.pythonhosted.org/packages/67/10/b2a4b63d3f08362662e89c103f7fe28894a51ae0bc890fabf37d1d780e52/greenlet-3.2.3-cp314-cp314-manylinux2014_x86_64.manylinux_2_17_x86_64.whl", hash = "sha256:02b0df6f63cd15012bed5401b47829cfd2e97052dc89da3cfaf2c779124eb892", size = 692995, upload-time = "2025-06-05T16:13:07.972Z" },
    { url = "https://files.pythonhosted.org/packages/5a/c6/ad82f148a4e3ce9564056453a71529732baf5448ad53fc323e37efe34f66/greenlet-3.2.3-cp314-cp314-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:86c2d68e87107c1792e2e8d5399acec2487a4e993ab76c792408e59394d52141", size = 655320, upload-time = "2025-06-05T16:12:53.453Z" },
    { url = "https://files.pythonhosted.org/packages/5c/4f/aab73ecaa6b3086a4c89863d94cf26fa84cbff63f52ce9bc4342b3087a06/greenlet-3.2.3-cp314-cp314-win_amd64.whl", hash = "sha256:8c47aae8fbbfcf82cc13327ae802ba13c9c36753b67e760023fd116bc124a62a", size = 301236, upload-time = "2025-06-05T16:15:20.111Z" },
]

[[package]]
name = "iniconfig"
version = "2.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f2/97/ebf4da567aa6827c909642694d71c9fcf53e5b504f2d96afea02718862f3/iniconfig-2.1.0.tar.gz", hash = "sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7", size = 4793, upload-time = "2025-03-19T20:09:59.721Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2c/e1/e6716421ea10d38022b952c159d5161ca1193197fb744506875fbb87ea7b/iniconfig-2.1.0-py3-none-any.whl", hash = "sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760", size = 6050, upload-time = "2025-03-19T20:10:01.071Z" },
]

[[package]]
name = "ipdb"
version = "0.13.13"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "decorator" },
    { name = "ipython" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3d/1b/7e07e7b752017f7693a0f4d41c13e5ca29ce8cbcfdcc1fd6c4ad8c0a27a0/ipdb-0.13.13.tar.gz", hash = "sha256:e3ac6018ef05126d442af680aad863006ec19d02290561ac88b8b1c0b0cfc726", size = 17042, upload-time = "2023-03-09T15:40:57.487Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0c/4c/b075da0092003d9a55cf2ecc1cae9384a1ca4f650d51b00fc59875fe76f6/ipdb-0.13.13-py3-none-any.whl", hash = "sha256:45529994741c4ab6d2388bfa5d7b725c2cf7fe9deffabdb8a6113aa5ed449ed4", size = 12130, upload-time = "2023-03-09T15:40:55.021Z" },
]

[[package]]
name = "ipython"
version = "9.3.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "decorator" },
    { name = "ipython-pygments-lexers" },
    { name = "jedi" },
    { name = "matplotlib-inline" },
    { name = "pexpect", marker = "sys_platform != 'emscripten' and sys_platform != 'win32'" },
    { name = "prompt-toolkit" },
    { name = "pygments" },
    { name = "stack-data" },
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/dc/09/4c7e06b96fbd203e06567b60fb41b06db606b6a82db6db7b2c85bb72a15c/ipython-9.3.0.tar.gz", hash = "sha256:79eb896f9f23f50ad16c3bc205f686f6e030ad246cc309c6279a242b14afe9d8", size = 4426460, upload-time = "2025-05-31T16:34:55.678Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3c/99/9ed3d52d00f1846679e3aa12e2326ac7044b5e7f90dc822b60115fa533ca/ipython-9.3.0-py3-none-any.whl", hash = "sha256:1a0b6dd9221a1f5dddf725b57ac0cb6fddc7b5f470576231ae9162b9b3455a04", size = 605320, upload-time = "2025-05-31T16:34:52.154Z" },
]

[[package]]
name = "ipython-pygments-lexers"
version = "1.1.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ef/4c/5dd1d8af08107f88c7f741ead7a40854b8ac24ddf9ae850afbcf698aa552/ipython_pygments_lexers-1.1.1.tar.gz", hash = "sha256:09c0138009e56b6854f9535736f4171d855c8c08a563a0dcd8022f78355c7e81", size = 8393, upload-time = "2025-01-17T11:24:34.505Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d9/33/1f075bf72b0b747cb3288d011319aaf64083cf2efef8354174e3ed4540e2/ipython_pygments_lexers-1.1.1-py3-none-any.whl", hash = "sha256:a9462224a505ade19a605f71f8fa63c2048833ce50abc86768a0d81d876dc81c", size = 8074, upload-time = "2025-01-17T11:24:33.271Z" },
]

[[package]]
name = "itsdangerous"
version = "2.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/9c/cb/8ac0172223afbccb63986cc25049b154ecfb5e85932587206f42317be31d/itsdangerous-2.2.0.tar.gz", hash = "sha256:e0050c0b7da1eea53ffaf149c0cfbb5c6e2e2b69c4bef22c81fa6eb73e5f6173", size = 54410, upload-time = "2024-04-16T21:28:15.614Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/04/96/92447566d16df59b2a776c0fb82dbc4d9e07cd95062562af01e408583fc4/itsdangerous-2.2.0-py3-none-any.whl", hash = "sha256:c6242fc49e35958c8b15141343aa660db5fc54d4f13a1db01a3f5891b98700ef", size = 16234, upload-time = "2024-04-16T21:28:14.499Z" },
]

[[package]]
name = "jedi"
version = "0.19.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "parso" },
]
sdist = { url = "https://files.pythonhosted.org/packages/72/3a/79a912fbd4d8dd6fbb02bf69afd3bb72cf0c729bb3063c6f4498603db17a/jedi-0.19.2.tar.gz", hash = "sha256:4770dc3de41bde3966b02eb84fbcf557fb33cce26ad23da12c742fb50ecb11f0", size = 1231287, upload-time = "2024-11-11T01:41:42.873Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c0/5a/9cac0c82afec3d09ccd97c8b6502d48f165f9124db81b4bcb90b4af974ee/jedi-0.19.2-py2.py3-none-any.whl", hash = "sha256:a8ef22bde8490f57fe5c7681a3c83cb58874daf72b4784de3cce5b6ef6edb5b9", size = 1572278, upload-time = "2024-11-11T01:41:40.175Z" },
]

[[package]]
name = "jinja2"
version = "3.1.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markupsafe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/df/bf/f7da0350254c0ed7c72f3e33cef02e048281fec7ecec5f032d4aac52226b/jinja2-3.1.6.tar.gz", hash = "sha256:0137fb05990d35f1275a587e9aee6d56da821fc83491a0fb838183be43f66d6d", size = 245115, upload-time = "2025-03-05T20:05:02.478Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/62/a1/3d680cbfd5f4b8f15abc1d571870c5fc3e594bb582bc3b64ea099db13e56/jinja2-3.1.6-py3-none-any.whl", hash = "sha256:85ece4451f492d0c13c5dd7c13a64681a86afae63a5f347908daf103ce6d2f67", size = 134899, upload-time = "2025-03-05T20:05:00.369Z" },
]

[[package]]
name = "mako"
version = "1.3.10"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markupsafe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9e/38/bd5b78a920a64d708fe6bc8e0a2c075e1389d53bef8413725c63ba041535/mako-1.3.10.tar.gz", hash = "sha256:99579a6f39583fa7e5630a28c3c1f440e4e97a414b80372649c0ce338da2ea28", size = 392474, upload-time = "2025-04-10T12:44:31.16Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/87/fb/99f81ac72ae23375f22b7afdb7642aba97c00a713c217124420147681a2f/mako-1.3.10-py3-none-any.whl", hash = "sha256:baef24a52fc4fc514a0887ac600f9f1cff3d82c61d4d700a1fa84d597b88db59", size = 78509, upload-time = "2025-04-10T12:50:53.297Z" },
]

[[package]]
name = "markupsafe"
version = "3.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b2/97/5d42485e71dfc078108a86d6de8fa46db44a1a9295e89c5d6d4a06e23a62/markupsafe-3.0.2.tar.gz", hash = "sha256:ee55d3edf80167e48ea11a923c7386f4669df67d7994554387f84e7d8b0a2bf0", size = 20537, upload-time = "2024-10-18T15:21:54.129Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/22/09/d1f21434c97fc42f09d290cbb6350d44eb12f09cc62c9476effdb33a18aa/MarkupSafe-3.0.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:9778bd8ab0a994ebf6f84c2b949e65736d5575320a17ae8984a77fab08db94cf", size = 14274, upload-time = "2024-10-18T15:21:13.777Z" },
    { url = "https://files.pythonhosted.org/packages/6b/b0/18f76bba336fa5aecf79d45dcd6c806c280ec44538b3c13671d49099fdd0/MarkupSafe-3.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:846ade7b71e3536c4e56b386c2a47adf5741d2d8b94ec9dc3e92e5e1ee1e2225", size = 12348, upload-time = "2024-10-18T15:21:14.822Z" },
    { url = "https://files.pythonhosted.org/packages/e0/25/dd5c0f6ac1311e9b40f4af06c78efde0f3b5cbf02502f8ef9501294c425b/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028", size = 24149, upload-time = "2024-10-18T15:21:15.642Z" },
    { url = "https://files.pythonhosted.org/packages/f3/f0/89e7aadfb3749d0f52234a0c8c7867877876e0a20b60e2188e9850794c17/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8", size = 23118, upload-time = "2024-10-18T15:21:17.133Z" },
    { url = "https://files.pythonhosted.org/packages/d5/da/f2eeb64c723f5e3777bc081da884b414671982008c47dcc1873d81f625b6/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:88416bd1e65dcea10bc7569faacb2c20ce071dd1f87539ca2ab364bf6231393c", size = 22993, upload-time = "2024-10-18T15:21:18.064Z" },
    { url = "https://files.pythonhosted.org/packages/da/0e/1f32af846df486dce7c227fe0f2398dc7e2e51d4a370508281f3c1c5cddc/MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557", size = 24178, upload-time = "2024-10-18T15:21:18.859Z" },
    { url = "https://files.pythonhosted.org/packages/c4/f6/bb3ca0532de8086cbff5f06d137064c8410d10779c4c127e0e47d17c0b71/MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:52305740fe773d09cffb16f8ed0427942901f00adedac82ec8b67752f58a1b22", size = 23319, upload-time = "2024-10-18T15:21:19.671Z" },
    { url = "https://files.pythonhosted.org/packages/a2/82/8be4c96ffee03c5b4a034e60a31294daf481e12c7c43ab8e34a1453ee48b/MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ad10d3ded218f1039f11a75f8091880239651b52e9bb592ca27de44eed242a48", size = 23352, upload-time = "2024-10-18T15:21:20.971Z" },
    { url = "https://files.pythonhosted.org/packages/51/ae/97827349d3fcffee7e184bdf7f41cd6b88d9919c80f0263ba7acd1bbcb18/MarkupSafe-3.0.2-cp312-cp312-win32.whl", hash = "sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30", size = 15097, upload-time = "2024-10-18T15:21:22.646Z" },
    { url = "https://files.pythonhosted.org/packages/c1/80/a61f99dc3a936413c3ee4e1eecac96c0da5ed07ad56fd975f1a9da5bc630/MarkupSafe-3.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:8e06879fc22a25ca47312fbe7c8264eb0b662f6db27cb2d3bbbc74b1df4b9b87", size = 15601, upload-time = "2024-10-18T15:21:23.499Z" },
    { url = "https://files.pythonhosted.org/packages/83/0e/67eb10a7ecc77a0c2bbe2b0235765b98d164d81600746914bebada795e97/MarkupSafe-3.0.2-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:ba9527cdd4c926ed0760bc301f6728ef34d841f405abf9d4f959c478421e4efd", size = 14274, upload-time = "2024-10-18T15:21:24.577Z" },
    { url = "https://files.pythonhosted.org/packages/2b/6d/9409f3684d3335375d04e5f05744dfe7e9f120062c9857df4ab490a1031a/MarkupSafe-3.0.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f8b3d067f2e40fe93e1ccdd6b2e1d16c43140e76f02fb1319a05cf2b79d99430", size = 12352, upload-time = "2024-10-18T15:21:25.382Z" },
    { url = "https://files.pythonhosted.org/packages/d2/f5/6eadfcd3885ea85fe2a7c128315cc1bb7241e1987443d78c8fe712d03091/MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:569511d3b58c8791ab4c2e1285575265991e6d8f8700c7be0e88f86cb0672094", size = 24122, upload-time = "2024-10-18T15:21:26.199Z" },
    { url = "https://files.pythonhosted.org/packages/0c/91/96cf928db8236f1bfab6ce15ad070dfdd02ed88261c2afafd4b43575e9e9/MarkupSafe-3.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:15ab75ef81add55874e7ab7055e9c397312385bd9ced94920f2802310c930396", size = 23085, upload-time = "2024-10-18T15:21:27.029Z" },
    { url = "https://files.pythonhosted.org/packages/c2/cf/c9d56af24d56ea04daae7ac0940232d31d5a8354f2b457c6d856b2057d69/MarkupSafe-3.0.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f3818cb119498c0678015754eba762e0d61e5b52d34c8b13d770f0719f7b1d79", size = 22978, upload-time = "2024-10-18T15:21:27.846Z" },
    { url = "https://files.pythonhosted.org/packages/2a/9f/8619835cd6a711d6272d62abb78c033bda638fdc54c4e7f4272cf1c0962b/MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:cdb82a876c47801bb54a690c5ae105a46b392ac6099881cdfb9f6e95e4014c6a", size = 24208, upload-time = "2024-10-18T15:21:28.744Z" },
    { url = "https://files.pythonhosted.org/packages/f9/bf/176950a1792b2cd2102b8ffeb5133e1ed984547b75db47c25a67d3359f77/MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:cabc348d87e913db6ab4aa100f01b08f481097838bdddf7c7a84b7575b7309ca", size = 23357, upload-time = "2024-10-18T15:21:29.545Z" },
    { url = "https://files.pythonhosted.org/packages/ce/4f/9a02c1d335caabe5c4efb90e1b6e8ee944aa245c1aaaab8e8a618987d816/MarkupSafe-3.0.2-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:444dcda765c8a838eaae23112db52f1efaf750daddb2d9ca300bcae1039adc5c", size = 23344, upload-time = "2024-10-18T15:21:30.366Z" },
    { url = "https://files.pythonhosted.org/packages/ee/55/c271b57db36f748f0e04a759ace9f8f759ccf22b4960c270c78a394f58be/MarkupSafe-3.0.2-cp313-cp313-win32.whl", hash = "sha256:bcf3e58998965654fdaff38e58584d8937aa3096ab5354d493c77d1fdd66d7a1", size = 15101, upload-time = "2024-10-18T15:21:31.207Z" },
    { url = "https://files.pythonhosted.org/packages/29/88/07df22d2dd4df40aba9f3e402e6dc1b8ee86297dddbad4872bd5e7b0094f/MarkupSafe-3.0.2-cp313-cp313-win_amd64.whl", hash = "sha256:e6a2a455bd412959b57a172ce6328d2dd1f01cb2135efda2e4576e8a23fa3b0f", size = 15603, upload-time = "2024-10-18T15:21:32.032Z" },
    { url = "https://files.pythonhosted.org/packages/62/6a/8b89d24db2d32d433dffcd6a8779159da109842434f1dd2f6e71f32f738c/MarkupSafe-3.0.2-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:b5a6b3ada725cea8a5e634536b1b01c30bcdcd7f9c6fff4151548d5bf6b3a36c", size = 14510, upload-time = "2024-10-18T15:21:33.625Z" },
    { url = "https://files.pythonhosted.org/packages/7a/06/a10f955f70a2e5a9bf78d11a161029d278eeacbd35ef806c3fd17b13060d/MarkupSafe-3.0.2-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:a904af0a6162c73e3edcb969eeeb53a63ceeb5d8cf642fade7d39e7963a22ddb", size = 12486, upload-time = "2024-10-18T15:21:34.611Z" },
    { url = "https://files.pythonhosted.org/packages/34/cf/65d4a571869a1a9078198ca28f39fba5fbb910f952f9dbc5220afff9f5e6/MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4aa4e5faecf353ed117801a068ebab7b7e09ffb6e1d5e412dc852e0da018126c", size = 25480, upload-time = "2024-10-18T15:21:35.398Z" },
    { url = "https://files.pythonhosted.org/packages/0c/e3/90e9651924c430b885468b56b3d597cabf6d72be4b24a0acd1fa0e12af67/MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c0ef13eaeee5b615fb07c9a7dadb38eac06a0608b41570d8ade51c56539e509d", size = 23914, upload-time = "2024-10-18T15:21:36.231Z" },
    { url = "https://files.pythonhosted.org/packages/66/8c/6c7cf61f95d63bb866db39085150df1f2a5bd3335298f14a66b48e92659c/MarkupSafe-3.0.2-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d16a81a06776313e817c951135cf7340a3e91e8c1ff2fac444cfd75fffa04afe", size = 23796, upload-time = "2024-10-18T15:21:37.073Z" },
    { url = "https://files.pythonhosted.org/packages/bb/35/cbe9238ec3f47ac9a7c8b3df7a808e7cb50fe149dc7039f5f454b3fba218/MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:6381026f158fdb7c72a168278597a5e3a5222e83ea18f543112b2662a9b699c5", size = 25473, upload-time = "2024-10-18T15:21:37.932Z" },
    { url = "https://files.pythonhosted.org/packages/e6/32/7621a4382488aa283cc05e8984a9c219abad3bca087be9ec77e89939ded9/MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:3d79d162e7be8f996986c064d1c7c817f6df3a77fe3d6859f6f9e7be4b8c213a", size = 24114, upload-time = "2024-10-18T15:21:39.799Z" },
    { url = "https://files.pythonhosted.org/packages/0d/80/0985960e4b89922cb5a0bac0ed39c5b96cbc1a536a99f30e8c220a996ed9/MarkupSafe-3.0.2-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:131a3c7689c85f5ad20f9f6fb1b866f402c445b220c19fe4308c0b147ccd2ad9", size = 24098, upload-time = "2024-10-18T15:21:40.813Z" },
    { url = "https://files.pythonhosted.org/packages/82/78/fedb03c7d5380df2427038ec8d973587e90561b2d90cd472ce9254cf348b/MarkupSafe-3.0.2-cp313-cp313t-win32.whl", hash = "sha256:ba8062ed2cf21c07a9e295d5b8a2a5ce678b913b45fdf68c32d95d6c1291e0b6", size = 15208, upload-time = "2024-10-18T15:21:41.814Z" },
    { url = "https://files.pythonhosted.org/packages/4f/65/6079a46068dfceaeabb5dcad6d674f5f5c61a6fa5673746f42a9f4c233b3/MarkupSafe-3.0.2-cp313-cp313t-win_amd64.whl", hash = "sha256:e444a31f8db13eb18ada366ab3cf45fd4b31e4db1236a4448f68778c1d1a5a2f", size = 15739, upload-time = "2024-10-18T15:21:42.784Z" },
]

[[package]]
name = "matplotlib-inline"
version = "0.1.7"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "traitlets" },
]
sdist = { url = "https://files.pythonhosted.org/packages/99/5b/a36a337438a14116b16480db471ad061c36c3694df7c2084a0da7ba538b7/matplotlib_inline-0.1.7.tar.gz", hash = "sha256:8423b23ec666be3d16e16b60bdd8ac4e86e840ebd1dd11a30b9f117f2fa0ab90", size = 8159, upload-time = "2024-04-15T13:44:44.803Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8f/8e/9ad090d3553c280a8060fbf6e24dc1c0c29704ee7d1c372f0c174aa59285/matplotlib_inline-0.1.7-py3-none-any.whl", hash = "sha256:df192d39a4ff8f21b1895d72e6a13f5fcc5099f00fa84384e0ea28c2cc0653ca", size = 9899, upload-time = "2024-04-15T13:44:43.265Z" },
]

[[package]]
name = "packaging"
version = "25.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a1/d4/1fc4078c65507b51b96ca8f8c3ba19e6a61c8253c72794544580a7b6c24d/packaging-25.0.tar.gz", hash = "sha256:d443872c98d677bf60f6a1f2f8c1cb748e8fe762d2bf9d3148b5599295b0fc4f", size = 165727, upload-time = "2025-04-19T11:48:59.673Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/20/12/38679034af332785aac8774540895e234f4d07f7545804097de4b666afd8/packaging-25.0-py3-none-any.whl", hash = "sha256:29572ef2b1f17581046b3a2227d5c611fb25ec70ca1ba8554b24b0e69331a484", size = 66469, upload-time = "2025-04-19T11:48:57.875Z" },
]

[[package]]
name = "parso"
version = "0.8.4"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/66/94/68e2e17afaa9169cf6412ab0f28623903be73d1b32e208d9e8e541bb086d/parso-0.8.4.tar.gz", hash = "sha256:eb3a7b58240fb99099a345571deecc0f9540ea5f4dd2fe14c2a99d6b281ab92d", size = 400609, upload-time = "2024-04-05T09:43:55.897Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c6/ac/dac4a63f978e4dcb3c6d3a78c4d8e0192a113d288502a1216950c41b1027/parso-0.8.4-py2.py3-none-any.whl", hash = "sha256:a418670a20291dacd2dddc80c377c5c3791378ee1e8d12bffc35420643d43f18", size = 103650, upload-time = "2024-04-05T09:43:53.299Z" },
]

[[package]]
name = "pexpect"
version = "4.9.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "ptyprocess" },
]
sdist = { url = "https://files.pythonhosted.org/packages/42/92/cc564bf6381ff43ce1f4d06852fc19a2f11d180f23dc32d9588bee2f149d/pexpect-4.9.0.tar.gz", hash = "sha256:ee7d41123f3c9911050ea2c2dac107568dc43b2d3b0c7557a33212c398ead30f", size = 166450, upload-time = "2023-11-25T09:07:26.339Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9e/c3/059298687310d527a58bb01f3b1965787ee3b40dce76752eda8b44e9a2c5/pexpect-4.9.0-py2.py3-none-any.whl", hash = "sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523", size = 63772, upload-time = "2023-11-25T06:56:14.81Z" },
]

[[package]]
name = "pluggy"
version = "1.6.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f9/e2/3e91f31a7d2b083fe6ef3fa267035b518369d9511ffab804f839851d2779/pluggy-1.6.0.tar.gz", hash = "sha256:7dcc130b76258d33b90f61b658791dede3486c3e6bfb003ee5c9bfb396dd22f3", size = 69412, upload-time = "2025-05-15T12:30:07.975Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/20/4d324d65cc6d9205fabedc306948156824eb9f0ee1633355a8f7ec5c66bf/pluggy-1.6.0-py3-none-any.whl", hash = "sha256:e920276dd6813095e9377c0bc5566d94c932c33b27a3e3945d8389c374dd4746", size = 20538, upload-time = "2025-05-15T12:30:06.134Z" },
]

[[package]]
name = "prompt-toolkit"
version = "3.0.51"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "wcwidth" },
]
sdist = { url = "https://files.pythonhosted.org/packages/bb/6e/9d084c929dfe9e3bfe0c6a47e31f78a25c54627d64a66e884a8bf5474f1c/prompt_toolkit-3.0.51.tar.gz", hash = "sha256:931a162e3b27fc90c86f1b48bb1fb2c528c2761475e57c9c06de13311c7b54ed", size = 428940, upload-time = "2025-04-15T09:18:47.731Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ce/4f/5249960887b1fbe561d9ff265496d170b55a735b76724f10ef19f9e40716/prompt_toolkit-3.0.51-py3-none-any.whl", hash = "sha256:52742911fde84e2d423e2f9a4cf1de7d7ac4e51958f648d9540e0fb8db077b07", size = 387810, upload-time = "2025-04-15T09:18:44.753Z" },
]

[[package]]
name = "ptyprocess"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/20/e5/16ff212c1e452235a90aeb09066144d0c5a6a8c0834397e03f5224495c4e/ptyprocess-0.7.0.tar.gz", hash = "sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220", size = 70762, upload-time = "2020-12-28T15:15:30.155Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/22/a6/858897256d0deac81a172289110f31629fc4cee19b6f01283303e18c8db3/ptyprocess-0.7.0-py2.py3-none-any.whl", hash = "sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35", size = 13993, upload-time = "2020-12-28T15:15:28.35Z" },
]

[[package]]
name = "pure-eval"
version = "0.2.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/cd/05/0a34433a064256a578f1783a10da6df098ceaa4a57bbeaa96a6c0352786b/pure_eval-0.2.3.tar.gz", hash = "sha256:5f4e983f40564c576c7c8635ae88db5956bb2229d7e9237d03b3c0b0190eaf42", size = 19752, upload-time = "2024-07-21T12:58:21.801Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8e/37/efad0257dc6e593a18957422533ff0f87ede7c9c6ea010a2177d738fb82f/pure_eval-0.2.3-py3-none-any.whl", hash = "sha256:1db8e35b67b3d218d818ae653e27f06c3aa420901fa7b081ca98cbedc874e0d0", size = 11842, upload-time = "2024-07-21T12:58:20.04Z" },
]

[[package]]
name = "pygments"
version = "2.19.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7c/2d/c3338d48ea6cc0feb8446d8e6937e1408088a72a39937982cc6111d17f84/pygments-2.19.1.tar.gz", hash = "sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f", size = 4968581, upload-time = "2025-01-06T17:26:30.443Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/0b/9fcc47d19c48b59121088dd6da2488a49d5f72dacf8262e2790a1d2c7d15/pygments-2.19.1-py3-none-any.whl", hash = "sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c", size = 1225293, upload-time = "2025-01-06T17:26:25.553Z" },
]

[[package]]
name = "pyjwt"
version = "2.10.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/46/bd74733ff231675599650d3e47f361794b22ef3e3770998dda30d3b63726/pyjwt-2.10.1.tar.gz", hash = "sha256:3cc5772eb20009233caf06e9d8a0577824723b44e6648ee0a2aedb6cf9381953", size = 87785, upload-time = "2024-11-28T03:43:29.933Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/61/ad/689f02752eeec26aed679477e80e632ef1b682313be70793d798c1d5fc8f/PyJWT-2.10.1-py3-none-any.whl", hash = "sha256:dcdd193e30abefd5debf142f9adfcdd2b58004e644f25406ffaebd50bd98dacb", size = 22997, upload-time = "2024-11-28T03:43:27.893Z" },
]

[[package]]
name = "pytest"
version = "8.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "iniconfig" },
    { name = "packaging" },
    { name = "pluggy" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fb/aa/405082ce2749be5398045152251ac69c0f3578c7077efc53431303af97ce/pytest-8.4.0.tar.gz", hash = "sha256:14d920b48472ea0dbf68e45b96cd1ffda4705f33307dcc86c676c1b5104838a6", size = 1515232, upload-time = "2025-06-02T17:36:30.03Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2f/de/afa024cbe022b1b318a3d224125aa24939e99b4ff6f22e0ba639a2eaee47/pytest-8.4.0-py3-none-any.whl", hash = "sha256:f40f825768ad76c0977cbacdf1fd37c6f7a468e460ea6a0636078f8972d4517e", size = 363797, upload-time = "2025-06-02T17:36:27.859Z" },
]

[[package]]
name = "sqlalchemy"
version = "2.0.41"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "greenlet", marker = "(python_full_version < '3.14' and platform_machine == 'AMD64') or (python_full_version < '3.14' and platform_machine == 'WIN32') or (python_full_version < '3.14' and platform_machine == 'aarch64') or (python_full_version < '3.14' and platform_machine == 'amd64') or (python_full_version < '3.14' and platform_machine == 'ppc64le') or (python_full_version < '3.14' and platform_machine == 'win32') or (python_full_version < '3.14' and platform_machine == 'x86_64')" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/63/66/45b165c595ec89aa7dcc2c1cd222ab269bc753f1fc7a1e68f8481bd957bf/sqlalchemy-2.0.41.tar.gz", hash = "sha256:edba70118c4be3c2b1f90754d308d0b79c6fe2c0fdc52d8ddf603916f83f4db9", size = 9689424, upload-time = "2025-05-14T17:10:32.339Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3e/2a/f1f4e068b371154740dd10fb81afb5240d5af4aa0087b88d8b308b5429c2/sqlalchemy-2.0.41-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:81f413674d85cfd0dfcd6512e10e0f33c19c21860342a4890c3a2b59479929f9", size = 2119645, upload-time = "2025-05-14T17:55:24.854Z" },
    { url = "https://files.pythonhosted.org/packages/9b/e8/c664a7e73d36fbfc4730f8cf2bf930444ea87270f2825efbe17bf808b998/sqlalchemy-2.0.41-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:598d9ebc1e796431bbd068e41e4de4dc34312b7aa3292571bb3674a0cb415dd1", size = 2107399, upload-time = "2025-05-14T17:55:28.097Z" },
    { url = "https://files.pythonhosted.org/packages/5c/78/8a9cf6c5e7135540cb682128d091d6afa1b9e48bd049b0d691bf54114f70/sqlalchemy-2.0.41-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a104c5694dfd2d864a6f91b0956eb5d5883234119cb40010115fd45a16da5e70", size = 3293269, upload-time = "2025-05-14T17:50:38.227Z" },
    { url = "https://files.pythonhosted.org/packages/3c/35/f74add3978c20de6323fb11cb5162702670cc7a9420033befb43d8d5b7a4/sqlalchemy-2.0.41-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6145afea51ff0af7f2564a05fa95eb46f542919e6523729663a5d285ecb3cf5e", size = 3303364, upload-time = "2025-05-14T17:51:49.829Z" },
    { url = "https://files.pythonhosted.org/packages/6a/d4/c990f37f52c3f7748ebe98883e2a0f7d038108c2c5a82468d1ff3eec50b7/sqlalchemy-2.0.41-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:b46fa6eae1cd1c20e6e6f44e19984d438b6b2d8616d21d783d150df714f44078", size = 3229072, upload-time = "2025-05-14T17:50:39.774Z" },
    { url = "https://files.pythonhosted.org/packages/15/69/cab11fecc7eb64bc561011be2bd03d065b762d87add52a4ca0aca2e12904/sqlalchemy-2.0.41-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:41836fe661cc98abfae476e14ba1906220f92c4e528771a8a3ae6a151242d2ae", size = 3268074, upload-time = "2025-05-14T17:51:51.736Z" },
    { url = "https://files.pythonhosted.org/packages/5c/ca/0c19ec16858585d37767b167fc9602593f98998a68a798450558239fb04a/sqlalchemy-2.0.41-cp312-cp312-win32.whl", hash = "sha256:a8808d5cf866c781150d36a3c8eb3adccfa41a8105d031bf27e92c251e3969d6", size = 2084514, upload-time = "2025-05-14T17:55:49.915Z" },
    { url = "https://files.pythonhosted.org/packages/7f/23/4c2833d78ff3010a4e17f984c734f52b531a8c9060a50429c9d4b0211be6/sqlalchemy-2.0.41-cp312-cp312-win_amd64.whl", hash = "sha256:5b14e97886199c1f52c14629c11d90c11fbb09e9334fa7bb5f6d068d9ced0ce0", size = 2111557, upload-time = "2025-05-14T17:55:51.349Z" },
    { url = "https://files.pythonhosted.org/packages/d3/ad/2e1c6d4f235a97eeef52d0200d8ddda16f6c4dd70ae5ad88c46963440480/sqlalchemy-2.0.41-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:4eeb195cdedaf17aab6b247894ff2734dcead6c08f748e617bfe05bd5a218443", size = 2115491, upload-time = "2025-05-14T17:55:31.177Z" },
    { url = "https://files.pythonhosted.org/packages/cf/8d/be490e5db8400dacc89056f78a52d44b04fbf75e8439569d5b879623a53b/sqlalchemy-2.0.41-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d4ae769b9c1c7757e4ccce94b0641bc203bbdf43ba7a2413ab2523d8d047d8dc", size = 2102827, upload-time = "2025-05-14T17:55:34.921Z" },
    { url = "https://files.pythonhosted.org/packages/a0/72/c97ad430f0b0e78efaf2791342e13ffeafcbb3c06242f01a3bb8fe44f65d/sqlalchemy-2.0.41-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a62448526dd9ed3e3beedc93df9bb6b55a436ed1474db31a2af13b313a70a7e1", size = 3225224, upload-time = "2025-05-14T17:50:41.418Z" },
    { url = "https://files.pythonhosted.org/packages/5e/51/5ba9ea3246ea068630acf35a6ba0d181e99f1af1afd17e159eac7e8bc2b8/sqlalchemy-2.0.41-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:dc56c9788617b8964ad02e8fcfeed4001c1f8ba91a9e1f31483c0dffb207002a", size = 3230045, upload-time = "2025-05-14T17:51:54.722Z" },
    { url = "https://files.pythonhosted.org/packages/78/2f/8c14443b2acea700c62f9b4a8bad9e49fc1b65cfb260edead71fd38e9f19/sqlalchemy-2.0.41-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:c153265408d18de4cc5ded1941dcd8315894572cddd3c58df5d5b5705b3fa28d", size = 3159357, upload-time = "2025-05-14T17:50:43.483Z" },
    { url = "https://files.pythonhosted.org/packages/fc/b2/43eacbf6ccc5276d76cea18cb7c3d73e294d6fb21f9ff8b4eef9b42bbfd5/sqlalchemy-2.0.41-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4f67766965996e63bb46cfbf2ce5355fc32d9dd3b8ad7e536a920ff9ee422e23", size = 3197511, upload-time = "2025-05-14T17:51:57.308Z" },
    { url = "https://files.pythonhosted.org/packages/fa/2e/677c17c5d6a004c3c45334ab1dbe7b7deb834430b282b8a0f75ae220c8eb/sqlalchemy-2.0.41-cp313-cp313-win32.whl", hash = "sha256:bfc9064f6658a3d1cadeaa0ba07570b83ce6801a1314985bf98ec9b95d74e15f", size = 2082420, upload-time = "2025-05-14T17:55:52.69Z" },
    { url = "https://files.pythonhosted.org/packages/e9/61/e8c1b9b6307c57157d328dd8b8348ddc4c47ffdf1279365a13b2b98b8049/sqlalchemy-2.0.41-cp313-cp313-win_amd64.whl", hash = "sha256:82ca366a844eb551daff9d2e6e7a9e5e76d2612c8564f58db6c19a726869c1df", size = 2108329, upload-time = "2025-05-14T17:55:54.495Z" },
    { url = "https://files.pythonhosted.org/packages/1c/fc/9ba22f01b5cdacc8f5ed0d22304718d2c758fce3fd49a5372b886a86f37c/sqlalchemy-2.0.41-py3-none-any.whl", hash = "sha256:57df5dc6fdb5ed1a88a1ed2195fd31927e705cad62dedd86b46972752a80f576", size = 1911224, upload-time = "2025-05-14T17:39:42.154Z" },
]

[[package]]
name = "stack-data"
version = "0.6.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "asttokens" },
    { name = "executing" },
    { name = "pure-eval" },
]
sdist = { url = "https://files.pythonhosted.org/packages/28/e3/55dcc2cfbc3ca9c29519eb6884dd1415ecb53b0e934862d3559ddcb7e20b/stack_data-0.6.3.tar.gz", hash = "sha256:836a778de4fec4dcd1dcd89ed8abff8a221f58308462e1c4aa2a3cf30148f0b9", size = 44707, upload-time = "2023-09-30T13:58:05.479Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f1/7b/ce1eafaf1a76852e2ec9b22edecf1daa58175c090266e9f6c64afcd81d91/stack_data-0.6.3-py3-none-any.whl", hash = "sha256:d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695", size = 24521, upload-time = "2023-09-30T13:58:03.53Z" },
]

[[package]]
name = "traitlets"
version = "5.14.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/eb/79/72064e6a701c2183016abbbfedaba506d81e30e232a68c9f0d6f6fcd1574/traitlets-5.14.3.tar.gz", hash = "sha256:9ed0579d3502c94b4b3732ac120375cda96f923114522847de4b3bb98b96b6b7", size = 161621, upload-time = "2024-04-19T11:11:49.746Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/00/c0/8f5d070730d7836adc9c9b6408dec68c6ced86b304a9b26a14df072a6e8c/traitlets-5.14.3-py3-none-any.whl", hash = "sha256:b74e89e397b1ed28cc831db7aea759ba6640cb3de13090ca145426688ff1ac4f", size = 85359, upload-time = "2024-04-19T11:11:46.763Z" },
]

[[package]]
name = "typing-extensions"
version = "4.14.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d1/bc/51647cd02527e87d05cb083ccc402f93e441606ff1f01739a62c8ad09ba5/typing_extensions-4.14.0.tar.gz", hash = "sha256:8676b788e32f02ab42d9e7c61324048ae4c6d844a399eebace3d4979d75ceef4", size = 107423, upload-time = "2025-06-02T14:52:11.399Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/69/e0/552843e0d356fbb5256d21449fa957fa4eff3bbc135a74a691ee70c7c5da/typing_extensions-4.14.0-py3-none-any.whl", hash = "sha256:a1514509136dd0b477638fc68d6a91497af5076466ad0fa6c338e44e359944af", size = 43839, upload-time = "2025-06-02T14:52:10.026Z" },
]

[[package]]
name = "wcwidth"
version = "0.2.13"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6c/63/53559446a878410fc5a5974feb13d31d78d752eb18aeba59c7fef1af7598/wcwidth-0.2.13.tar.gz", hash = "sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5", size = 101301, upload-time = "2024-01-06T02:10:57.829Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fd/84/fd2ba7aafacbad3c4201d395674fc6348826569da3c0937e75505ead3528/wcwidth-0.2.13-py2.py3-none-any.whl", hash = "sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859", size = 34166, upload-time = "2024-01-06T02:10:55.763Z" },
]

[[package]]
name = "werkzeug"
version = "3.1.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markupsafe" },
]
sdist = { url = "https://files.pythonhosted.org/packages/9f/69/83029f1f6300c5fb2471d621ab06f6ec6b3324685a2ce0f9777fd4a8b71e/werkzeug-3.1.3.tar.gz", hash = "sha256:60723ce945c19328679790e3282cc758aa4a6040e4bb330f53d30fa546d44746", size = 806925, upload-time = "2024-11-08T15:52:18.093Z" }
wheels = [
    { url = "https://files.pythonhosted.org/packages/52/24/ab44c871b0f07f491e5d2ad12c9bd7358e527510618cb1b803a88e986db1/werkzeug-3.1.3-py3-none-any.whl", hash = "sha256:54b78bf3716d19a65be4fceccc0d1d7b89e608834989dfae50ea87564639213e", size = 224498, upload-time = "2024-11-08T15:52:16.132Z" },
]


#########################################################
# 文件路径: ./backend/__init__.py


#########################################################
# 文件路径: ./backend/tests/conftest.py
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import pytest
from server import app, db
@pytest.fixture
def client():
    app.config['TESTING'] = True
    app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///:memory:"
    with app.app_context():
        db.drop_all()
        db.create_all()
    with app.test_client() as client:
        yield client

#########################################################
# 文件路径: ./backend/tests/test_unit.py
import pytest
from flask_jwt_extended import create_access_token
from server import app, db, DriverPosting, User
from datetime import datetime, timedelta


def generate_token(user_id):
    with app.app_context():
        return create_access_token(identity=user_id)

def generate_token_by_tel_via_login(client, tel='19999999999'):
    res = client.post('/login', json={'Tel': tel, 'password': 'abc123'})
    assert res.status_code == 200
    return res.get_json()['token']

def register_user(client, tel='19999999999', is_driver=True):
    res = client.post('/register', json={
        'name': 'TestUser',
        'tel': tel.lower(),
        'password': 'abc123',
        'confirmPassword': 'abc123',
        'isDriver': is_driver
    })
    # Ensure user is committed to DB for immediate queries
    with app.app_context():
        db.session.commit()
    return res

def test_register_success(client):
    res = register_user(client)
    assert res.status_code == 201

def test_register_duplicate(client):
    register_user(client)
    res = register_user(client)
    assert res.status_code == 400

def test_register_missing_fields(client):
    res = client.post('/register', json={
        'tel': '19999999999',
        'password': 'abc123',
        'confirmPassword': 'abc123',
        'isDriver': True
    })
    assert res.status_code == 400

def test_login_success(client):
    register_user(client)
    res = client.post('/login', json={'Tel': '19999999999', 'password': 'abc123'})
    assert res.status_code == 200
    assert 'token' in res.get_json()

def test_login_wrong_password(client):
    register_user(client)
    res = client.post('/login', json={'Tel': '19999999999', 'password': 'wrong'})
    assert res.status_code == 401

def test_login_missing_fields(client):
    register_user(client)
    res = client.post('/login', json={'Tel': '19999999999'})
    assert res.status_code == 400

def test_userinfo(client):
    register_user(client)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.get('/userinfo', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200

def test_userinfo_not_found(client):
    with app.app_context():
        token = create_access_token(identity=str(999999))  # 转为字符串
    res = client.get('/userinfo', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    print("Status code:", res.status_code)
    print("JSON response:", res.get_json())
    assert res.status_code == 404

def test_register_driver(client):
    register_user(client, is_driver=False)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.post('/register_driver', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200

def test_register_driver_twice(client):
    register_user(client, is_driver=False)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res1 = client.post('/register_driver', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res1.status_code == 200
    res2 = client.post('/register_driver', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res2.status_code == 400

def test_unregister_driver(client):
    register_user(client, is_driver=True)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.post('/unregister_driver', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200

def test_unregister_driver_not_driver(client):
    register_user(client, is_driver=False)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.post('/unregister_driver', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 400

def test_post_driver_posting_success(client):
    # 先注册非司机用户
    register_user(client, is_driver=False)
    token = generate_token_by_tel_via_login(client, '19999999999')

    # 申请成为司机
    res = client.post('/register_driver', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200

    # 司机身份确认后发布行程
    res = client.post('/post_driver_posting', json={
        "From": "A", "To": "B",
        "FromLat": 30.0, "FromLng": 120.0,
        "ToLat": 30.1, "ToLng": 120.1,
        "DepartureTime": (datetime.now() + timedelta(days=1)).isoformat(),
        "SeatsAvailable": 3,
        "Fare": 50.0,
        "PlateNumber": "沪A12345"
    }, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 201

def test_post_driver_posting_missing_fields(client):
    register_user(client, is_driver=True)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.post('/post_driver_posting', json={
        "From": "A"  # 缺失大量字段
    }, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 400

def test_post_driver_posting_invalid_time(client):
    register_user(client, is_driver=True)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.post('/post_driver_posting', json={
        "From": "A", "To": "B",
        "FromLat": 30.0, "FromLng": 120.0,
        "ToLat": 30.1, "ToLng": 120.1,
        "DepartureTime": "invalid-datetime-format",
        "SeatsAvailable": 3,
        "Fare": 50.0,
        "PlateNumber": "沪A12345"
    }, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 400

def test_get_driver_postings(client):
    test_post_driver_posting_success(client)
    token = generate_token_by_tel_via_login(client, '19999999999')
    res = client.get('/get_driver_postings', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200
    assert isinstance(res.get_json(), list)

def test_get_driver_postings_with_coords(client):
    test_post_driver_posting_success(client)
    token = generate_token_by_tel_via_login(client, '19999999999')
    # Provide coordinate filters
    res = client.get('/get_driver_postings?from_lat=29.9&from_lng=119.9&to_lat=30.2&to_lng=120.2', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200
    assert isinstance(res.get_json(), list)

def test_join_trip(client):
    test_post_driver_posting_success(client)
    register_user(client, tel='19999999998', is_driver=False)
    token = generate_token_by_tel_via_login(client, '19999999998')
    res = client.post('/join_trip', json={"PostingID": 1}, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 201

def test_join_full_trip(client):
    test_post_driver_posting_success(client)
    # Register three distinct users to fill up the trip (SeatsAvailable = 3)
    user_tels = ['19999999998', '19999999997', '19999999996']
    tokens = []
    for tel in user_tels:
        register_user(client, tel=tel, is_driver=False)
        tokens.append(generate_token_by_tel_via_login(client, tel))
    # Each user joins the trip. All should succeed (201).
    for token in tokens:
        res = client.post('/join_trip', json={"PostingID": 1}, headers={
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        })
        assert res.status_code == 201

    # A fourth distinct user tries to join full trip, should fail (400)
    register_user(client, tel='19999999995', is_driver=False)
    token4 = generate_token_by_tel_via_login(client, '19999999995')
    res = client.post('/join_trip', json={"PostingID": 1}, headers={
        'Authorization': f'Bearer {token4}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 400

def test_join_trip_twice(client):
    test_join_trip(client)
    token = generate_token_by_tel_via_login(client, '19999999998')
    res = client.post('/join_trip', json={"PostingID": 1}, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 400

def test_my_trip(client):
    test_join_trip(client)
    token = generate_token_by_tel_via_login(client, '19999999998')
    res = client.get('/my_trip', headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200
    assert isinstance(res.get_json(), list)

def test_cancel_trip(client):
    test_join_trip(client)
    token = generate_token_by_tel_via_login(client, '19999999998')
    res = client.post('/cancel_trip', json={"PostingID": 1}, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 200

def test_cancel_trip_not_joined(client):
    test_post_driver_posting_success(client)
    register_user(client, tel='19999999998', is_driver=False)
    token = generate_token_by_tel_via_login(client, '19999999998')
    res = client.post('/cancel_trip', json={"PostingID": 1}, headers={
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    })
    assert res.status_code == 404

#########################################################
# 文件路径: ./frontend/.cz-config.js
module.exports = {
  types: [
    { value: 'feat', name: '✨ feat:     新功能' },
    { value: 'fix', name: '🐛 fix:      修复' },
    { value: 'init', name: '🎉 Init:     初始化' },
    { value: 'docs', name: '📝 docs:     文档变更' },
    { value: 'style', name: '💄 style:    代码格式(不影响代码运行的变动)' },
    {
      value: 'refactor',
      name: '♻️  refactor: 重构(既不是增加feature，也不是修复bug)',
    },
    { value: 'perf', name: '⚡️ perf:     性能优化' },
    { value: 'test', name: '✅ test:     增加测试' },
    { value: 'revert', name: '⏪️ Revert:   回退' },
    { value: 'build', name: '🚀‍ build:    构建过程或辅助工具的变动' },
    { value: 'ci', name: '👷 ci:       CI 配置' },
  ],
  // 消息步骤
  messages: {
    type: '请选择提交类型:',
    subject: '请简要描述提交(必填):',
    customScope: '请输入修改范围(可选):',
    body: '请输入详细描述(可选):',
    breaking: '列出任何BREAKING CHANGES(可选)',
    footer: '请输入要关闭的issue(可选):',
    confirmCommit: '确认使用以上信息提交吗?',
  },
  allowBreakingChanges: ['feat', 'fix'],
  skipQuestions: ['customScope'],
  subjectLimit: 72,
}

#########################################################
# 文件路径: ./frontend/.eslintrc-auto-import.json
{
  "globals": {
    "Component": true,
    "ComponentPublicInstance": true,
    "ComputedRef": true,
    "EffectScope": true,
    "ExtractDefaultPropTypes": true,
    "ExtractPropTypes": true,
    "ExtractPublicPropTypes": true,
    "InjectionKey": true,
    "PropType": true,
    "Ref": true,
    "VNode": true,
    "WritableComputedRef": true,
    "acceptHMRUpdate": true,
    "computed": true,
    "createApp": true,
    "createPinia": true,
    "customRef": true,
    "defineAsyncComponent": true,
    "defineComponent": true,
    "defineStore": true,
    "effectScope": true,
    "getActivePinia": true,
    "getCurrentInstance": true,
    "getCurrentScope": true,
    "h": true,
    "inject": true,
    "isProxy": true,
    "isReactive": true,
    "isReadonly": true,
    "isRef": true,
    "mapActions": true,
    "mapGetters": true,
    "mapState": true,
    "mapStores": true,
    "mapWritableState": true,
    "markRaw": true,
    "nextTick": true,
    "onActivated": true,
    "onAddToFavorites": true,
    "onBackPress": true,
    "onBeforeMount": true,
    "onBeforeUnmount": true,
    "onBeforeUpdate": true,
    "onDeactivated": true,
    "onError": true,
    "onErrorCaptured": true,
    "onHide": true,
    "onLaunch": true,
    "onLoad": true,
    "onMounted": true,
    "onNavigationBarButtonTap": true,
    "onNavigationBarSearchInputChanged": true,
    "onNavigationBarSearchInputClicked": true,
    "onNavigationBarSearchInputConfirmed": true,
    "onNavigationBarSearchInputFocusChanged": true,
    "onPageNotFound": true,
    "onPageScroll": true,
    "onPullDownRefresh": true,
    "onReachBottom": true,
    "onReady": true,
    "onRenderTracked": true,
    "onRenderTriggered": true,
    "onResize": true,
    "onScopeDispose": true,
    "onServerPrefetch": true,
    "onShareAppMessage": true,
    "onShareTimeline": true,
    "onShow": true,
    "onTabItemTap": true,
    "onThemeChange": true,
    "onUnhandledRejection": true,
    "onUnload": true,
    "onUnmounted": true,
    "onUpdated": true,
    "provide": true,
    "reactive": true,
    "readonly": true,
    "ref": true,
    "resolveComponent": true,
    "setActivePinia": true,
    "setMapStoreSuffix": true,
    "shallowReactive": true,
    "shallowReadonly": true,
    "shallowRef": true,
    "storeToRefs": true,
    "toRaw": true,
    "toRef": true,
    "toRefs": true,
    "toValue": true,
    "triggerRef": true,
    "unref": true,
    "useAttrs": true,
    "useCssModule": true,
    "useCssVars": true,
    "useRequest": true,
    "useSlots": true,
    "watch": true,
    "watchEffect": true,
    "watchPostEffect": true,
    "watchSyncEffect": true,
    "onWatcherCleanup": true,
    "useId": true,
    "useModel": true,
    "useTemplateRef": true,
    "DirectiveBinding": true,
    "MaybeRef": true,
    "MaybeRefOrGetter": true
  }
}


#########################################################
# 文件路径: ./frontend/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <script>
      var coverSupport = 'CSS' in window && typeof CSS.supports === 'function' && (CSS.supports('top: env(a)') ||
        CSS.supports('top: constant(a)'))
      document.write(
        '<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0' +
        (coverSupport ? ', viewport-fit=cover' : '') + '" />')
    </script>
    <title></title>
    <!--preload-links-->
    <!--app-context-->
  </head>
  <body>
    <div id="app"><!--app-html--></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>


#########################################################
# 文件路径: ./frontend/manifest.config.js
// manifest.config.js
import { defineManifestConfig } from '@uni-helper/vite-plugin-uni-manifest'
import path from 'node:path'
import { loadEnv } from 'vite'

// 获取环境变量的范例
const env = loadEnv(process.env.NODE_ENV, path.resolve(process.cwd()))
const { VITE_APP_TITLE, VITE_UNI_APPID, VITE_WX_APPID, VITE_APP_PUBLIC_BASE } = env

export default defineManifestConfig({
  name: VITE_APP_TITLE,
  appid: VITE_UNI_APPID,
  description: '',
  versionName: '1.0.0',
  versionCode: '100',
  transformPx: false,
  locale: 'zh-Hans',
  h5: {
    router: {
      base: VITE_APP_PUBLIC_BASE
    }
  },
  /* 5+App特有相关 */
  'app-plus': {
    usingComponents: true,
    nvueStyleCompiler: 'uni-app',
    compilerVersion: 3,
    compatible: {
      ignoreVersion: true
    },
    splashscreen: {
      alwaysShowBeforeRender: true,
      waiting: true,
      autoclose: true,
      delay: 0
    },
    /* 模块配置 */
    modules: {},
    /* 应用发布信息 */
    distribute: {
      /* android打包配置 */
      android: {
        minSdkVersion: 30,
        targetSdkVersion: 30,
        abiFilters: ['armeabi-v7a', 'arm64-v8a'],
        permissions: [
          '<uses-permission android:name="android.permission.CHANGE_NETWORK_STATE"/>',
          '<uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>',
          '<uses-permission android:name="android.permission.VIBRATE"/>',
          '<uses-permission android:name="android.permission.READ_LOGS"/>',
          '<uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>',
          '<uses-feature android:name="android.hardware.camera.autofocus"/>',
          '<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>',
          '<uses-permission android:name="android.permission.CAMERA"/>',
          '<uses-permission android:name="android.permission.GET_ACCOUNTS"/>',
          '<uses-permission android:name="android.permission.READ_PHONE_STATE"/>',
          '<uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/>',
          '<uses-permission android:name="android.permission.WAKE_LOCK"/>',
          '<uses-permission android:name="android.permission.FLASHLIGHT"/>',
          '<uses-feature android:name="android.hardware.camera"/>',
          '<uses-permission android:name="android.permission.WRITE_SETTINGS"/>'
        ]
      },
      /* ios打包配置 */
      ios: {},
      /* SDK配置 */
      sdkConfigs: {}
    }
  },
  /* 快应用特有相关 */
  quickapp: {},
  /* 小程序特有相关 */
  'mp-weixin': {
    appid: VITE_WX_APPID,
    setting: {
      urlCheck: false
    },
    usingComponents: true
    // __usePrivacyCheck__: true,
  },
  'mp-alipay': {
    usingComponents: true,
    styleIsolation: 'shared'
  },
  'mp-baidu': {
    usingComponents: true
  },
  'mp-toutiao': {
    usingComponents: true
  },
  uniStatistics: {
    enable: false
  },
  vueVersion: '3'
})


#########################################################
# 文件路径: ./frontend/package.json
{
  "name": "uni-preset-vue",
  "type": "commonjs",
  "version": "0.0.0",
  "scripts": {
    "dev:app": "uni -p app",
    "dev:app-android": "uni -p app-android",
    "dev:app-ios": "uni -p app-ios",
    "dev:custom": "uni -p",
    "dev:h5": "uni",
    "dev:h5:ssr": "uni --ssr",
    "dev:mp-alipay": "uni -p mp-alipay",
    "dev:mp-baidu": "uni -p mp-baidu",
    "dev:mp-jd": "uni -p mp-jd",
    "dev:mp-kuaishou": "uni -p mp-kuaishou",
    "dev:mp-lark": "uni -p mp-lark",
    "dev:mp-qq": "uni -p mp-qq",
    "dev:mp-toutiao": "uni -p mp-toutiao",
    "dev:mp-weixin": "uni -p mp-weixin",
    "dev:mp-xhs": "uni -p mp-xhs",
    "dev:quickapp-webview": "uni -p quickapp-webview",
    "dev:quickapp-webview-huawei": "uni -p quickapp-webview-huawei",
    "dev:quickapp-webview-union": "uni -p quickapp-webview-union",
    "build:app": "uni build -p app",
    "build:app-android": "uni build -p app-android",
    "build:app-ios": "uni build -p app-ios",
    "build:custom": "uni build -p",
    "build:h5": "uni build",
    "build:h5:ssr": "uni build --ssr",
    "build:mp-alipay": "uni build -p mp-alipay",
    "build:mp-baidu": "uni build -p mp-baidu",
    "build:mp-jd": "uni build -p mp-jd",
    "build:mp-kuaishou": "uni build -p mp-kuaishou",
    "build:mp-lark": "uni build -p mp-lark",
    "build:mp-qq": "uni build -p mp-qq",
    "build:mp-toutiao": "uni build -p mp-toutiao",
    "build:mp-weixin": "uni build -p mp-weixin",
    "build:mp-xhs": "uni build -p mp-xhs",
    "build:quickapp-webview": "uni build -p quickapp-webview",
    "build:quickapp-webview-huawei": "uni build -p quickapp-webview-huawei",
    "build:quickapp-webview-union": "uni build -p quickapp-webview-union",
    "prepare": "husky",
    "cz": "git-cz",
    "preinstall": "npx only-allow pnpm"
  },
  "dependencies": {
    "@climblee/uv-ui": "^1.1.20",
    "@dcloudio/uni-app": "3.0.0-4060420250429001",
    "@dcloudio/uni-app-harmony": "3.0.0-4060420250429001",
    "@dcloudio/uni-app-plus": "3.0.0-4060420250429001",
    "@dcloudio/uni-components": "3.0.0-4060420250429001",
    "@dcloudio/uni-h5": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-alipay": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-baidu": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-harmony": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-jd": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-kuaishou": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-lark": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-qq": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-toutiao": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-weixin": "3.0.0-4060420250429001",
    "@dcloudio/uni-mp-xhs": "3.0.0-4060420250429001",
    "@dcloudio/uni-quickapp-webview": "3.0.0-4060420250429001",
    "@uni-helper/axios-adapter": "^1.5.2",
    "@uni-helper/unocss-preset-uni": "^0.2.8",
    "axios": "^1.6.8",
    "nutui-uniapp": "^1.8.0",
    "pinia": "2.0.32",
    "pinia-plugin-persistedstate": "^3.2.1",
    "uni-preset-vue": "link:",
    "vue": "3.5.13",
    "vue-i18n": "^9.14.4"
  },
  "devDependencies": {
    "@babel/core": "^7.24.7",
    "@babel/eslint-parser": "^7.24.7",
    "@commitlint/cli": "^19.3.0",
    "@commitlint/config-conventional": "^19.2.2",
    "@dcloudio/types": "^3.4.15",
    "@dcloudio/uni-automator": "3.0.0-4060420250429001",
    "@dcloudio/uni-cli-shared": "3.0.0-4060420250429001",
    "@dcloudio/uni-stacktracey": "3.0.0-4060420250429001",
    "@dcloudio/vite-plugin-uni": "3.0.0-4060420250429001",
    "@iconify-json/ep": "^1.1.15",
    "@uni-helper/vite-plugin-uni-components": "^0.1.0",
    "@uni-helper/vite-plugin-uni-layouts": "^0.1.10",
    "@uni-helper/vite-plugin-uni-manifest": "^0.2.6",
    "@unocss/preset-legacy-compat": "^0.59.4",
    "@unocss/preset-uno": "^0.59.4",
    "@vue/runtime-core": "^3.5.13",
    "commitizen": "^4.3.0",
    "commitlint": "^19.3.0",
    "cz-customizable": "^7.0.0",
    "eslint": "^8.57.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-vue": "^9.23.0",
    "husky": "^6.0.0",
    "lint-staged": "^15.2.2",
    "mockjs": "^1.1.0",
    "sass": "^1.77.8",
    "sass-loader": "^14.2.1",
    "standard": "^17.1.0",
    "stylelint": "^16.3.1",
    "stylelint-config-prettier": "^9.0.5",
    "stylelint-config-standard-scss": "^13.1.0",
    "stylelint-scss": "^6.2.1",
    "unocss": "^0.58.9",
    "unocss-applet": "^0.7.8",
    "unplugin-auto-import": "^0.17.5",
    "vite": "5.2.8",
    "vue-global-api": "^0.4.1"
  },
  "lint-staged": {
    "src/**/*.{js,jsx,ts,tsx}": [
      "prettier --write",
      "eslint --fix"
    ]
  },
  "config": {
    "commitizen": {
      "path": "node_modules/cz-customizable"
    }
  },
  "packageManager": "pnpm@10.1.0+sha1.ab7948c89104fdd3fc88b5b391fa4b73fd800631"
}


#########################################################
# 文件路径: ./frontend/README.md
# UniApp、Vite、Vue3、Pinia、Unocss 小程序、H5 项目模板

入门简单、开发简单、接近原生，适用于了解或不熟悉uniapp的开发人员去快速使用uniapp开发小程序、h5

## 特色

- ⚡️[uni-app](https://github.com/dcloudio/uni-app), [Vue 3](https://github.com/vuejs/core), [Vite](https://github.com/vitejs/vite), [pnpm](https://pnpm.io/)

- 📦 [组件自动化引入](https://github.com/antfu/unplugin-vue-components)

- 🍍 [使用 Pinia 的状态管理](https://pinia.vuejs.org)

- 🎨 [UnoCSS](https://github.com/unocss/unocss) - 高性能且极具灵活性的即时原子化 CSS 引擎

- 😃 [各种图标集为你所用](https://icon-sets.iconify.design/)

- 🔥 使用 [新的 `<script setup>` 语法](https://github.com/vuejs/rfcs/pull/227)

- 📥 [API 自动加载](https://github.com/antfu/unplugin-auto-import) - 直接使用 Composition API 无需引入

- 🌍 [API 采用模块化自动导入方式](https://blog.csdn.net/qq_43775179/article/details/134811292) 根据demo.js文件设置接口，以API_xxx_method的方式命名，在请求时无需导入 直接使用useRequest()函数返回参数以解构的方式获取，拿到即为写入的接口

## 🍭 安装使用

🍙 获取项目代码

```bash
git clone https://github.com/gitboyzcf/uni-preset-vue3-vite.git
```

🌈 安装依赖

```bash
pnpm install
```

🐥 运行

```bash
pnpm dev:mp-weixin
```

🍁 打包

```bash
pnpm build:mp-weixin
```

🍄 Git 提交

```bash
pnpm cz
```

## 🍣 Git 规范

参考 [vue](https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md) 规范 ([Angular](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular))

- `✨ feat` 增加新功能
- `🐛 fix` 修复问题/BUG
- `🎉 init` 初始化
- `📝 docs` 文档变更
- `💄 style` 代码格式(不影响代码运行的变动)
- `♻️ refactor` 重构(既不是增加feature，也不是修复bug)
- `⚡️ perf` 性能优化
- `✅ test` 增加测试
- `⏪️ revert` 回退
- `🚀‍ build` 构建过程或辅助工具的变动
- `👷 ci` CI 配置

## 🌯 Git 提交流程

```bash
git add .

pnpm run cz
```

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=gitboyzcf/uni-preset-vue3-vite&type=Timeline)](https://star-history.com/#gitboyzcf/uni-preset-vue3-vite&Timeline)


#########################################################
# 文件路径: ./frontend/unocss.config.js
// uno.config.js
import {
  Preset,
  defineConfig,
  presetAttributify,
  presetIcons,
  transformerDirectives,
  transformerVariantGroup
} from 'unocss'

import {
  presetApplet,
  presetRemRpx,
  transformerApplet,
  transformerAttributify
} from 'unocss-applet'

import { presetUni } from '@uni-helper/unocss-preset-uni'

// @see https://unocss.dev/presets/legacy-compat
import presetLegacyCompat from '@unocss/preset-legacy-compat'

const isH5 = process.env?.UNI_PLATFORM === 'h5'
const isMp = process.env?.UNI_PLATFORM?.startsWith('mp') ?? false

const presets = []
if (!isMp) {
  /**
   * you can add `presetAttributify()` here to enable unocss attributify mode prompt
   * although preset is not working for applet, but will generate useless css
   * 为了不生产无用的css,要过滤掉 applet
   */
  // 支持css class属性化，eg: `<button bg="blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600" text="sm white">attributify Button</button>`
  presets.push(presetAttributify())
}
if (!isH5) {
  presets.push(presetRemRpx())
}
export default defineConfig({
  presets: [
    presetApplet({ enable: !isH5 }),
    ...presets,
    // 支持图标，需要搭配图标库，eg: @iconify-json/carbon, 使用 `<button class="i-carbon-sun dark:i-carbon-moon" />`
    presetIcons({
      scale: 1.2,
      warn: true,
      extraProperties: {
        display: 'inline-block',
        'vertical-align': 'middle'
      }
    }),
    // 将颜色函数 (rgb()和hsl()) 从空格分隔转换为逗号分隔，更好的兼容性app端，example：
    // `rgb(255 0 0)` -> `rgb(255, 0, 0)`
    // `rgba(255 0 0 / 0.5)` -> `rgba(255, 0, 0, 0.5)`
    presetLegacyCompat({
      commaStyleColorFunction: true
    }),
    presetUni() // 解决 Windows 用户？告别烦人的崩溃
  ],
  /**
   * 自定义快捷语句
   * @see https://github.com/unocss/unocss#shortcuts
   */
  shortcuts: [['center', 'flex justify-center items-center']],
  transformers: [
    // 启用 @apply 功能
    transformerDirectives(),
    // 启用 () 分组功能
    // 支持css class组合，eg: `<div class="hover:(bg-gray-400 font-medium) font-(light mono)">测试 unocss</div>`
    transformerVariantGroup(),
    // Don't change the following order
    transformerAttributify({
      // 解决与第三方框架样式冲突问题
      prefixedOnly: true,
      prefix: 'fg'
    }),
    transformerApplet()
  ],
  rules: [
    [
      'p-safe',
      {
        padding:
          'env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left)'
      }
    ],
    ['pt-safe', { 'padding-top': 'env(safe-area-inset-top)' }],
    ['pb-safe', { 'padding-bottom': 'env(safe-area-inset-bottom)' }]
  ]
})


#########################################################
# 文件路径: ./frontend/vite.config.js
import { defineConfig, loadEnv } from 'vite'
import path from 'node:path'
import uni from '@dcloudio/vite-plugin-uni'
import AutoImport from 'unplugin-auto-import/vite'
import UnoCSS from 'unocss/vite'
// https://github.com/uni-helper
import UniManifest from '@uni-helper/vite-plugin-uni-manifest'
import UniLayouts from '@uni-helper/vite-plugin-uni-layouts'
import UniComponents from '@uni-helper/vite-plugin-uni-components'
import { NutResolver } from 'nutui-uniapp'

// https://vitejs.dev/config/
export default ({ command, mode }) => {
  const env = loadEnv(mode, path.resolve(process.cwd()))
  const { VITE_APP_API_BASEURL, VITE_APP_PROXY, VITE_APP_PROXY_PREFIX } = env
  return defineConfig({
    build: {
      watch: {
        exclude: ['node_modules/**', '/__uno.css']
      }
    },
    resolve: {
      alias: {
        '@': path.join(process.cwd(), './src'),
        '@img': path.join(process.cwd(), './src/static/images')
      }
    },
    plugins: [
      UniComponents({
        dts: false,
        resolvers: [NutResolver()]
      }),
      UniLayouts(),
      UniManifest(),
      uni(),
      AutoImport({
        dts: false,
        imports: [
          'vue',
          'uni-app',
          'pinia',
          {
            '@/api': ['useRequest']
          }
        ],
        eslintrc: { enabled: true }
      }),
      UnoCSS()
    ],
    server: {
      host: '0.0.0.0',
      hmr: true,
      // 仅 H5 端生效，其他端不生效（其他端走build，不走devServer)
      proxy: JSON.parse(VITE_APP_PROXY)
        ? {
            [VITE_APP_PROXY_PREFIX]: {
              target: VITE_APP_API_BASEURL,
              changeOrigin: true,
              rewrite: (path) => path.replace(new RegExp(`^${VITE_APP_PROXY_PREFIX}`), '')
            }
          }
        : undefined
    },
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: `@import "nutui-uniapp/styles/variables.scss";`,
          api: 'modern-compiler',
          //忽略警告提示
          silenceDeprecations: ['legacy-js-api', 'import']
        }
      }
    }
  })
}


#########################################################
# 文件路径: ./frontend/src/App.vue
<script>
  export default {
    onLaunch: function () {
      console.log('App Launch')
       if (uni.hideTabBar) {
    uni.hideTabBar()
    console.log('Default Tab bar hidden')
  }
      
    },
    onShow: function () {
      console.log('App Show')
    },
    onHide: function () {
      console.log('App Hide')
    },
  }
</script>

<style lang="scss">
  /*每个页面公共css */
  @import 'nutui-uniapp/styles/index.scss';
  page,
  html,
  body {
    height: 100%;
  }
</style>


#########################################################
# 文件路径: ./frontend/src/main.js
import { createSSRApp } from 'vue'
import App from './App.vue'
import { setupStore } from './store'
import 'virtual:uno.css'
export function createApp() {
  const app = createSSRApp(App)
  setupStore(app)
  return {
    app
  }
}


#########################################################
# 文件路径: ./frontend/src/manifest.json
{
  "name": "Tongji Together",
  "appid": "",
  "description": "",
  "versionName": "1.0.0",
  "versionCode": "100",
  "transformPx": false,
  "app-plus": {
    "usingComponents": true,
    "nvueStyleCompiler": "uni-app",
    "compilerVersion": 3,
    "splashscreen": {
      "alwaysShowBeforeRender": true,
      "waiting": true,
      "autoclose": true,
      "delay": 0
    },
    "modules": {},
    "distribute": {
      "android": {
        "permissions": [
          "<uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\"/>",
          "<uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"/>",
          "<uses-permission android:name=\"android.permission.VIBRATE\"/>",
          "<uses-permission android:name=\"android.permission.READ_LOGS\"/>",
          "<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>",
          "<uses-feature android:name=\"android.hardware.camera.autofocus\"/>",
          "<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>",
          "<uses-permission android:name=\"android.permission.CAMERA\"/>",
          "<uses-permission android:name=\"android.permission.GET_ACCOUNTS\"/>",
          "<uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>",
          "<uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"/>",
          "<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>",
          "<uses-permission android:name=\"android.permission.FLASHLIGHT\"/>",
          "<uses-feature android:name=\"android.hardware.camera\"/>",
          "<uses-permission android:name=\"android.permission.WRITE_SETTINGS\"/>"
        ],
        "minSdkVersion": 30,
        "targetSdkVersion": 30,
        "abiFilters": [
          "armeabi-v7a",
          "arm64-v8a"
        ]
      },
      "ios": {},
      "sdkConfigs": {}
    },
    "compatible": {
      "ignoreVersion": true
    }
  },
  "quickapp": {},
  "mp-weixin": {
    "appid": "wx25aa1b575c961f7c",
    "setting": {
      "urlCheck": false
    },
    "usingComponents": true
  },
  "mp-alipay": {
    "usingComponents": true,
    "styleIsolation": "shared"
  },
  "mp-baidu": {
    "usingComponents": true
  },
  "mp-toutiao": {
    "usingComponents": true
  },
  "uniStatistics": {
    "enable": false
  },
  "vueVersion": "3",
  "locale": "zh-Hans",
  "h5": {
    "router": {
      "base": "http://100.79.13.171:3001"
    }
  }
}

#########################################################
# 文件路径: ./frontend/src/pages.json
{
  "easycom": {
    "autoscan": true,
    "custom": {
      "^nut-(.*)?-(.*)": "nutui-uniapp/components/$1$2/$1$2.vue",
      "^nut-(.*)": "nutui-uniapp/components/$1/$1.vue"
    }
  },
  "pages": [
    {
      "path": "pages/index/index",
      "type": "home",
      "layout": "defaultbar",
      "style": {
        "navigationBarTitleText": "首页"
      }
    },
    {
      "path": "pages/user/user",
      "type": "page",
      "layout": "defaultbar",
      "style": {
        "navigationBarTitleText": "用户"
      }
    },
    {
    "path": "pages/user/login",
    "type": "page",
    "layout": "default",
    "style": {
      "navigationBarTitleText": "登录"
    }
    }
  ],

  "tabBar": {
  "list": [
    {
      "pagePath": "pages/index/index",
      "text": "首页"
    },
     {
      "pagePath": "pages/user/user",
      "text": "我的"
    }
  ]
}

}


#########################################################
# 文件路径: ./frontend/src/uni.scss
/**
 * 这里是uni-app内置的常用样式变量
 *
 * uni-app 官方扩展插件及插件市场（https://ext.dcloud.net.cn）上很多三方插件均使用了这些样式变量
 * 如果你是插件开发者，建议你使用scss预处理，并在插件代码中直接使用这些变量（无需 import 这个文件），方便用户通过搭积木的方式开发整体风格一致的App
 *
 */

/**
 * 如果你是App开发者（插件使用者），你可以通过修改这些变量来定制自己的插件主题，实现自定义主题功能
 *
 * 如果你的项目同样使用了scss预处理，你也可以直接在你的 scss 代码中使用如下变量，同时无需 import 这个文件
 */

/* 颜色变量 */

/* 行为相关颜色 */
$uni-color-primary: #007aff;
$uni-color-success: #4cd964;
$uni-color-warning: #f0ad4e;
$uni-color-error: #dd524d;

/* 文字基本颜色 */
$uni-text-color: #333; // 基本色
$uni-text-color-inverse: #fff; // 反色
$uni-text-color-grey: #999; // 辅助灰色，如加载更多的提示信息
$uni-text-color-placeholder: #808080;
$uni-text-color-disable: #c0c0c0;

/* 背景颜色 */
$uni-bg-color: #fff;
$uni-bg-color-grey: #f8f8f8;
$uni-bg-color-hover: #f1f1f1; // 点击状态颜色
$uni-bg-color-mask: rgba(0, 0, 0, 0.4); // 遮罩颜色

/* 边框颜色 */
$uni-border-color: #c8c7cc;

/* 尺寸变量 */

/* 文字尺寸 */
$uni-font-size-sm: 12px;
$uni-font-size-base: 14px;
$uni-font-size-lg: 16;

/* 图片尺寸 */
$uni-img-size-sm: 20px;
$uni-img-size-base: 26px;
$uni-img-size-lg: 40px;

/* Border Radius */
$uni-border-radius-sm: 2px;
$uni-border-radius-base: 3px;
$uni-border-radius-lg: 6px;
$uni-border-radius-circle: 50%;

/* 水平间距 */
$uni-spacing-row-sm: 5px;
$uni-spacing-row-base: 10px;
$uni-spacing-row-lg: 15px;

/* 垂直间距 */
$uni-spacing-col-sm: 4px;
$uni-spacing-col-base: 8px;
$uni-spacing-col-lg: 12px;

/* 透明度 */
$uni-opacity-disabled: 0.3; // 组件禁用态的透明度

/* 文章场景相关 */
$uni-color-title: #2c405a; // 文章标题颜色
$uni-font-size-title: 20px;
$uni-color-subtitle: #555; // 二级标题颜色
$uni-font-size-subtitle: 18px;
$uni-color-paragraph: #3f536e; // 文章段落颜色
$uni-font-size-paragraph: 15px;

#########################################################
# 文件路径: ./frontend/src/api/index.js
/**
 * 模块化方式处理 默认处理 modules文件夹下的所有js文件 内容以export default导出的文件
 * @param { 模块内容集合 } moduleContext
 * @returns modules集合
 */
const modulesHandle = (moduleContext = {}) => {
  if (!Object.keys(moduleContext).length) return
  const modules = {}
  Object.keys(moduleContext).forEach((v) => {
    for (const key in moduleContext[v].default) {
      modules[key] = moduleContext[v].default[key]
    }
  })
  return modules
}

const apis = modulesHandle(import.meta.glob('./modules/**/*.js', { eager: true }))
export const useRequest = () => apis


#########################################################
# 文件路径: ./frontend/src/api/request.js
import { service } from './service'
function createRequest(service) {
  function request(config) {
    // config 自定义配置
    // axios默认配置

    const configDefault = {
      baseURL: import.meta.env.VITE_APP_API_BASEURL, // 所有通过此配置的基础地址 在.env文件配置
      timeout: 15000, // 请求超时时间
      responseType: 'json', // 响应类型
      headers: {
      }
    }
    const requestConfig = Object.assign(configDefault, config)
    return service(requestConfig)
  }
  return request
}

export const request = createRequest(service)


#########################################################
# 文件路径: ./frontend/src/api/service.js
import axios from 'axios'
import { createUniAppAxiosAdapter } from '@uni-helper/axios-adapter'
import { httpLogError, requestError, throttleToLogin } from './utils'
export function createService() {
  const request = axios.create({ adapter: createUniAppAxiosAdapter() })
  request.interceptors.request.use(
  (config) => {
    const token = uni.getStorageSync('token')
    if (token) {
      config.headers = config.headers || {}
      config.headers.Authorization = `Bearer ${token}`
    }
    console.log('请求 headers:', config.headers)  // ✅ 打印 headers
    return config
  },
  (err) => Promise.reject(err)
)

  request.interceptors.response.use(
    (response) => {
      const dataAxios = response.data
      // 这个状态码是和后端约定的
      const { code, data } = dataAxios
      // 根据 code 进行判断
      if (code === undefined) {
        return dataAxios
      } else {
        // 目前和公司后端口头约定是字符串,以防万一强制转字符串
        switch (`${code}`) {
          // code === 200 | 2 代表没有错误
          case '200':
            return data
          // code === 400001004 代表token 过期打回登录页
          case '400001004':
            throttleToLogin()
            break
          case '400':
            // 不是正确的 code
            return requestError(response)
          case '401':
            // 错误登录
            return throttleToLogin()
          default:
            // 不是正确的 code
            return requestError(response)
        }
      }
    },
    (error) => {
      console.log(error)
      const status = error.response?.status
      switch (status) {
        // TODO 再考虑下怎么判断是跨域问题
        case undefined:
        case null:
          httpLogError(error, '网路错误或跨域')
          break
        case 400:
          httpLogError(error, '请求错误')
          break
        case 401:
          httpLogError(error, '未授权，请登录')
          break
        case 403:
          httpLogError(error, '拒绝访问')
          break
        case 404:
          httpLogError(error, `请求地址出错: ${error.response.config.url}`)
          break
        case 408:
          httpLogError(error, '请求超时')
          break
        case 500:
          httpLogError(error, '服务器内部错误')
          break
        case 501:
          httpLogError(error, '服务未实现')
          break
        case 502:
          httpLogError(error, '网关错误')
          break
        case 503:
          httpLogError(error, '服务不可用')
          break
        case 504:
          httpLogError(error, '网关超时')
          break
        case 505:
          httpLogError(error, 'HTTP版本不受支持')
          break
        default:
          httpLogError(error, '请求错误')
          break
      }
      return Promise.reject(error)
    }
  )
  return request
}

export const service = createService()


#########################################################
# 文件路径: ./frontend/src/api/utils.js
// 请求状态错误
export const httpLogError = (error, msg) => {
  error.message = msg
  uni.showToast({
    title: msg,
    icon: 'error',
    duration: 2000
  })
}

// api请求错误
export const requestError = (response) => {
  return new Promise((resolve, reject) => {
    const { data } = response
    const msg = `api请求出错 ${response.config.url}：${data.message}`
    uni.showToast({
      title: msg,
      icon: 'error',
      duration: 2000
    })
    reject(data)
  })
}

// 登录失效
export const throttleToLogin = () => {
  // uni.navigateTo({ url: '/pages/login/login' })
}


#########################################################
# 文件路径: ./frontend/src/api/modules/auth.js
import { request } from '../request'

export default {
  // 登录请求
  API_LOGIN_POST(data = {}) {
    return request({
      url: '/login',
      method: 'post',
      data
    })
  },

  // 注册请求
  API_REGISTER_POST(data = {}) {
    return request({
      url: '/register',
      method: 'post',
      data
    })
  },

  // 获取用户信息
  API_USERINFO_GET() {
    return request({
      url: '/userinfo',
      method: 'get',
    })
  },

  // 注册车主
  API_REGISTER_DRIVER_POST() {
    return request({
      url: '/register_driver',
      method: 'post',
    })
  },

  // 注销车主
  API_UNREGISTER_DRIVER_POST() {
    return request({
      url: '/unregister_driver',
      method: 'post',
    })
  },

  // 腾讯地图 搜索建议
  API_TENCENT_MAP_SUGGESTION_GET(keyword){
    return request({
      url: 'https://apis.map.qq.com/ws/place/v1/suggestion',
      method: 'get',
      params:{
        keyword,
        region: '上海',
        key: import.meta.env.VITE_TENCENT_MAP_API_KEY, // 腾讯地图API密钥
      }
    })
  },

  // 腾讯地图 路径规划
  API_TENCENT_MAP_ROUTE_GET(from, to) {
    return request({
      url: 'https://apis.map.qq.com/ws/direction/v1/driving',
      method: 'get',
      params: {
        from,
        to,
        region: '上海',
        key: import.meta.env.VITE_TENCENT_MAP_API_KEY, // 腾讯地图API密钥
      }
    })
  },

    // 车主发布行程
    API_DRIVERPOSTING_POST(data = {}) {
    return request({
      url: '/post_driver_posting',
      method: 'post',
      data:{
        From: data.From, // 出发地
        To: data.To, // 目的地
        FromLat: data.FromLat, // 出发地纬度
        FromLng: data.FromLng, // 出发地经度
        ToLat: data.ToLat, // 目的地纬度
        ToLng: data.ToLng, // 目的地经度
        DepartureTime: data.DepartureTime, // 出发时间
        SeatsAvailable: data.SeatsAvailable, // 可用座位数
        Fare: data.Fare, // 费用
        PlateNumber: data.PlateNumber, // 车牌号
        Note: data.Note, // 备注
      }
    })
  },


  // 获取车主发布的行程
  API_DRIVERPOSTING_GET(From,To,FromLat, FromLng, ToLat, ToLng) {
    return request({
      url: '/get_driver_postings',
      method: 'get',
      params: {
        From, // 出发地
        To, // 目的地
        FromLat, // 出发地纬度
        FromLng, // 出发地经度
        ToLat, // 目的地纬度
        ToLng, // 目的地经度
      }
    })
  },


  API_MYTRIP_GET(){
    return request({
      url: '/my_trip',
      method: 'get',
    })
  },
  
  API_JOINTRIP_POST(data = {}) {
    return request({
      url: '/join_trip',
      method: 'post',
      data: {
        PostingID: data.PostingID, // 行程ID
      }
    })
  },

  API_CANCELTRIP_POST(data = {}) {
    return request({
      url: '/cancel_trip',
      method: 'post',
      data: {
        PostingID: data.PostingID, // 行程ID
      }
    })
  }

}

#########################################################
# 文件路径: ./frontend/src/api/modules/demo.js
/**
 * 命名=》API_xxx_methodName
 */

import { request } from '../request'
export default {
  API_DEMO_POST(data = {}) {
    return request({
      url: '/mock/user',
      method: 'post',
      data
    })
  },

  API_DEMO_GET(params = {}) {
    return request({
      url: '/posts',
      method: 'get',
      params
    })
  }
}


#########################################################
# 文件路径: ./frontend/src/layouts/default.vue
<template>
<slot>
  main
</slot>
</template>




#########################################################
# 文件路径: ./frontend/src/layouts/defaultbar.vue
<template>
  <view class="layout">
    <slot /> <!-- 页面内容 -->
    <TabBar />
  </view>
</template>

<script setup>
import TabBar from '@/layouts/TabBar.vue'
</script>

<style scoped>
.layout {
  position: relative;
  min-height: 100vh;
  padding-bottom: 100rpx; /* 为 TabBar 留出空间 */
  box-sizing: border-box;
}
</style>

#########################################################
# 文件路径: ./frontend/src/layouts/TabBar.vue
<template>
  <nut-tabbar
    v-model="activeName"
    bottom
    safe-area-inset-bottom
    placeholder
    @tab-switch="onTabSwitch"
  >
    <nut-tabbar-item
      v-for="(item) in tabs"
      :key="item.name"
      :tab-title="item.title"
      :icon="item.icon"
      :name="item.name"
    />
  </nut-tabbar>
  

</template>

<script setup>
import { ref } from 'vue'
import { onShow } from '@dcloudio/uni-app'

const activeName = ref('home')

const tabs = [
  { name: 'home', title: '首页', icon: 'home', path: '/pages/index/index' },
  { name: 'my', title: '我的', icon: 'my', path: '/pages/user/user' }
]

function onTabSwitch(item) {
  const matched = tabs.find(t => t.name === item.name)
  if (matched) {
    uni.switchTab({ url: matched.path })
  }
}

onShow(() => {
  const currentRoute = getCurrentPages().slice(-1)[0]?.route || ''
  const matched = tabs.find(tab => currentRoute === tab.path.replace(/^\//, ''))
  if (matched) {
    activeName.value = matched.name
  }
})
</script>

#########################################################
# 文件路径: ./frontend/src/pages/index/index.vue
<template>
  <nut-cell>
    <image class="logo" src="/static/logo.png"></image>
  </nut-cell>
<nut-tabs v-model="state.tab1value">
  <nut-tab-pane title="🚶 人找车">
    <!-- 设置1️⃣-->
    <TripDisplay />
  </nut-tab-pane>
  <nut-tab-pane title="🚗 车找人">
    <!-- 发布行程 -->
    <TripForm />
  </nut-tab-pane>
</nut-tabs>



</template>
<script setup>
import { ref,reactive } from 'vue'
import TripForm from './TripForm.vue'
import TripDisplay from './TripDisplay.vue'
const state = reactive({
  tab1value: '0',
})

</script>



<style scoped>
.logo {
    height: 175rpx;
    width: 175rpx;
    margin-top: 100rpx;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 50rpx;
  }
.trip-map {
  width: 100vw;
  height: 60vh;
  margin-top: 20px;
  display: block;
}
</style>




#########################################################
# 文件路径: ./frontend/src/pages/index/TripCard.vue
<template>
  <view class="trip-card-container">
    <view class="map-preview" v-if="showMap">
      <map
        :latitude="centerPoint.lat"
        :longitude="centerPoint.lng"
        :scale="mapZoom"
        :markers="markers"
        :polyline="polyline"
        enable-3D="false"
        enable-zoom="false"
        enable-scroll="false"
        enable-rotate="false"
        class="map-instance"
      />
      <view class="map-overlay"></view>
    </view>

    <view class="trip-info">
      <view class="route-line">
        <view class="route-point">
          <view class="point-indicator start"></view>
          <view class="point-label">{{ item.From }}</view>
        </view>
        <view class="route-divider">
          <view class="divider-line"></view>
        </view>
        <view class="route-point">
          <view class="point-indicator end"></view>
          <view class="point-label">{{ item.To }}</view>
        </view>
      </view>

      <view class="trip-meta">
        <view class="meta-row">
          <text class="meta-label">出发时间:</text>
          <text>{{ formatTime(item.DepartureTime) }}</text>
        </view>
         <view class="meta-row">
          <text class="meta-label">联系人:</text>
          <text>{{ item.Name}}</text>
        </view>
        <view class="meta-row">
          <text class="meta-label">联系电话:</text>
          <text>{{ item.Tel }}</text>
        </view>
        <view class="meta-grid">
          <view class="meta-badge">
            <text>{{ item.PlateNumber }}</text>
          </view>
          <view class="meta-badge">
            <text>{{ item.JoinCount }}/{{ item.SeatsAvailable }}座</text>
          </view>
          <view class="meta-badge price">
            <text>¥{{ item.Fare }}</text>
          </view>
        </view>
         <nut-button 
          v-if="showMap"
          size="small"
          type="info"
          block
          @click = "joinTrip">
            <template #icon>
                <nut-icon name="plus" size="16"></nut-icon>
            </template>
            拼车
          </nut-button>

          <nut-button 
          v-else
          size="small"
          type="info"
          block
          plain
          @click = "cancelTrip">
            <template #icon>
                <nut-icon name="minus" size="16"></nut-icon>
            </template>
            取消
          </nut-button>
      </view>
    </view>
  </view>
</template>

<script setup>
import { computed } from 'vue'
const {API_JOINTRIP_POST, API_CANCELTRIP_POST} = useRequest()

const props = defineProps({
  item: {
    type: Object,
    required: true
  },
  showMap: {
    type: Boolean,
    default: true
  }
})

// 格式化时间显示
function formatTime(time) {
  const date = new Date(time)
  return `${date.getMonth()+1}/${date.getDate()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`
}

// 计算中心点
const centerPoint = computed(() => ({
  lat: (props.item.FromLat + props.item.ToLat) / 2,
  lng: (props.item.FromLng + props.item.ToLng) / 2
}))

// 标记点 - 不使用静态图标
const markers = computed(() => [
  {
    id: 1,
    latitude: props.item.FromLat,
    longitude: props.item.FromLng,
    width: 18,
    height: 18,
    color: '#1989fa',
    customCallout: {
      display: 'BYCLICK',
      anchorY: 0
    }
  },
  {
    id: 2,
    latitude: props.item.ToLat,
    longitude: props.item.ToLng,
    width: 18,
    height: 18,
    color: '#ee0a24',
    customCallout: {
      display: 'BYCLICK',
      anchorY: 0
    }
  }
])

// 路线
const polyline = computed(() => [
  {
    points: [
      { latitude: props.item.FromLat, longitude: props.item.FromLng },
      { latitude: props.item.ToLat, longitude: props.item.ToLng }
    ],
    color: '#3c9cff',
    width: 4,
    arrowLine: true
  }
])

// 动态计算缩放级别
const mapZoom = computed(() => {
  const latDiff = Math.abs(props.item.FromLat - props.item.ToLat)
  const lngDiff = Math.abs(props.item.FromLng - props.item.ToLng)
  const maxDiff = Math.max(latDiff, lngDiff)
  
  if (maxDiff < 0.01) return 16
  if (maxDiff < 0.05) return 14
  if (maxDiff < 0.1) return 12
  return 10
})


async function joinTrip() {
  try{
    const res = await API_JOINTRIP_POST({
      PostingID: props.item.PostingID,
    })
    uni.showToast({
      title: '拼车成功',
      icon: 'success'
    })
    console.log('拼车成功:', res)
  }catch (err) {
    console.error('拼车失败:', err)
    const message =
      err?.response?.data?.error ||        // 后端自定义返回
      err?.message ||                      // Axios 错误消息
      '拼车失败'                           // 兜底
    uni.showToast({ title: message, icon: 'none' })
  }
}

async function cancelTrip() {
  try{
    const res = await API_CANCELTRIP_POST({
      PostingID: props.item.PostingID,
    })
    uni.showToast({
      title: '取消成功',
      icon: 'success'
    })
    console.log('取消成功:', res)
  }catch (err) {
    console.error('取消失败:', err)
    const message =
      err?.response?.data?.error ||        // 后端自定义返回
      err?.message ||                      // Axios 错误消息
      '取消失败'                           // 兜底
    uni.showToast({ title: message, icon: 'none' })
  }
}

</script>

<style scoped>
/* 整体卡片容器 */
.trip-card-container {
  margin: 16px 12px;
  border-radius: 16px;
  overflow: hidden;
  background: #fff;
  box-shadow: 
    0 6px 16px rgba(0, 0, 0, 0.08),
    0 3px 6px rgba(0, 0, 0, 0.04);
  position: relative;
  transition: all 0.3s ease;
  border: 1px solid rgba(0, 0, 0, 0.04);
}

.trip-card-container:active {
  transform: translateY(2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
}

/* 地图预览区域 */
.map-preview {
  position: relative;
  width: 100%;
  height: 200px;
  overflow: hidden;
  background: linear-gradient(160deg, #e3eeff, #f0f7ff);
}

/* 地图实例 - 关键样式修正 */
.map-instance {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 120%;  /* 增加高度以填充容器 */
}

/* 地图顶部渐变遮罩 */
.map-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 40px;
  background: linear-gradient(to bottom, rgba(0,0,0,0.15), transparent);
  z-index: 10;
}

/* 行程信息区域 */
.trip-info {
  padding: 16px;
  position: relative;
  z-index: 20;
  background: #fff;
}

/* 路线显示 */
.route-line {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 14px;
}

.route-point {
  display: flex;
  align-items: flex-start;
  gap: 10px;
}

.point-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  margin-top: 5px;
  flex-shrink: 0;
}

.point-indicator.start {
  background: #1989fa;
  box-shadow: 0 0 0 3px rgba(25, 137, 250, 0.2);
}

.point-indicator.end {
  background: #ee0a24;
  box-shadow: 0 0 0 3px rgba(238, 10, 36, 0.2);
}

.point-label {
  font-size: 16px;
  font-weight: 600;
  color: #1a1a1a;
  line-height: 1.4;
}

.route-divider {
  position: relative;
  height: 20px;
  padding-left: 5px;
}

.divider-line {
  position: absolute;
  left: 5px;
  top: 0;
  bottom: 0;
  width: 2px;
  background: repeating-linear-gradient(
    to bottom,
    #c8d9ff,
    #c8d9ff 4px,
    transparent 4px,
    transparent 8px
  );
  margin: 0 0 0 5px;
}

/* 元信息区域 */
.trip-meta {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.meta-row {
  display: flex;
  gap: 8px;
  font-size: 13px;
  color: #666;
}

.meta-label {
  font-weight: 500;
}

.meta-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 8px;
}

.meta-badge {
  background: #f5f7fa;
  border-radius: 16px;
  padding: 5px 10px;
  font-size: 12px;
  text-align: center;
  color: #666;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.meta-badge.price {
  background: rgba(60, 156, 255, 0.12);
  color: #3c9cff;
  font-weight: 600;
}
</style>

#########################################################
# 文件路径: ./frontend/src/pages/index/TripDisplay.vue
<template>
  <view class="trip-form-container">
    <!-- 地图容器区块 -->
    <view class="map-block">
      <!-- 区块标题 -->
      <view class="block-header">
        <text class="block-title">行程检索</text>
      </view>
      
      <!-- 位置输入区域 -->
      <view class="location-inputs">
        <view class="input-row">
          <nut-icon name="location" size="16" ></nut-icon>
          <nut-input 
            v-model="postingFormAddrset.From" 
            placeholder="请输入出发地" 
            clearable
            @input="searchLocations('From')"
            @focus="showSuggestions('From')"
            @blur="hideSuggestions('From')"
          />
        </view>
        
        <view class="input-row">
          <nut-icon name="location" size="16"></nut-icon>
          <nut-input 
            v-model="postingFormAddrset.To" 
            placeholder="请输入目的地" 
            clearable
            @input="searchLocations('To')"
            @focus="showSuggestions('To')"
            @blur="hideSuggestions('To')"
          />
        </view>
      </view>
      
      <!-- 地点建议列表 -->
      <view class="suggestion-list" v-show="suggestionsVisible.From || suggestionsVisible.To">
        <view 
          v-for="(item, index) in activeSuggestions" 
          :key="index"
          class="suggestion-item"
          @click="selectSuggestion(item)"
        >
          <view class="suggestion-icon">
            <nut-icon name="location" size="14"></nut-icon>
          </view>
          <view class="suggestion-content">
            <text class="suggestion-title">{{ item.title }}</text>
            <text class="suggestion-address">{{ item.address }}</text>
          </view>
        </view>
      </view>

      <view class="searchbar-controls">
        <nut-button type="info" size="small" plain @click="searchBarFilter">
            <template #icon>
              <nut-icon name="search" size="16"></nut-icon>
            </template>
        </nut-button>
        <nut-button type="default" size="small" plain @click="searchBarClear">
            <template #icon>
              <nut-icon name="del" size="16"></nut-icon>
            </template>
        </nut-button>
      </view>

    </view>
  </view>

  <view v-if="results.length > 0" style="margin: 16px 20px;">
    <TripCard v-for="item in pagedResults" :key="item.PostingID" :item="item" :showMap="true"/>
  </view>
  <view v-else style="margin: 16px 20px; text-align: center; color: #888;">
    <nut-empty description="暂无匹配行程，请尝试修改搜索条件"/>
  </view>

    <nut-pagination
      v-model="currentPage"
      :total-items="results.length"
      :items-per-page="itemsPerPage"
      mode="simple"
      @change="pageChange"
      style="margin-top: 16px;"
      v-if="results.length > 0"
    />

</template>

<script setup>
import { ref, reactive, computed } from 'vue'
import TripCard from './TripCard.vue'
// 表单数据 postingFormAddrset 初始化为响应式对象
const postingFormAddrset = reactive({
  From: '',
  To: '',
  FromLat: 0,
  FromLng: 0,
  ToLat: 0,
  ToLng: 0
})

const results = ref([])
const currentPage = ref(1)
const itemsPerPage = 1

const pagedResults = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage
  return results.value.slice(start, start + itemsPerPage)
})

function pageChange(val) {
  currentPage.value = val
}

// 页面被隐藏时清空结果
onShow(() => {
  results.value = []
})



const {API_TENCENT_MAP_SUGGESTION_GET, API_DRIVERPOSTING_GET} = useRequest()

// 地点建议功能
const suggestions = reactive({
  From: [],
  To: []
})

const suggestionsVisible = reactive({
  From: false,
  To: false
})

const activeInput = ref('')

// 计算当前显示的建议列表
const activeSuggestions = computed(() => {
  if (activeInput.value === 'From') return suggestions.From
  if (activeInput.value === 'To') return suggestions.To
  return []
})

// 清空搜索栏
function searchBarClear() {
  postingFormAddrset.From = ''
  postingFormAddrset.To = ''
  postingFormAddrset.FromLat = 0
  postingFormAddrset.FromLng = 0
  postingFormAddrset.ToLat = 0
  postingFormAddrset.ToLng = 0
}

async function searchBarFilter() {
  try {
    const result = await API_DRIVERPOSTING_GET(
      postingFormAddrset.From,
      postingFormAddrset.To,
      postingFormAddrset.FromLat,
      postingFormAddrset.FromLng,
      postingFormAddrset.ToLat,
      postingFormAddrset.ToLng
    )

    if (Array.isArray(result)) {
      results.value = result
      console.log('搜索结果:', result)
    } else {
      console.warn('非预期格式:', result)
      results.value = []
    }
  } catch (err) {
    console.error('搜索请求失败:', err)
  }
}

// 添加标记点
function addMarker(location, label) {
  // 设置对应的标记，仅保存经纬度
  if (label === 'From') {
    postingFormAddrset.FromLat = location.lat
    postingFormAddrset.FromLng = location.lng
    postingFormAddrset.From = location.title || location.address
  } else {
    postingFormAddrset.ToLat = location.lat
    postingFormAddrset.ToLng = location.lng
    postingFormAddrset.To = location.title || location.address
  }
}



// 地点搜索函数
async function searchLocations(type) {
  const keyword = postingFormAddrset[type]
  if (!keyword) {
    suggestions[type] = []
    return
  }
  
  try {
    const res = await API_TENCENT_MAP_SUGGESTION_GET(keyword)
    
    if (res.status === 0 && res.data) {
      suggestions[type] = res.data.map(item => ({
        title: item.title,
        address: item.address,
        lat: item.location.lat,
        lng: item.location.lng,
        type
      }))
    } else {
      throw new Error(`API错误: ${res.message || '未知错误'}`)
    }
  } catch (err) {
    console.error('位置搜索失败:', err)
  }
}

// 显示建议列表
function showSuggestions(type) {
  suggestionsVisible[type] = true
  activeInput.value = type
  if (postingFormAddrset[type]) {
    searchLocations(type)
  }
}

// 隐藏建议列表
function hideSuggestions(type) {
  setTimeout(() => {
    suggestionsVisible[type] = false
  }, 200)
}

// 选择建议项
function selectSuggestion(item) {
  suggestionsVisible[item.type] = false
  activeInput.value = ''
  
  addMarker({
    lat: item.lat,
    lng: item.lng,
    title: item.title,
    address: item.address
  }, item.type)
}



</script>

<style scoped>
.trip-form-container {
  padding: 16px;
}

.map-block {
  background: #fff;
  border-radius: 16px;
  border: 1px solid #e8e8e8;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  margin-bottom: 24px;
  transition: all 0.3s ease;
}

.map-block:hover {
  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

/* 区块头部 */
.block-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  border-bottom: 1px solid #f5f5f5;
  background: linear-gradient(to right, #f9fbfd, #fff);
}

.block-title {
  font-size: 18px;
  font-weight: 600;
  color: #1a1a1a;
  position: relative;
  padding-left: 10px;
}

.block-title::before {
  content: '';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 16px;
  background: #1989fa;
  border-radius: 2px;
}

/* 位置输入区 */
.location-inputs {
  padding: 16px 20px 8px;
  border-bottom: 1px solid #f5f5f5;
}

.input-row {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
  position: relative;
  gap: 10px;
}

.input-row .nut-icon {
  flex-shrink: 0;
  margin-right: 8px;
}

/* 地点建议列表 */
.suggestion-list {
  max-height: 250px;
  overflow-y: auto;
  background: #fff;
  border-top: 1px solid #f0f0f0;
  border-bottom: 1px solid #f0f0f0;
  z-index: 10;
}

.suggestion-item {
  display: flex;
  align-items: center;
  padding: 12px 16px;
  border-bottom: 1px solid #f5f5f5;
  transition: all 0.2s;
  cursor: pointer;
}

.suggestion-item:active {
  background-color: #f5f7fa;
}

.suggestion-icon {
  margin-right: 12px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background-color: #f0f8ff;
  display: flex;
  align-items: center;
  justify-content: center;
}

.suggestion-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.suggestion-title {
  font-size: 14px;
  font-weight: 500;
  color: #1a1a1a;
  margin-bottom: 4px;
}

.suggestion-address {
  font-size: 12px;
  color: #666;
}


/* 搜索栏控制按钮 */
.searchbar-controls {
  display: flex;
  justify-content: center;
  gap: 12px;
  padding: 12px;
  background: rgba(255, 255, 255, 0.9);
  border-top: 1px solid #f5f5f5;
}

/* 响应式调整 */
@media (min-width: 768px) {
  .map-block {
    margin-bottom: 32px;
  }
}

/* 小程序适配 */
/* #ifdef MP-WEIXIN */
/* #endif */
</style>

#########################################################
# 文件路径: ./frontend/src/pages/index/TripForm.vue
<template>
  <view class="trip-form-container">
    <!-- 地图组件 -->
    <TripMap 
    v-model:modelValue="postingForm"
    />
    <!-- 表单 : 出发地和目的地的搜索应交给地图模块-->
    <nut-form class="form-card">
      <nut-form-item label="出发时间" required>
        <picker 
          mode="date" 
          :value="departureDate" 
          @change="handleDateChange"
        >
          <view class="picker">
            {{ departureDateDisplay || '选择日期' }}
          </view>
        </picker>
        <picker 
          mode="time" 
          :value="departureTime" 
          @change="handleTimeChange"
        >
          <view class="picker">
            {{ departureTime || '选择时间' }}
          </view>
        </picker>
      </nut-form-item>
      <nut-form-item label="车牌号" required>
        <nut-input 
          v-model="postingForm.PlateNumber" 
          placeholder="请输入车牌号" 
          clearable
        />
      </nut-form-item>
      <nut-form-item label="可用座位数" required>
        <nut-input 
          v-model.number="postingForm.SeatsAvailable" 
          type="number" 
          placeholder="请输入可用座位数" 
        />
      </nut-form-item>
      <nut-form-item label="费用" required>
        <nut-input 
          v-model.number="postingForm.Fare" 
          type="number" 
          placeholder="请输入费用"
          prefix="¥"
        />
      </nut-form-item>
      <nut-form-item label="附加说明">
        <nut-textarea 
          v-model="postingForm.Note" 
          placeholder="请输入附加说明"
          rows="2"
        />
      </nut-form-item>
      
      <view class="submit-btn-container">
        <nut-button 
          type="primary" 
          block
          @click="submitForm"
        >
          发布行程
        </nut-button>
      </view>
    </nut-form>
  </view>
</template>

<script setup>
import { ref, reactive } from 'vue'
import TripMap from './TripMap.vue'
const  { API_DRIVERPOSTING_POST} = useRequest()
// 表单数据
const postingForm = reactive({
  From: '', 
  To: '',
  FromLat: 0,
  FromLng: 0,
  ToLat: 0,
  ToLng: 0,
  DepartureTime: '',
  SeatsAvailable: 1,
  Fare: 50,
  Note: '',
  PlateNumber: '',
})

// 日期和时间选择器相关
const departureDate = ref('')
const departureTime = ref('')
const departureDateDisplay = ref('')


// 处理日期选择
function handleDateChange(e) {
  departureDate.value = e.detail.value
  updateDepartureTime()
}

// 处理时间选择
function handleTimeChange(e) {
  departureTime.value = e.detail.value
  updateDepartureTime()
}

// 更新出发时间
function updateDepartureTime() {
  if (departureDate.value && departureTime.value) {
    postingForm.DepartureTime = `${departureDate.value} ${departureTime.value}`
    
    // 格式化日期显示
    const dateObj = new Date(`${departureDate.value}T${departureTime.value}:00`)
    departureDateDisplay.value = dateObj.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'short'
    })
  }
}

// 表单提交
function submitForm() {
  // 验证表单
  if (!postingForm.From || !postingForm.To) {
    uni.showToast({ title: '请填写出发地和目的地', icon: 'none' })
    return
  }
  
  if (!postingForm.DepartureTime) {
    uni.showToast({ title: '请选择出发时间', icon: 'none' })
    return
  }
  
  if (!postingForm.PlateNumber) {
    uni.showToast({ title: '请填写车牌号', icon: 'none' })
    return
  }
  
  // 表单验证通过，提交逻辑...
  for (const key in postingForm) {
  console.log(`${key}:`, postingForm[key])
}
  try {
    // 调用API提交数据
    const res = API_DRIVERPOSTING_POST(postingForm)
    uni.showToast({ title: '提交成功', icon: 'success' })
    console.log('提交成功:', res)
    // 重置表单
    
  setTimeout(() => {
    postingForm.From = ''
    postingForm.To = ''
    postingForm.DepartureTime = ''
    postingForm.PlateNumber = ''
    postingForm.SeatsAvailable = 1
    postingForm.Fare = 50
    postingForm.Note = ''
    departureDate.value = ''
    departureTime.value = ''
    departureDateDisplay.value = ''
  }, 1500)

  } catch (error) {
    console.error('提交异常:', error)
    uni.showToast({ title: error.error, icon: 'none' })
  }

}



</script>

<style scoped>
.trip-form-container {
  padding: 16px;
  padding-bottom: 40px;
}

.form-card {
  background: #fff;
  border-radius: 16px;
  padding: 16px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin-top: 20px;
}

.picker {
  padding: 12px 16px;
  border: 1px solid #e8e8e8;
  border-radius: 8px;
  margin-top: 8px;
  font-size: 14px;
  color: #333;
}

.submit-btn-container {
  margin-top: 24px;
}
</style>

#########################################################
# 文件路径: ./frontend/src/pages/index/TripMap.vue
<template>
  <view class="trip-form-container">
    <!-- 地图容器区块 -->
    <view class="map-block">
      <!-- 区块标题 -->
      <view class="block-header">
        <text class="block-title">行程地图</text>
      </view>
      
      <!-- 位置输入区域 -->
      <view class="location-inputs">
        <view class="input-row">
          <nut-icon name="location"></nut-icon>
          <nut-input 
            v-model="postingFormAddrset.From" 
            placeholder="请输入出发地" 
            clearable
            @input="searchLocations('From')"
            @focus="showSuggestions('From')"
            @blur="hideSuggestions('From')"
          />
        </view>
        
        <view class="input-row">
          <nut-icon name="location"></nut-icon>
          <nut-input 
            v-model="postingFormAddrset.To" 
            placeholder="请输入目的地" 
            clearable
            @input="searchLocations('To')"
            @focus="showSuggestions('To')"
            @blur="hideSuggestions('To')"
          />
        </view>
      </view>
      
      <!-- 地点建议列表 -->
      <view class="suggestion-list" v-show="suggestionsVisible.From || suggestionsVisible.To">
        <view 
          v-for="(item, index) in activeSuggestions" 
          :key="index"
          class="suggestion-item"
          @click="selectSuggestion(item)"
        >
          <view class="suggestion-icon">
            <nut-icon name= "location" size="14" ></nut-icon>
          </view>
          <view class="suggestion-content">
            <text class="suggestion-title">{{ item.title }}</text>
            <text class="suggestion-address">{{ item.address }}</text>
          </view>
        </view>
      </view>
      
      <!-- 地图容器 -->
      <view class="map-container">
        <map
          :latitude="mapCenter.latitude"
          :longitude="mapCenter.longitude"
          :markers="activeMarkers"
          :scale="zoomLevel"
          :polyline="polyline"
          class="full-map"
          @markertap="handleMarkerTap"
        />
      </view>
      
      <!-- 地图控制按钮 -->
      <view class="map-controls">
        <nut-button 
          type="primary" 
          size="small" 
          plain
          @click="zoomIn"
        >
           <template #icon>
          <nut-icon name="plus" size="14"></nut-icon>
           </template>
        </nut-button>
        <nut-button 
          type="info" 
          size="small" 
          plain
          @click="zoomOut"
        >
        <template #icon>
          <nut-icon name="minus" size="14"></nut-icon>
        </template>
        </nut-button>
        <nut-button 
          type="default" 
          size="small" 
          plain
          @click="clearMarkers"
        >
          <template #icon>
          <nut-icon name="del" size="14"></nut-icon>
          </template>
        </nut-button>
      </view>
      
      <!-- 调试信息 -->
      <view class="debug-info" v-if="showDebugInfo">
        <text>路径点数量: {{ polyline.length > 0 ? polyline[0].points.length : 0 }}</text>
        <text v-if="polyline.length > 0">起点: {{ polyline[0].points[0] ? `${polyline[0].points[0].latitude.toFixed(6)}, ${polyline[0].points[0].longitude.toFixed(6)}` : '无' }}</text>
        <text v-if="polyline.length > 0">终点: {{ polyline[0].points[polyline[0].points.length - 1] ? `${polyline[0].points[polyline[0].points.length - 1].latitude.toFixed(6)}, ${polyline[0].points[polyline[0].points.length - 1].longitude.toFixed(6)}` : '无' }}</text>
        <text>地图中心: {{ mapCenter.latitude.toFixed(6) }}, {{ mapCenter.longitude.toFixed(6) }}</text>
        <text>缩放级别: {{ zoomLevel }}</text>
      </view>
      
      <!-- 调试按钮 -->
      <view class="debug-toggle">
        <nut-button 
          type="default" 
          size="small" 
          @click="showDebugInfo = !showDebugInfo"
        >
          {{ showDebugInfo ? '隐藏调试信息' : '显示调试信息' }}
        </nut-button>
      </view>
    </view>
  </view>
</template>

<script setup>
import { ref, reactive, computed, onMounted, watch } from 'vue'

// props/model

const modelValue = defineModel('modelValue', { type: Object })

// 地图相关逻辑
const mapCenter = ref({ latitude: 31.2304, longitude: 121.4737 })
const zoomLevel = ref(13)
const polyline = ref([])
const routePoints = ref([])
const showDebugInfo = ref(false) // 调试信息开关
const {API_TENCENT_MAP_SUGGESTION_GET, API_TENCENT_MAP_ROUTE_GET} = useRequest()
// 表单数据
const postingFormAddrset = reactive(modelValue.value)

// 使用单独的fromMark和toMark替代markers列表
const fromMark = ref(null)
const toMark = ref(null)

// 计算属性：合并两个标记为数组
const activeMarkers = computed(() => {
  const markers = []
  if (fromMark.value) markers.push(fromMark.value)
  if (toMark.value) markers.push(toMark.value)
  return markers
})

// 地点建议功能
const suggestions = reactive({
  From: [],
  To: []
})

const suggestionsVisible = reactive({
  From: false,
  To: false
})

const activeInput = ref('')

// 计算当前显示的建议列表
const activeSuggestions = computed(() => {
  if (activeInput.value === 'From') return suggestions.From
  if (activeInput.value === 'To') return suggestions.To
  return []
})

// 地图控制方法
function zoomIn() {
  if (zoomLevel.value < 20) zoomLevel.value += 1
}

function zoomOut() {
  if (zoomLevel.value > 3) zoomLevel.value -= 1
}

// 清空所有标记和路径
function clearMarkers() {
  fromMark.value = null
  toMark.value = null
  modelValue.value.From = ''
  modelValue.value.To = ''
  modelValue.value.FromLat = 0
  modelValue.value.FromLng = 0
  modelValue.value.ToLat = 0
  modelValue.value.ToLng = 0
  polyline.value = []
  routePoints.value = []
}

// 创建标记对象
function createMarker(location, label) {
  const isFrom = label === 'From'
  const markerColor = isFrom ? '#1989fa' : '#ff4d4f'
  
  return {
    id: isFrom ? 1 : 2,
    latitude: location.lat,
    longitude: location.lng,
    title: `${isFrom ? '出发地' : '目的地'}: ${location.title || location.address}`,
    color: markerColor,
    width: 24,
    height: 24,
    callout: {
      content: isFrom ? '出发地' : '目的地',
      color: '#fff',
      bgColor: markerColor,
      padding: 10,
      borderRadius: 4,
      display: 'BYCLICK'
    }
  }
}

// 更新地图中心点
function updateMapCenter() {
  if (fromMark.value && toMark.value) {
    // 两地中心点
    const centerLat = (fromMark.value.latitude + toMark.value.latitude) / 2
    const centerLng = (fromMark.value.longitude + toMark.value.longitude) / 2
    mapCenter.value = { latitude: centerLat, longitude: centerLng }
    
    // 自动调整缩放级别
    const latDiff = Math.abs(fromMark.value.latitude - toMark.value.latitude)
    const lngDiff = Math.abs(fromMark.value.longitude - toMark.value.longitude)
    const maxDiff = Math.max(latDiff, lngDiff)
    
    if (maxDiff < 0.01) zoomLevel.value = 15
    else if (maxDiff < 0.05) zoomLevel.value = 13
    else if (maxDiff < 0.1) zoomLevel.value = 11
    else zoomLevel.value = 10
  } else if (fromMark.value) {
    mapCenter.value = { 
      latitude: fromMark.value.latitude, 
      longitude: fromMark.value.longitude 
    }
    zoomLevel.value = 15
  } else if (toMark.value) {
    mapCenter.value = { 
      latitude: toMark.value.latitude, 
      longitude: toMark.value.longitude 
    }
    zoomLevel.value = 15
  }
}

// 添加标记点
function addMarker(location, label) {
  const marker = createMarker(location, label)
  
  // 设置对应的标记
  if (label === 'From') {
    fromMark.value = marker
    modelValue.value.FromLat = location.lat
    modelValue.value.FromLng = location.lng
    modelValue.value.From = location.title || location.address
  } else {
    toMark.value = marker
    modelValue.value.ToLat = location.lat
    modelValue.value.ToLng = location.lng
    modelValue.value.To = location.title || location.address
  }
  
  updateMapCenter()
}


// 路径规划API调用 - 修复参数错误版本
async function planRoute() {
  if (!fromMark.value || !toMark.value) return
  
  console.log('开始路径规划...')
  console.log('起点坐标:', fromMark.value.latitude, fromMark.value.longitude)
  console.log('终点坐标:', toMark.value.latitude, toMark.value.longitude)
  
  try {
    const from = `${fromMark.value.latitude},${fromMark.value.longitude}`
    const to = `${toMark.value.latitude},${toMark.value.longitude}`
    
    // 确保坐标精度（最多6位小数）
    const formatCoord = coord => {
      const [lat, lng] = coord.split(',').map(parseFloat)
      return `${lat.toFixed(6)},${lng.toFixed(6)}`
    }

    const res = await API_TENCENT_MAP_ROUTE_GET(
      formatCoord(from), 
      formatCoord(to)
    )
    
    console.log('路径规划API响应:', res)

    if (res.status === 0 && res.result?.routes?.[0]?.polyline?.length > 0) {
      const compressed = res.result.routes[0].polyline
      const points = []
      
      // 打印原始压缩数据前10项
      console.log('压缩polyline数组（前10个）:', compressed.slice(0, 10))
      
      // 第一个点是绝对坐标
      let lat = compressed[0]
      let lng = compressed[1]
      
      // 验证起点坐标是否合理
      if (!isValidCoordinate(lat, lng)) {
        console.warn('起点坐标异常，尝试校正')
        lat = fromMark.value.latitude
        lng = fromMark.value.longitude
      }
      
      points.push({ latitude: lat, longitude: lng })

      // 从第3个数开始解码（增量编码）
      for (let i = 2; i < compressed.length; i += 2) {
        // 增量单位是万分度，除以10000转换为实际度数
        const deltaLat = compressed[i] / 1000000
        const deltaLng = compressed[i + 1] / 1000000
        
        lat += deltaLat
        lng += deltaLng
        
        points.push({ latitude: lat, longitude: lng })
      }

      console.log('路径点数量:', points.length)
      console.log('路径起点:', points[0])
      console.log('路径终点:', points[points.length - 1])
      
      // 验证终点坐标与预期相符
      const expectedLat = toMark.value.latitude
      const expectedLng = toMark.value.longitude
      const actualLat = points[points.length - 1].latitude
      const actualLng = points[points.length - 1].longitude
      
      if (Math.abs(actualLat - expectedLat) > 0.01 || 
          Math.abs(actualLng - expectedLng) > 0.01) {
        console.warn('终点坐标校正：预期 vs 实际', 
          [expectedLat, expectedLng], [actualLat, actualLng])
        points[points.length - 1] = {
          latitude: expectedLat,
          longitude: expectedLng
        }
      }
      
      // 设置路径线（确保所有点在有效范围内）
      polyline.value = [{
        points: points.map(p => ({
          latitude: clampCoordinate(p.latitude, 'lat'),
          longitude: clampCoordinate(p.longitude, 'lng')
        })),
        color: '#1989fa',
        width: 6,
        arrowLine: true,
        borderColor: '#fff',
        borderWidth: 2
      }]
      
      // 更新地图视图以包含整个路径
      updateMapCenterForRoute(points)
    } else {
      console.error('API路径规划失败:', res.message || '未返回有效路径')
      uni.showToast({
        title: `路径规划失败: ${res.message || '未知错误'}`,
        icon: 'none'
      })
    }
  } catch (err) {
    console.error('路径规划调用失败:', err)
    uni.showToast({
      title: '路径规划服务出错，请稍后再试',
      icon: 'none'
    })
  }
}

// 辅助函数：验证坐标有效性
function isValidCoordinate(lat, lng) {
  return lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180
}

// 辅助函数：坐标钳制到合法范围
function clampCoordinate(value, type) {
  if (type === 'lat') {
    return Math.max(-90, Math.min(90, value))
  }
  return Math.max(-180, Math.min(180, value))
}
// 为路径更新地图中心点
function updateMapCenterForRoute(points) {
  if (!points || points.length === 0) return
  
  // 计算路径边界
  let minLat = points[0].latitude
  let maxLat = points[0].latitude
  let minLng = points[0].longitude
  let maxLng = points[0].longitude
  
  points.forEach(point => {
    if (point.latitude < minLat) minLat = point.latitude
    if (point.latitude > maxLat) maxLat = point.latitude
    if (point.longitude < minLng) minLng = point.longitude
    if (point.longitude > maxLng) maxLng = point.longitude
  })
  
  // 计算中心点
  const centerLat = (minLat + maxLat) / 2
  const centerLng = (minLng + maxLng) / 2
  
  mapCenter.value = {
    latitude: centerLat,
    longitude: centerLng
  }
  
  // 自动调整缩放级别（根据路径跨度）
  const latDiff = maxLat - minLat
  const lngDiff = maxLng - minLng
  const maxDiff = Math.max(latDiff, lngDiff)
  
  if (maxDiff < 0.005) zoomLevel.value = 16
  else if (maxDiff < 0.01) zoomLevel.value = 14
  else if (maxDiff < 0.05) zoomLevel.value = 12
  else if (maxDiff < 0.1) zoomLevel.value = 10
  else zoomLevel.value = 8
}

// 监听起点终点变化
watch(
  () => [fromMark.value, toMark.value], 
  () => {
    if (fromMark.value && toMark.value) {
      planRoute()
    } else {
      polyline.value = []
    }
  },
  { deep: true }
)

// 地点搜索函数
async function searchLocations(type) {
  const keyword = postingFormAddrset[type]
  if (!keyword) {
    suggestions[type] = []
    return
  }
  
  try {
    const res = await API_TENCENT_MAP_SUGGESTION_GET(keyword)
    
    if (res.status === 0 && res.data) {
      suggestions[type] = res.data.map(item => ({
        title: item.title,
        address: item.address,
        lat: item.location.lat,
        lng: item.location.lng,
        type
      }))
    } else {
      throw new Error(`API错误: ${res.message || '未知错误'}`)
    }
  } catch (err) {
    console.error('位置搜索失败:', err)
  }
}

// 显示建议列表
function showSuggestions(type) {
  suggestionsVisible[type] = true
  activeInput.value = type
  if (postingFormAddrset[type]) {
    searchLocations(type)
  }
}

// 隐藏建议列表
function hideSuggestions(type) {
  setTimeout(() => {
    suggestionsVisible[type] = false
  }, 200)
}

// 选择建议项
function selectSuggestion(item) {
  suggestionsVisible[item.type] = false
  activeInput.value = ''
  
  addMarker({
    lat: item.lat,
    lng: item.lng,
    title: item.title,
    address: item.address
  }, item.type)
}

// 处理标记点点击
function handleMarkerTap(e) {
  const marker = activeMarkers.value.find(m => m.id === e.detail.markerId)
  if (marker) {
    uni.showToast({
      title: marker.title,
      icon: 'none'
    })
  }
}

// 组件挂载时初始化地图
onMounted(() => {
  // 初始设置空白地图
  fromMark.value = null
  toMark.value = null
})
</script>

<style scoped>
.trip-form-container {
  padding: 16px;
}

/* 地图区块样式 */
.map-block {
  background: #fff;
  border-radius: 16px;
  border: 1px solid #e8e8e8;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  margin-bottom: 24px;
  transition: all 0.3s ease;
}

.map-block:hover {
  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

/* 区块头部 */
.block-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  border-bottom: 1px solid #f5f5f5;
  background: linear-gradient(to right, #f9fbfd, #fff);
}

.block-title {
  font-size: 18px;
  font-weight: 600;
  color: #1a1a1a;
  position: relative;
  padding-left: 10px;
}

.block-title::before {
  content: '';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 16px;
  background: #1989fa;
  border-radius: 2px;
}

/* 位置输入区 */
.location-inputs {
  padding: 16px 20px 8px;
  border-bottom: 1px solid #f5f5f5;
}

.input-row {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
  position: relative;
  gap: 10px;
}

.input-row .nut-icon {
  flex-shrink: 0;
  margin-right: 8px;
}

/* 地点建议列表 */
.suggestion-list {
  max-height: 250px;
  overflow-y: auto;
  background: #fff;
  border-top: 1px solid #f0f0f0;
  border-bottom: 1px solid #f0f0f0;
  z-index: 10;
}

.suggestion-item {
  display: flex;
  align-items: center;
  padding: 12px 16px;
  border-bottom: 1px solid #f5f5f5;
  transition: all 0.2s;
  cursor: pointer;
}

.suggestion-item:active {
  background-color: #f5f7fa;
}

.suggestion-icon {
  margin-right: 12px;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background-color: #f0f8ff;
  display: flex;
  align-items: center;
  justify-content: center;
}

.suggestion-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.suggestion-title {
  font-size: 14px;
  font-weight: 500;
  color: #1a1a1a;
  margin-bottom: 4px;
}

.suggestion-address {
  font-size: 12px;
  color: #666;
}

/* 地图容器 */
.map-container {
  position: relative;
  width: 100%;
  height: 300px;
  overflow: hidden;
  background: #f9fbfd;
}

.full-map {
  position: absolute;
  width: 110%;
  height: 110%;
  top: -5%;
  left: -5%;
  z-index: 0;
}

/* 地图控制按钮 */
.map-controls {
  display: flex;
  justify-content: center;
  gap: 12px;
  padding: 12px;
  background: rgba(255, 255, 255, 0.9);
  border-top: 1px solid #f5f5f5;
}

/* 调试信息 */
.debug-info {
  padding: 12px 16px;
  background-color: #f8f9fa;
  border-top: 1px solid #e8e8e8;
  font-size: 12px;
  color: #666;
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.debug-toggle {
  padding: 8px 16px;
  border-top: 1px solid #f5f5f5;
  display: flex;
  justify-content: center;
}

/* 响应式调整 */
@media (min-width: 768px) {
  .map-container {
    height: 360px;
  }
  
  .map-block {
    margin-bottom: 32px;
  }
}

/* 小程序适配 */
/* #ifdef MP-WEIXIN */
.map-container {
  height: 280px;
}

.full-map {
  width: 120%;
  height: 120%;
  top: -10%;
  left: -10%;
}
/* #endif */
</style>

#########################################################
# 文件路径: ./frontend/src/pages/user/login.vue
<template>

  <view class="avatar-wrapper">
    <nut-avatar size="large" shape="round" bg-color="#FA2C19" custom-color="#ffffff">
      <nut-icon name="my" size="50"></nut-icon>
    </nut-avatar>
  </view>

  <nut-form>
    <nut-form-item label="手机号">
      <nut-input
        v-model="loginData.tel"
        class="nut-input-text"
        placeholder="请输入手机号"
        type="text"
      />
    </nut-form-item>
    <nut-form-item label="密码">
      <nut-input
        v-model="loginData.password"
        class="nut-input-text"
        placeholder="请输入密码"
        type="password"
        :password="true"
      />
    </nut-form-item>
  </nut-form>
  <nut-row>
    <nut-col :span="12">
       <nut-button block type="primary" @click="handleLogin">登录</nut-button>
    </nut-col>
    <nut-col :span="12">
      <nut-button block type="primary" plain @click="showBottom = true"> 注册 </nut-button>
    </nut-col>
  </nut-row>


<!-- 这段是注册界面的弹出框 -->
  <nut-popup position="bottom" round :custom-style="{ height: '80%' }" v-model:visible="showBottom">

  <nut-form>
    <nut-divider :custom-style="{ color: '#1989fa', borderColor: '#1989fa', padding: '0 16px' }">
      注册账号
    </nut-divider>
    <nut-form-item label="用户名">
      <nut-input
        v-model="registerData.name"
        class="nut-input-text"
        placeholder="请输入用户名"
        type="text"
      />
    </nut-form-item>
    <nut-form-item label="手机号">
      <nut-input
        v-model="registerData.tel"
        class="nut-input-text"
        placeholder="请输入手机号"
        type="text"
      />
    </nut-form-item>
    <nut-form-item label="密码">
      <nut-input
        v-model="registerData.password"
        class="nut-input-text"
        placeholder="请输入密码"
        type="password"
        :password="true"
      />
    </nut-form-item>
    <nut-form-item label="确认密码">
      <nut-input
        v-model="registerData.confirmPassword"
        class="nut-input-text"
        placeholder="请再次输入密码"
        type="password"
        :password="true"
      />
    </nut-form-item>
  </nut-form>

  <nut-cell>
    <nut-radio-group
    v-model="registerData.isDriver"
    direction="horizontal"
    style="display: flex; justify-content: center"
    >
    <nut-radio :label="true" size="large">我是司机</nut-radio>
    <nut-radio :label="false" size="large">我是乘客</nut-radio>
  </nut-radio-group>
  </nut-cell>
  <nut-row>
    <nut-col :span="24">
       <nut-button block type="primary" @click="handleRegister">注册账号</nut-button>
    </nut-col>
  </nut-row>
</nut-popup>


</template>

<script setup>
import { reactive, ref} from 'vue'
import { useRequest } from '@/api'
const {API_LOGIN_POST,API_REGISTER_POST} = useRequest()



// 表单数据响应式变量
const showBottom = ref(false)
const loginData = reactive({
  tel: '',
  password: ''
})
const registerData = reactive({
  name: '',
  tel: '',
  password: '',
  confirmPassword: '',
  isDriver: false
})


// 处理登录逻辑
async function handleLogin() {
  if (!loginData.tel || !loginData.password) {
    uni.showToast({ title: '请输入手机号和密码', icon: 'none' })
    return
  }
  try {
    const res = await API_LOGIN_POST({
      Tel: loginData.tel,
      password: loginData.password
    })
    uni.setStorageSync('token', res.token)  // 存储 token
    uni.navigateBack()
    uni.showToast({ title: res.message || '登录成功', icon: 'success' })

  } catch (err) {
  console.error('登录失败:', err)

  const message =
    err?.response?.data?.error ||        // 后端自定义返回
    err?.message ||                      // Axios 错误消息
    '登录失败'                           // 兜底
  uni.showToast({ title: message, icon: 'none' })
}
}
//  处理注册逻辑
async function handleRegister() {
  const { name, tel, password, confirmPassword, isDriver } = registerData

  // 基础校验
  if (!name || !tel || !password || !confirmPassword) {
    uni.showToast({ title: '请完整填写注册信息', icon: 'none' })
    return
  }
  if (password !== confirmPassword) {
    uni.showToast({ title: '两次密码不一致', icon: 'none' })
    return
  }

  try {
    const res = await API_REGISTER_POST({
      name,
      tel,
      password,
      confirmPassword,
      isDriver
    })
    uni.showToast({ title: res.message || '注册成功', icon: 'success' })
    // 保存 token，可选
    loginData.tel = tel
    console.log('注册获得 token:', res.token)
    showBottom.value = false          // 关闭弹窗
    loginData.tel = tel               // 回填登录表单方便直接登录
  } catch (err) {
    const msg =
      err?.response?.data?.error ||
      err?.message ||
      '注册失败'
    uni.showToast({ title: msg, icon: 'none' })
  }
}
</script>

<style scoped>
.avatar-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 20rpx 0;
}
</style>

#########################################################
# 文件路径: ./frontend/src/pages/user/user.vue
<template>
  <template v-if="userInfo">
    <nut-grid :column-num="3" :border="false">
    <nut-grid-item ></nut-grid-item>
    <nut-grid-item >
     <nut-avatar size="large" custom-color="#ffffff" bg-color="#FA2C19">
        {{ userInfo.Name?.[0] || '' }}
      </nut-avatar>
    </nut-grid-item>
    <nut-grid-item></nut-grid-item>
    </nut-grid>

    <!-- 日历预约内容,只显示最近的 出行 和 拼车 -->
    <view style="text-align: center; font-size: 16px; font-weight: bold;">
      {{ userInfo.Name || '用户' }}，欢迎回来！
    </view>

    <!-- 🔽 新增：最近的出行模块(仅车主)
    
    <view style="margin: 30rpx 20rpx 10rpx; font-size: 16px; font-weight: bold;" v-if="userInfo.isDriver">
      最近的出行
    </view>
    <view style="padding: 0 20rpx;" v-if="userInfo.isDriver">
      <nut-empty description="最近没有出行计划哦" />
    </view> -->

    <!-- 🔽 新增：最近的拼车模块 -->
    <view style="margin: 30rpx 20rpx 10rpx; font-size: 16px; font-weight: bold;">
      最近的拼车
    </view>
     <view style="padding: 0 20rpx;" v-if=" myTrips.length > 0">
      <TripCard v-for="item in myTrips" :key="item.PostingID" :item="item" :showMap="false"/>
    </view>
    <view style="padding: 0 20rpx;" v-else>
      <nut-empty  description="最近没有拼车计划哦" />
    </view>


    <nut-cell-group>
      <nut-cell>
        <nut-button type="primary" block @click="showBottom = true" v-if="!userInfo.isDriver"> 成为车主</nut-button>
        <nut-button type="primary" block  v-else @click="handleUnRegisterDriver" plain>注销车主</nut-button>
      </nut-cell>
      <nut-cell>
         <nut-button type="primary" block @click="toLogout" plain> 退出登录 </nut-button>
      </nut-cell>
    </nut-cell-group>
    <nut-popup position="bottom" round :custom-style="{ height: '80%' }" v-model:visible="showBottom">
      <view style="padding: 20px">
        <text style="font-size: 16px; font-weight: bold; display: block; margin-top: 10px;">
          要成为顺风车车主，需要具备以下条件
        </text>

        <text style="font-size: 15px; font-weight: bold; display: block; margin-top: 10px;">一、符合基础驾驶条件</text>
        <text style="display: block;">1. 年龄：18-70周岁；</text>
        <text style="display: block;">2. 身体状况：健康；</text>
        <text style="display: block;">3. 驾龄：无驾龄限制；</text>
        <text style="display: block;">4. 驾驶证准驾车型：至少包含A1、A2、A3、B1、B2、C1、C2准驾车型的驾驶证。</text>

        <text style="font-size: 15px; font-weight: bold; display: block; margin-top: 10px;">二、无不良记录</text>
        <text style="display: block;">1. 无违法犯罪记录（含暴力犯罪记录、交通肇事犯罪记录、饮酒后驾驶记录、严重交通违法行为记录、吸毒记录）；</text>
        <text style="display: block;">2. 无其他严重不良记录；</text>
        <text style="display: block;">3. 未因涉嫌犯罪处于被调查、侦查等阶段或者被公安机关列入在逃人员名单的。</text>

        <text style="font-size: 15px; font-weight: bold; display: block; margin-top: 10px;">三、拥有满足条件的车辆</text>
        <text style="display: block;">1. 车辆条件：7座及以下车辆且车况良好；</text>
        <text style="display: block;">2. 车辆所有人：自有车辆或者获得车主本人许可，驾驶车辆必须为认证通过的车辆；</text>
        <text style="display: block;">3. 车龄（车辆注册日期）：15年以内；</text>
        <text style="display: block;">4. 车辆需按期年检，且有车辆保险齐全。</text>
      </view>
      <nut-cell >
    <nut-button type="primary" block @click="handleRegisterDriver">
      我已知悉,现在成为车主
    </nut-button>
    </nut-cell>
    </nut-popup>

   

  </template>

  <template v-else>
    <view class="avatar-wrapper">
      <nut-avatar size="large" bg-color="#FA2C19" custom-color="#ffffff">
        <nut-icon name="my" size="50"></nut-icon>
      </nut-avatar>
    </view>
    <nut-button type="primary" block @click="toLogin">
      登录/注册
    </nut-button>
  </template>
</template>

<script setup>
import { ref } from 'vue'
import { useRequest } from '@/api'
import { onShow } from '@dcloudio/uni-app'
import TripCard from '../index/TripCard.vue'
const { API_USERINFO_GET,API_REGISTER_DRIVER_POST,API_UNREGISTER_DRIVER_POST,API_MYTRIP_GET } = useRequest()

const showBottom = ref(false) 
const userInfo = ref(null)
const myTrips = ref([])

onShow(async () => {
  if (userInfo.value) {
    console.log('用户信息已存在，直接使用')
  }else{
    try {
      const res = await API_USERINFO_GET()
      console.log('用户已登录，信息为:', res)
      userInfo.value = res
    } catch (err) {
      console.warn('用户未登录或 token 无效')
      userInfo.value = null
    }
  }

  try{
  myTrips.value = await API_MYTRIP_GET()
  console.log('我的行程:', myTrips)
  }catch(err){
    console.error('获取我的行程失败:', err)
  }

})


function toLogin() {
  uni.navigateTo({ url: '/pages/user/login' })
}


function toLogout() {
  uni.clearStorageSync()
  userInfo.value = null  
}


async function handleRegisterDriver() {
  try {
    const res =await API_REGISTER_DRIVER_POST()
    uni.showToast({ title:res?.message || '申请成功', icon: 'success' })

    // 可选：刷新用户信息
    showBottom.value = false
    const resInfo = await API_USERINFO_GET()
    userInfo.value = resInfo
  } catch (err) {
    console.error('申请失败:', err)
    uni.showToast({ title: err?.message || '申请失败', icon: 'none' })
  }
}

// 处理注销车主逻辑
function handleUnRegisterDriver() {
  uni.showModal({
    title: '确认注销车主身份吗？',
    content: '注销后将无法使用车主相关功能',
    success: async (res) => {
      if (res.confirm) {
        try {
          // 调用注销车主接口
          await API_UNREGISTER_DRIVER_POST()
          uni.showToast({ title: '注销成功', icon: 'success' })
          userInfo.value.isDriver = false  // 更新用户信息
        } catch (err) {
          console.error('注销失败:', err)
          uni.showToast({ title: err?.message || '注销失败', icon: 'none' })
        }
      }
    }
  })
}

</script>
<style scoped>
.avatar-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 20rpx 0;
}

.logo {
    height: 175rpx;
    width: 175rpx;
    margin-top: 100rpx;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 50rpx;
  }
</style>

#########################################################
# 文件路径: ./frontend/src/store/app.js
import { piniaStore } from '.'
export const useAppStore = defineStore('app', {
  state: () => {
    return {
      darkMode: 'light'
    }
  },
  actions: {},
  persist: true // 配置持久化
})

export function useOutsideAppStore() {
  return useAppStore(piniaStore)
}


#########################################################
# 文件路径: ./frontend/src/store/count.js
import { piniaStore } from '../store'
export const useCountStore = defineStore('count', {
  state: () => {
    return {
      count: 0
    }
  },
  actions: {
    increment() {
      this.count++
    }
  },
  persist: true // 配置持久化
})

export function useOutsideCountStore() {
  return useCountStore(piniaStore)
}


#########################################################
# 文件路径: ./frontend/src/store/index.js
import { createPinia } from 'pinia'
import { createPersistedState } from 'pinia-plugin-persistedstate' // 数据持久化

export const piniaStore = createPinia()
piniaStore.use(
  createPersistedState({
    storage: {
      getItem: uni.getStorageSync,
      setItem: uni.setStorageSync
    }
  })
)

export function setupStore(app) {
  app.use(piniaStore)
}


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/changelog.md
## 1.3.8（2023-03-27）
1. 新增useMescroll的hook, 支持vue3 script setup的写法  
2. 新增vue3 script setup的示例 ( 根据vue2的示例,全部重写了一遍 )  
3. mescroll-body 和 mescroll-uni 无需再写 ref="mescrollRef"  
4. 解决mescroll-uni在页面渲染之后,无法动态设置height的问题  
5. 解决renderjs在h5返回有时候无法正常滑动的问题  
6. 修复小程序编辑器提示 Cannot read property 'nv_optDown' of undefined 的错误  
-by 小瑾同学


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/package.json
{
  "id": "mescroll-uni",
  "displayName": "高性能下拉刷新上拉加载组件 支持vue3 setup",
  "version": "1.3.8",
  "description": "wxs+renderjs实现, 支持原生页面和局部区域滚动, 支持vue3 script setup的写法",
  "keywords": [
    "下拉刷新",
    "上拉加载",
    "翻页分页",
    "wxs",
    "setup"
],
  "repository": "https://github.com/mescroll/mescroll",
"engines": {
  },
"dcloudext": {
    "sale": {
      "regular": {
        "price": "0.00"
      },
      "sourcecode": {
        "price": "0.00"
      }
    },
    "contact": {
      "qq": ""
    },
    "declaration": {
      "ads": "无",
      "data": "无",
      "permissions": "无"
    },
    "npmurl": "https://www.npmjs.com/package/mescroll-uni",
    "type": "component-vue"
  },
  "uni_modules": {
    "dependencies": [],
    "encrypt": [],
    "platforms": {
      "cloud": {
        "tcb": "y",
        "aliyun": "y"
      },
      "client": {
        "App": {
          "app-vue": "y",
          "app-nvue": "y"
        },
        "H5-mobile": {
          "Safari": "y",
          "Android Browser": "y",
          "微信浏览器(Android)": "y",
          "QQ浏览器(Android)": "y"
        },
        "H5-pc": {
          "Chrome": "y",
          "IE": "y",
          "Edge": "y",
          "Firefox": "y",
          "Safari": "y"
        },
        "小程序": {
          "微信": "y",
          "阿里": "y",
          "百度": "y",
          "字节跳动": "y",
          "QQ": "y"
        },
        "快应用": {
          "华为": "y",
          "联盟": "y"
        }
      }
    }
  }
}

#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/readme.md
## mescroll --【wxs+renderjs实现】高性能的下拉刷新上拉加载组件
1. mescroll的uni版本 是专门用在uni-app的下拉刷新和上拉加载的组件  

2. mescroll的uni版本 继承了mescroll.js的实用功能: 自动处理分页, 自动控制无数据, 空布局提示, 回到顶部按钮 ..

3. mescroll的uni版本 丰富的案例, 自由灵活的api, 超详细的注释, 可让您快速自定义真正属于自己的下拉上拉组件

<br/>


## 最新文档(1.3.8版本): <a href="https://www.mescroll.com/uni.html">https://www.mescroll.com/uni.html</a>
2023-03-26 by 小瑾同学 (文档可能会有缓存,建议打开时刷新一下)


## 1.3.5版本已调整为[uni_modules](https://uniapp.dcloud.io/uni_modules)
uni_modules版本的mescroll-body 和 mescroll-empty 支持 [easycom规范](https://uniapp.dcloud.io/collocation/pages?id=easycom)  
所以 main.js 无需再为mescroll-body注册全局组件  
所以个别页面要单独使用 mescroll-empty , 也无需手动注册
#### 1.3.5以前的用户升级为uni_modules版本:
```
1. 删除原来的 @/components/mescroll-uni 组件
2. 删除 main.js 注册的 mescroll 组件
3. 从插件市场导入最新mescroll组件 (1.3.5+uni_modules版本)
4. 全局搜索 '@/components/mescroll-uni/' 替换为 '@/uni_modules/mescroll-uni/components/mescroll-uni/'
5. mescroll-empty遵循easycom规范, 若某些页面单独使用 'mescroll-empty.vue', 可删除手动导入的代码
```

## 近期已更新优化的内容:
1. 新增vue3 script setup的示例  
2. 新增`入门极简`示例, 国际化`mescroll-i18n.vue`示例, 轮播吸顶菜单`mescroll-swiper-sticky.vue`示例  
3. 新增 "局部区域滚动" 的案例: mescroll-body-part.vue 和 mescroll-uni-part.vue  
4. 新增 me-video 视频组件, 解决APP端视频下拉悬浮错位的问题, 参考 mescroll-options.vue 示例  
5. 新增 me-tabs 组件,tabs支持水平滑动; 优化mescroll-more和mescroll-swiper的案例, 顶部tab支持水平滑动  
6. 吸顶悬浮提供了原生sticky和监听滚动条实现的示例: sticky.vue 和 sticky-scroll.vue (推荐使用sticky样式实现)  
7. mescroll.scrollTo(y)的y支持css选择器, 包括跨自定义组件的后代选择器, 支持滚动到子组件的view (参考 mescroll-options.vue)  
8. topbar 顶部是否预留状态栏的高度, 默认false; 还可支持设置状态栏背景: 如 '#ffff00', 'url(xxx) 0 0/100% 100%', 'linear-gradient(xx)'  
9. down.bgColor 和 up.bgColor 加载区域的背景,不仅支持色值, 而且还是支持背景图和渐变: 如 'url(xxx) 0 0/100% 100%', 'linear-gradient(xx)'  
10. topbar,bgColor支持一行代码定义background: [https://www.runoob.com/cssref/css3-pr-background.html](https://www.runoob.com/cssref/css3-pr-background.html)
<br/>
<br/>
<a href="https://ext.dcloud.net.cn/plugin?id=343&update_log">查看更多 ... </a>

<br/>

#### mescroll不支持nvue,也暂无支持的计划哈,so sorry~

#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-body/mescroll-body.vue
<template>
	<view 
	class="mescroll-body mescroll-render-touch" 
	:class="{'mescorll-sticky': sticky}"
	:style="{'minHeight':minHeight, 'padding-top': padTop, 'padding-bottom': padBottom}" 
	@touchstart="wxsBiz.touchstartEvent" 
	@touchmove="wxsBiz.touchmoveEvent" 
	@touchend="wxsBiz.touchendEvent" 
	@touchcancel="wxsBiz.touchendEvent"
	:change:prop="wxsBiz.propObserver"
	:prop="wxsProp"
	>
		<!-- 状态栏 -->
		<view v-if="topbar&&statusBarHeight" class="mescroll-topbar" :style="{height: statusBarHeight+'px', background: topbar}"></view>
		
		<view class="mescroll-body-content mescroll-wxs-content" :style="{ transform: translateY, transition: transition }" :change:prop="wxsBiz.callObserver" :prop="callProp">
			<!-- 下拉加载区域 (支付宝小程序子组件传参给子子组件仍报单项数据流的异常,暂时不通过mescroll-down组件实现)-->
			<!-- <mescroll-down :option="mescroll.optDown" :type="downLoadType" :rate="downRate"></mescroll-down> -->
			<view v-if="mescroll.optDown.use" class="mescroll-downwarp" :style="{'background':mescroll.optDown.bgColor,'color':mescroll.optDown.textColor}">
				<view class="downwarp-content">
					<view class="downwarp-progress mescroll-wxs-progress" :class="{'mescroll-rotate': isDownLoading}" :style="{'border-color':mescroll.optDown.textColor, 'transform': downRotate}"></view>
					<view class="downwarp-tip">{{downText}}</view>
				</view>
			</view>
	
			<!-- 列表内容 -->
			<slot></slot>

			<!-- 空布局 -->
			<mescroll-empty v-if="isShowEmpty" :option="mescroll.optUp.empty" @emptyclick="emptyClick"></mescroll-empty>

			<!-- 上拉加载区域 (下拉刷新时不显示, 支付宝小程序子组件传参给子子组件仍报单项数据流的异常,暂时不通过mescroll-up组件实现)-->
			<!-- <mescroll-up v-if="mescroll.optUp.use && !isDownLoading && upLoadType!==3" :option="mescroll.optUp" :type="upLoadType"></mescroll-up> -->
			<view v-if="mescroll.optUp.use && !isDownLoading && upLoadType!==3" class="mescroll-upwarp" :style="{'background':mescroll.optUp.bgColor,'color':mescroll.optUp.textColor}">
				<!-- 加载中 (此处不能用v-if,否则android小程序快速上拉可能会不断触发上拉回调) -->
				<view v-show="upLoadType===1">
					<view class="upwarp-progress mescroll-rotate" :style="{'border-color':mescroll.optUp.textColor}"></view>
					<view class="upwarp-tip">{{ mescroll.optUp.textLoading }}</view>
				</view>
				<!-- 无数据 -->
				<view v-if="upLoadType===2" class="upwarp-nodata">{{ mescroll.optUp.textNoMore }}</view>
			</view>
		</view>
		
		<!-- 底部是否偏移TabBar的高度(默认仅在H5端的tab页生效) -->
		<!-- #ifdef H5 -->
		<view v-if="bottombar && windowBottom>0" class="mescroll-bottombar" :style="{height: windowBottom+'px'}"></view>
		<!-- #endif -->
		
		<!-- 适配iPhoneX -->
		<view v-if="safearea" class="mescroll-safearea"></view>
		
		<!-- 回到顶部按钮 (fixed元素需写在transform外面,防止降级为absolute)-->
		<mescroll-top v-model="isShowToTop" :option="mescroll.optUp.toTop" @click="toTopClick"></mescroll-top>
		
		<!-- #ifdef MP-WEIXIN || MP-QQ || APP-PLUS || H5 -->
		<!-- renderjs的数据载体,不可写在mescroll-downwarp内部,避免use为false时,载体丢失,无法更新数据 -->
		<view :change:prop="renderBiz.propObserver" :prop="wxsProp"></view>
		<!-- #endif -->
	</view>
</template>

<!-- 微信小程序, QQ小程序, app, h5使用wxs -->
<!-- #ifdef MP-WEIXIN || MP-QQ || APP-PLUS || H5 -->
<script src="../mescroll-uni/wxs/wxs.wxs" module="wxsBiz" lang="wxs"></script>
<!-- #endif -->

<!-- app, h5使用renderjs -->
<!-- #ifdef APP-PLUS || H5 -->
<script module="renderBiz" lang="renderjs">
	import renderBiz from "../mescroll-uni/wxs/renderjs.js";
	export default {
		mixins: [renderBiz]
	}
</script>
<!-- #endif -->

<script>
	// 引入mescroll-uni.js,处理核心逻辑
	import MeScroll from "../mescroll-uni/mescroll-uni.js";
	// 引入全局配置
	import GlobalOption from "../mescroll-uni/mescroll-uni-option.js";
	// 引入国际化工具类
	import mescrollI18n from '../mescroll-uni/mescroll-i18n.js';
	// 引入回到顶部组件
	import MescrollTop from "../mescroll-uni/components/mescroll-top.vue";
	// 引入兼容wxs(含renderjs)写法的mixins
	import WxsMixin from "../mescroll-uni/wxs/mixins.js";
	
	/**
	 * mescroll-body 基于page滚动的下拉刷新和上拉加载组件, 支持嵌套原生组件, 性能好
	 * @property {Object} down 下拉刷新的参数配置
	 * @property {Object} up 上拉加载的参数配置
	 * @property {Object} i18n 国际化的参数配置
	 * @property {String, Number} top 下拉布局往下的偏移量 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx, 百分比则相对于windowHeight)
	 * @property {Boolean, String} topbar 偏移量top是否加上状态栏高度, 默认false (使用场景:取消原生导航栏时,配置此项可留出状态栏的占位, 支持传入字符串背景,如色值,背景图,渐变)
	 * @property {String, Number} bottom 上拉布局往上的偏移量 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx, 百分比则相对于windowHeight)
	 * @property {Boolean} safearea 偏移量bottom是否加上底部安全区的距离, 默认false (需要适配iPhoneX时使用)
	 * @property {Boolean} fixed 是否通过fixed固定mescroll的高度, 默认true
	 * @property {String, Number} height 指定mescroll最小高度,默认windowHeight,使列表不满屏仍可下拉
	 * @property {Boolean} bottombar 底部是否偏移TabBar的高度 (仅在H5端的tab页生效)
	 * @property {Boolean} sticky 是否支持sticky,默认false; 当值配置true时,需避免在mescroll-body标签前面加非定位的元素,否则下拉区域无法隐藏
	 * @event {Function} init 初始化完成的回调 
	 * @event {Function} down 下拉刷新的回调
	 * @event {Function} up 上拉加载的回调 
	 * @event {Function} emptyclick 点击empty配置的btnText按钮回调
	 * @event {Function} topclick 点击回到顶部的按钮回调
	 * @event {Function} scroll 滚动监听 (需在 up 配置 onScroll:true 才生效)
	 * @example <mescroll-body @init="mescrollInit" @down="downCallback" @up="upCallback"> ... </mescroll-body>
	 */
	export default {
		name: 'mescroll-body',
		mixins: [WxsMixin],
		components: {
			MescrollTop
		},
		props: {
			down: Object,
			up: Object,
			i18n: Object,
			top: [String, Number],
			topbar: [Boolean, String],
			bottom: [String, Number],
			safearea: Boolean,
			height: [String, Number],
			bottombar:{
				type: Boolean,
				default: true
			},
			sticky: Boolean
		},
		data() {
			return {
				mescroll: {optDown:{},optUp:{}}, // mescroll实例
				downHight: 0, //下拉刷新: 容器高度
				downRate: 0, // 下拉比率(inOffset: rate<1; outOffset: rate>=1)
				downLoadType: 0, // 下拉刷新状态: 0(loading前), 1(inOffset), 2(outOffset), 3(showLoading), 4(endDownScroll)
				upLoadType: 0, // 上拉加载状态：0（loading前），1（loading中），2（没有更多了,显示END文本提示），3（没有更多了,不显示END文本提示）
				isShowEmpty: false, // 是否显示空布局
				isShowToTop: false, // 是否显示回到顶部按钮
				windowHeight: 0, // 可使用窗口的高度
				windowBottom: 0, // 可使用窗口的底部位置
				statusBarHeight: 0 // 状态栏高度
			};
		},
		computed: {
			// mescroll最小高度,默认windowHeight,使列表不满屏仍可下拉
			minHeight(){
				return this.toPx(this.height || '100%') + 'px'
			},
			// 下拉布局往下偏移的距离 (px)
			numTop() {
				return this.toPx(this.top)
			},
			padTop() {
				return this.numTop + 'px';
			},
			// 上拉布局往上偏移 (px)
			numBottom() {
				return this.toPx(this.bottom);
			},
			padBottom() {
				return this.numBottom + 'px';
			},
			// 是否为重置下拉的状态
			isDownReset() {
				return this.downLoadType === 3 || this.downLoadType === 4;
			},
			// 过渡
			transition() {
				return this.isDownReset ? 'transform 300ms' : '';
			},
			translateY() {
				return this.downHight > 0 ? 'translateY(' + this.downHight + 'px)' : ''; // transform会使fixed失效,需注意把fixed元素写在mescroll之外
			},
			// 是否在加载中
			isDownLoading(){
				return this.downLoadType === 3
			},
			// 旋转的角度
			downRotate(){
				return 'rotate(' + 360 * this.downRate + 'deg)'
			},
			// 文本提示
			downText(){
				if(!this.mescroll) return ""; // 避免头条小程序初始化时报错
				switch (this.downLoadType){
					case 1: return this.mescroll.optDown.textInOffset;
					case 2: return this.mescroll.optDown.textOutOffset;
					case 3: return this.mescroll.optDown.textLoading;
					case 4: return this.mescroll.isDownEndSuccess ? this.mescroll.optDown.textSuccess : this.mescroll.isDownEndSuccess==false ? this.mescroll.optDown.textErr : this.mescroll.optDown.textInOffset;
					default: return this.mescroll.optDown.textInOffset;
				}
			}
		},
		methods: {
			//number,rpx,upx,px,% --> px的数值
			toPx(num) {
				if (typeof num === 'string') {
					if (num.indexOf('px') !== -1) {
						if (num.indexOf('rpx') !== -1) {
							// "10rpx"
							num = num.replace('rpx', '');
						} else if (num.indexOf('upx') !== -1) {
							// "10upx"
							num = num.replace('upx', '');
						} else {
							// "10px"
							return Number(num.replace('px', ''));
						}
					} else if (num.indexOf('%') !== -1) {
						// 传百分比,则相对于windowHeight,传"10%"则等于windowHeight的10%
						let rate = Number(num.replace('%', '')) / 100;
						return this.windowHeight * rate;
					}
				}
				return num ? uni.upx2px(Number(num)) : 0;
			},
			// 点击空布局的按钮回调
			emptyClick() {
				this.$emit('emptyclick', this.mescroll);
			},
			// 点击回到顶部的按钮回调
			toTopClick() {
				this.mescroll.scrollTo(0, this.mescroll.optUp.toTop.duration); // 执行回到顶部
				this.$emit('topclick', this.mescroll); // 派发点击回到顶部按钮的回调
			}
		},
		// 使用created初始化mescroll对象; 如果用mounted部分css样式编译到H5会失效
		created() {
			let vm = this;

			let diyOption = {
				// 下拉刷新的配置
				down: {
					inOffset() {
						vm.downLoadType = 1; // 下拉的距离进入offset范围内那一刻的回调 (自定义mescroll组件时,此行不可删)
					},
					outOffset() {
						vm.downLoadType = 2; // 下拉的距离大于offset那一刻的回调 (自定义mescroll组件时,此行不可删)
					},
					onMoving(mescroll, rate, downHight) {
						// 下拉过程中的回调,滑动过程一直在执行;
						vm.downHight = downHight; // 设置下拉区域的高度 (自定义mescroll组件时,此行不可删)
						vm.downRate = rate; //下拉比率 (inOffset: rate<1; outOffset: rate>=1)
					},
					showLoading(mescroll, downHight) {
						vm.downLoadType = 3; // 显示下拉刷新进度的回调 (自定义mescroll组件时,此行不可删)
						vm.downHight = downHight; // 设置下拉区域的高度 (自定义mescroll组件时,此行不可删)
					},
					beforeEndDownScroll(mescroll){
						vm.downLoadType = 4; 
						return mescroll.optDown.beforeEndDelay // 延时结束的时长
					},
					endDownScroll() {
						vm.downLoadType = 4; // 结束下拉 (自定义mescroll组件时,此行不可删)
						vm.downHight = 0; // 设置下拉区域的高度 (自定义mescroll组件时,此行不可删)
						if(vm.downResetTimer) {clearTimeout(vm.downResetTimer); vm.downResetTimer = null} // 移除重置倒计时
						vm.downResetTimer = setTimeout(()=>{ // 过渡动画执行完毕后,需重置为0的状态,避免下次inOffset不及时显示textInOffset
							if(vm.downLoadType === 4) vm.downLoadType = 0
						},300)
					},
					// 派发下拉刷新的回调
					callback: function(mescroll) {
						vm.$emit('down', mescroll);
					}
				},
				// 上拉加载的配置
				up: {
					// 显示加载中的回调
					showLoading() {
						vm.upLoadType = 1;
					},
					// 显示无更多数据的回调
					showNoMore() {
						vm.upLoadType = 2;
					},
					// 隐藏上拉加载的回调
					hideUpScroll(mescroll) {
						vm.upLoadType = mescroll.optUp.hasNext ? 0 : 3;
					},
					// 空布局
					empty: {
						onShow(isShow) {
							// 显示隐藏的回调
							vm.isShowEmpty = isShow;
						}
					},
					// 回到顶部
					toTop: {
						onShow(isShow) {
							// 显示隐藏的回调
							vm.isShowToTop = isShow;
						}
					},
					// 派发上拉加载的回调
					callback: function(mescroll) {
						vm.$emit('up', mescroll);
					}
				}
			};
			
			let i18nType = mescrollI18n.getType() // 当前语言类型
			let i18nOption = {type: i18nType} // 国际化配置
			MeScroll.extend(i18nOption, vm.i18n) // 具体页面的国际化配置
			MeScroll.extend(i18nOption, GlobalOption.i18n) // 全局的国际化配置
			MeScroll.extend(diyOption, i18nOption[i18nType]); // 混入国际化配置
			MeScroll.extend(diyOption, {down:GlobalOption.down, up:GlobalOption.up}); // 混入全局的配置
			let myOption = JSON.parse(JSON.stringify({down: vm.down,up: vm.up})); // 深拷贝,避免对props的影响
			MeScroll.extend(myOption, diyOption); // 混入具体界面的配置

			// 初始化MeScroll对象
			vm.mescroll = new MeScroll(myOption, true); // 传入true,标记body为滚动区域
			// 挂载语言包
			vm.mescroll.i18n = i18nOption;
			// init回调mescroll对象
			vm.$emit('init', vm.mescroll);

			// 设置高度
			const sys = uni.getSystemInfoSync();
			if (sys.windowHeight) vm.windowHeight = sys.windowHeight;
			if (sys.windowBottom) vm.windowBottom = sys.windowBottom;
			if (sys.statusBarHeight) vm.statusBarHeight = sys.statusBarHeight;
			// 使down的bottomOffset生效
			vm.mescroll.setBodyHeight(sys.windowHeight);

			// 因为使用的是page的scroll,这里需自定义scrollTo
			vm.mescroll.resetScrollTo((y, t) => {
				if(typeof y === 'string'){
					// 滚动到指定view (y为css选择器)
					setTimeout(()=>{ // 延时确保view已渲染; 不使用$nextTick
						let selector;
						if(y.indexOf('#')==-1 && y.indexOf('.')==-1){
							selector = '#'+y // 不带#和. 则默认为id选择器
						}else{
							selector = y
							// #ifdef APP-PLUS || H5 || MP-ALIPAY || MP-DINGTALK
							if(y.indexOf('>>>')!=-1){ // 不支持跨自定义组件的后代选择器 (转为普通的选择器即可跨组件查询)
								selector = y.split('>>>')[1].trim()
							}
							// #endif
						}
						uni.createSelectorQuery().select(selector).boundingClientRect(function(rect){
							if (rect) {
								let top = rect.top
								top += vm.mescroll.getScrollTop()
								uni.pageScrollTo({
									scrollTop: top,
									duration: t
								})
							} else{
								console.error(selector + ' does not exist');
							}
						}).exec()
					},30)
				} else{
					// 滚动到指定位置 (y必须为数字)
					uni.pageScrollTo({
						scrollTop: y,
						duration: t
					})
				}
			});

			// 具体的界面如果不配置up.toTop.safearea,则取本vue的safearea值
			if (vm.up && vm.up.toTop && vm.up.toTop.safearea != null) {} else {
				vm.mescroll.optUp.toTop.safearea = vm.safearea;
			}
			
			// 全局配置监听
			uni.$on("setMescrollGlobalOption", options=>{
				if(!options) return;
				let i18nType = options.i18n ? options.i18n.type : null
				if(i18nType && vm.mescroll.i18n.type != i18nType){
					vm.mescroll.i18n.type = i18nType
					mescrollI18n.setType(i18nType)
					MeScroll.extend(options, vm.mescroll.i18n[i18nType])
				}
				if(options.down){
					let down = MeScroll.extend({}, options.down)
					vm.mescroll.optDown = MeScroll.extend(down, vm.mescroll.optDown)
				}
				if(options.up){
					let up = MeScroll.extend({}, options.up)
					vm.mescroll.optUp = MeScroll.extend(up, vm.mescroll.optUp)
				}
			})
		},
		destroyed() {
			// 注销全局配置监听
			uni.$off("setMescrollGlobalOption")
		}
	};
</script>

<style>
	@import "../mescroll-body/mescroll-body.css";
	@import "../mescroll-uni/components/mescroll-down.css";
	@import "../mescroll-uni/components/mescroll-up.css";
</style>

#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-empty/mescroll-empty.vue
<!--空布局:
遵循easycom规范, 可作为独立的组件, 不使用mescroll的页面也能使用:
<mescroll-empty v-if="isShowEmpty" :option="optEmpty" @emptyclick="emptyClick"></mescroll-empty>
-->
<template>
	<view class="mescroll-empty" :class="{ 'empty-fixed': option.fixed }" :style="{ 'z-index': option.zIndex, top: option.top }">
		<view> <image v-if="icon" class="empty-icon" :src="icon" mode="widthFix" /> </view>
		<view v-if="tip" class="empty-tip">{{ tip }}</view>
		<view v-if="btnText" class="empty-btn" @click="emptyClick">{{ btnText }}</view>
	</view>
</template>

<script>
// 引入全局配置
import GlobalOption from '../mescroll-uni/mescroll-uni-option.js';
// 引入国际化工具类
import mescrollI18n from '../mescroll-uni/mescroll-i18n.js';
export default {
	props: {
		// empty的配置项: 默认为GlobalOption.up.empty
		option: {
			type: Object,
			default() {
				return {};
			}
		}
	},
	// 使用computed获取配置,用于支持option的动态配置
	computed: {
		// 图标
		icon() {
			if (this.option.icon != null) { // 此处不使用短路求值, 用于支持传空串不显示图标
				return this.option.icon
			} else{
				let i18nType = mescrollI18n.getType() // 国际化配置
				if (this.option.i18n) {
					return this.option.i18n[i18nType].icon
				} else{
					return GlobalOption.i18n[i18nType].up.empty.icon || GlobalOption.up.empty.icon
				}
			}
		},
		// 文本提示
		tip() {
			if (this.option.tip != null) { // 支持传空串不显示文本提示
				return this.option.tip
			} else{
				let i18nType = mescrollI18n.getType() // 国际化配置
				if (this.option.i18n) {
					return this.option.i18n[i18nType].tip
				} else{
					return GlobalOption.i18n[i18nType].up.empty.tip || GlobalOption.up.empty.tip
				}
			}
		},
		// 按钮文本
		btnText() {
			if (this.option.i18n) {
				let i18nType = mescrollI18n.getType() // 国际化配置
				return this.option.i18n[i18nType].btnText
			} else{
				return this.option.btnText
			}
		}
	},
	methods: {
		// 点击按钮
		emptyClick() {
			this.$emit('emptyclick');
		}
	}
};
</script>

<style>
/* 无任何数据的空布局 */
.mescroll-empty {
	box-sizing: border-box;
	width: 100%;
	padding: 100rpx 50rpx;
	text-align: center;
}

.mescroll-empty.empty-fixed {
	z-index: 99;
	position: absolute; /*transform会使fixed失效,最终会降级为absolute */
	top: 100rpx;
	left: 0;
}

.mescroll-empty .empty-icon {
	width: 280rpx;
	height: 280rpx;
}

.mescroll-empty .empty-tip {
	margin-top: 20rpx;
	font-size: 24rpx;
	color: gray;
}

.mescroll-empty .empty-btn {
	display: inline-block;
	margin-top: 40rpx;
	min-width: 200rpx;
	padding: 18rpx;
	font-size: 28rpx;
	border: 1rpx solid #e04b28;
	border-radius: 60rpx;
	color: #e04b28;
}

.mescroll-empty .empty-btn:active {
	opacity: 0.75;
}
</style>


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-i18n.js
// 国际化工具类
const mescrollI18n = {
  // 默认语言
  def: 'zh',
  // 获取当前语言类型
  getType() {
    return uni.getStorageSync('mescroll-i18n') || this.def
  },
  // 设置当前语言类型
  setType(type) {
    uni.setStorageSync('mescroll-i18n', type)
  }
}

export default mescrollI18n


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-mixins.js
// mescroll-body 和 mescroll-uni 通用
const MescrollMixin = {
  data() {
    return {
      mescroll: null //mescroll实例对象
    }
  },
  // 注册系统自带的下拉刷新 (配置down.native为true时生效, 还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
  onPullDownRefresh() {
    this.mescroll && this.mescroll.onPullDownRefresh()
  },
  // 注册列表滚动事件,用于判定在顶部可下拉刷新,在指定位置可显示隐藏回到顶部按钮 (此方法为页面生命周期,无法在子组件中触发, 仅在mescroll-body生效)
  onPageScroll(e) {
    this.mescroll && this.mescroll.onPageScroll(e)
  },
  // 注册滚动到底部的事件,用于上拉加载 (此方法为页面生命周期,无法在子组件中触发, 仅在mescroll-body生效)
  onReachBottom() {
    this.mescroll && this.mescroll.onReachBottom()
  },
  methods: {
    // mescroll组件初始化的回调,可获取到mescroll对象
    mescrollInit(mescroll) {
      this.mescroll = mescroll
    },
    // 下拉刷新的回调 (mixin默认resetUpScroll)
    downCallback() {
      if (this.mescroll.optUp.use) {
        this.mescroll.resetUpScroll()
      } else {
        setTimeout(() => {
          this.mescroll.endSuccess()
        }, 500)
      }
    },
    // 上拉加载的回调
    upCallback() {
      // mixin默认延时500自动结束加载
      setTimeout(() => {
        this.mescroll.endErr()
      }, 500)
    }
  }
}

export default MescrollMixin


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-uni-option.js
// 全局配置
// mescroll-body 和 mescroll-uni 通用
const GlobalOption = {
  down: {
    // 其他down的配置参数也可以写,这里只展示了常用的配置:
    offset: 80, // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调
    native: false // 是否使用系统自带的下拉刷新; 默认false; 仅在mescroll-body生效 (值为true时,还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
  },
  up: {
    // 其他up的配置参数也可以写,这里只展示了常用的配置:
    offset: 150, // 距底部多远时,触发upCallback,仅mescroll-uni生效 ( mescroll-body配置的是pages.json的 onReachBottomDistance )
    toTop: {
      // 回到顶部按钮,需配置src才显示
      src: 'https://www.mescroll.com/img/mescroll-totop.png', // 图片路径 (建议放入static目录, 如 /static/img/mescroll-totop.png )
      offset: 1000, // 列表滚动多少距离才显示回到顶部按钮,默认1000px
      right: 20, // 到右边的距离, 默认20 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
      bottom: 120, // 到底部的距离, 默认120 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
      width: 72 // 回到顶部图标的宽度, 默认72 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
    },
    empty: {
      use: true, // 是否显示空布局
      icon: 'https://www.mescroll.com/img/mescroll-empty.png' // 图标路径 (建议放入static目录, 如 /static/img/mescroll-empty.png )
    }
  },
  // 国际化配置
  i18n: {
    // 中文
    zh: {
      down: {
        textInOffset: '下拉刷新', // 下拉的距离在offset范围内的提示文本
        textOutOffset: '释放更新', // 下拉的距离大于offset范围的提示文本
        textLoading: '加载中 ...', // 加载中的提示文本
        textSuccess: '加载成功', // 加载成功的文本
        textErr: '加载失败' // 加载失败的文本
      },
      up: {
        textLoading: '加载中 ...', // 加载中的提示文本
        textNoMore: '-- END --', // 没有更多数据的提示文本
        empty: {
          tip: '~ 空空如也 ~' // 空提示
        }
      }
    },
    // 英文
    en: {
      down: {
        textInOffset: 'drop down refresh',
        textOutOffset: 'release updates',
        textLoading: 'loading ...',
        textSuccess: 'loaded successfully',
        textErr: 'loading failed'
      },
      up: {
        textLoading: 'loading ...',
        textNoMore: '-- END --',
        empty: {
          tip: '~ absolutely empty ~'
        }
      }
    }
  }
}

export default GlobalOption


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-uni.js
/* mescroll
 * version 1.3.7
 * 2021-04-12 wenju
 * https://www.mescroll.com
 */

export default function MeScroll(options, isScrollBody) {
  let me = this
  me.version = '1.3.7' // mescroll版本号
  me.options = options || {} // 配置
  me.isScrollBody = isScrollBody || false // 滚动区域是否为原生页面滚动; 默认为scroll-view

  me.isDownScrolling = false // 是否在执行下拉刷新的回调
  me.isUpScrolling = false // 是否在执行上拉加载的回调
  let hasDownCallback = me.options.down && me.options.down.callback // 是否配置了down的callback

  // 初始化下拉刷新
  me.initDownScroll()
  // 初始化上拉加载,则初始化
  me.initUpScroll()

  // 自动加载
  setTimeout(function () {
    // 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
    // 自动触发下拉刷新 (只有配置了down的callback才自动触发下拉刷新)
    if ((me.optDown.use || me.optDown.native) && me.optDown.auto && hasDownCallback) {
      if (me.optDown.autoShowLoading) {
        me.triggerDownScroll() // 显示下拉进度,执行下拉回调
      } else {
        me.optDown.callback && me.optDown.callback(me) // 不显示下拉进度,直接执行下拉回调
      }
    }
    // 自动触发上拉加载
    if (!me.isUpAutoLoad) {
      // 部分小程序(头条小程序)emit是异步, 会导致isUpAutoLoad判断有误, 先延时确保先执行down的callback,再执行up的callback
      setTimeout(function () {
        me.optUp.use && me.optUp.auto && !me.isUpAutoLoad && me.triggerUpScroll()
      }, 100)
    }
  }, 30) // 需让me.optDown.inited和me.optUp.inited先执行
}

/* 配置参数:下拉刷新 */
MeScroll.prototype.extendDownScroll = function (optDown) {
  // 下拉刷新的配置
  MeScroll.extend(optDown, {
    use: true, // 是否启用下拉刷新; 默认true
    auto: true, // 是否在初始化完毕之后自动执行下拉刷新的回调; 默认true
    native: false, // 是否使用系统自带的下拉刷新; 默认false; 仅mescroll-body生效 (值为true时,还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
    autoShowLoading: false, // 如果设置auto=true(在初始化完毕之后自动执行下拉刷新的回调),那么是否显示下拉刷新的进度; 默认false
    isLock: false, // 是否锁定下拉刷新,默认false;
    offset: 80, // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调
    startTop: 100, // scroll-view快速滚动到顶部时,此时的scroll-top可能大于0, 此值用于控制最大的误差
    inOffsetRate: 1, // 在列表顶部,下拉的距离小于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉
    outOffsetRate: 0.2, // 在列表顶部,下拉的距离大于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉
    bottomOffset: 20, // 当手指touchmove位置在距离body底部20px范围内的时候结束上拉刷新,避免Webview嵌套导致touchend事件不执行
    minAngle: 45, // 向下滑动最少偏移的角度,取值区间  [0,90];默认45度,即向下滑动的角度大于45度则触发下拉;而小于45度,将不触发下拉,避免与左右滑动的轮播等组件冲突;
    textInOffset: '下拉刷新', // 下拉的距离在offset范围内的提示文本
    textOutOffset: '释放更新', // 下拉的距离大于offset范围的提示文本
    textLoading: '加载中 ...', // 加载中的提示文本
    textSuccess: '加载成功', // 加载成功的文本
    textErr: '加载失败', // 加载失败的文本
    beforeEndDelay: 0, // 延时结束的时长 (显示加载成功/失败的时长, android小程序设置此项结束下拉会卡顿, 配置后请注意测试)
    bgColor: 'transparent', // 背景颜色 (建议在pages.json中再设置一下backgroundColorTop)
    textColor: 'gray', // 文本颜色 (当bgColor配置了颜色,而textColor未配置时,则textColor会默认为白色)
    inited: null, // 下拉刷新初始化完毕的回调
    inOffset: null, // 下拉的距离进入offset范围内那一刻的回调
    outOffset: null, // 下拉的距离大于offset那一刻的回调
    onMoving: null, // 下拉过程中的回调,滑动过程一直在执行; rate下拉区域当前高度与指定距离的比值(inOffset: rate<1; outOffset: rate>=1); downHight当前下拉区域的高度
    beforeLoading: null, // 准备触发下拉刷新的回调: 如果return true,将不触发showLoading和callback回调; 常用来完全自定义下拉刷新, 参考案例【淘宝 v6.8.0】
    showLoading: null, // 显示下拉刷新进度的回调
    afterLoading: null, // 显示下拉刷新进度的回调之后,马上要执行的代码 (如: 在wxs中使用)
    beforeEndDownScroll: null, // 准备结束下拉的回调. 返回结束下拉的延时执行时间,默认0ms; 常用于结束下拉之前再显示另外一小段动画,才去隐藏下拉刷新的场景, 参考案例【dotJump】
    endDownScroll: null, // 结束下拉刷新的回调
    afterEndDownScroll: null, // 结束下拉刷新的回调,马上要执行的代码 (如: 在wxs中使用)
    callback: function (mescroll) {
      // 下拉刷新的回调;默认重置上拉加载列表为第一页
      mescroll.resetUpScroll()
    }
  })
}

/* 配置参数:上拉加载 */
MeScroll.prototype.extendUpScroll = function (optUp) {
  // 上拉加载的配置
  MeScroll.extend(optUp, {
    use: true, // 是否启用上拉加载; 默认true
    auto: true, // 是否在初始化完毕之后自动执行上拉加载的回调; 默认true
    isLock: false, // 是否锁定上拉加载,默认false;
    isBoth: true, // 上拉加载时,如果滑动到列表顶部是否可以同时触发下拉刷新;默认true,两者可同时触发;
    callback: null, // 上拉加载的回调;function(page,mescroll){ }
    page: {
      num: 0, // 当前页码,默认0,回调之前会加1,即callback(page)会从1开始
      size: 10, // 每页数据的数量
      time: null // 加载第一页数据服务器返回的时间; 防止用户翻页时,后台新增了数据从而导致下一页数据重复;
    },
    noMoreSize: 5, // 如果列表已无数据,可设置列表的总数量要大于等于5条才显示无更多数据;避免列表数据过少(比如只有一条数据),显示无更多数据会不好看
    offset: 150, // 距底部多远时,触发upCallback,仅mescroll-uni生效 ( mescroll-body配置的是pages.json的 onReachBottomDistance )
    textLoading: '加载中 ...', // 加载中的提示文本
    textNoMore: '-- END --', // 没有更多数据的提示文本
    bgColor: 'transparent', // 背景颜色 (建议在pages.json中再设置一下backgroundColorBottom)
    textColor: 'gray', // 文本颜色 (当bgColor配置了颜色,而textColor未配置时,则textColor会默认为白色)
    inited: null, // 初始化完毕的回调
    showLoading: null, // 显示加载中的回调
    showNoMore: null, // 显示无更多数据的回调
    hideUpScroll: null, // 隐藏上拉加载的回调
    errDistance: 60, // endErr的时候需往上滑动一段距离,使其往下滑动时再次触发onReachBottom,仅mescroll-body生效
    toTop: {
      // 回到顶部按钮,需配置src才显示
      src: null, // 图片路径,默认null (绝对路径或网络图)
      offset: 1000, // 列表滚动多少距离才显示回到顶部按钮,默认1000
      duration: 300, // 回到顶部的动画时长,默认300ms (当值为0或300则使用系统自带回到顶部,更流畅; 其他值则通过step模拟,部分机型可能不够流畅,所以非特殊情况不建议修改此项)
      btnClick: null, // 点击按钮的回调
      onShow: null, // 是否显示的回调
      zIndex: 9990, // fixed定位z-index值
      left: null, // 到左边的距离, 默认null. 此项有值时,right不生效. (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      right: 20, // 到右边的距离, 默认20 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      bottom: 120, // 到底部的距离, 默认120 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      safearea: false, // bottom的偏移量是否加上底部安全区的距离, 默认false, 需要适配iPhoneX时使用 (具体的界面如果不配置此项,则取本vue的safearea值)
      width: 72, // 回到顶部图标的宽度, 默认72 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      radius: '50%' // 圆角, 默认"50%" (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
    },
    empty: {
      use: true, // 是否显示空布局
      icon: null, // 图标路径
      tip: '~ 暂无相关数据 ~', // 提示
      btnText: '', // 按钮
      btnClick: null, // 点击按钮的回调
      onShow: null, // 是否显示的回调
      fixed: false, // 是否使用fixed定位,默认false; 配置fixed为true,以下的top和zIndex才生效 (transform会使fixed失效,最终会降级为absolute)
      top: '100rpx', // fixed定位的top值 (完整的单位值,如 "10%"; "100rpx")
      zIndex: 99 // fixed定位z-index值
    },
    onScroll: false // 是否监听滚动事件
  })
}

/* 配置参数 */
MeScroll.extend = function (userOption, defaultOption) {
  if (!userOption) return defaultOption
  for (let key in defaultOption) {
    if (userOption[key] == null) {
      let def = defaultOption[key]
      if (def != null && typeof def === 'object') {
        userOption[key] = MeScroll.extend({}, def) // 深度匹配
      } else {
        userOption[key] = def
      }
    } else if (typeof userOption[key] === 'object') {
      MeScroll.extend(userOption[key], defaultOption[key]) // 深度匹配
    }
  }
  return userOption
}

/* 简单判断是否配置了颜色 (非透明,非白色) */
MeScroll.prototype.hasColor = function (color) {
  if (!color) return false
  let c = color.toLowerCase()
  return c != '#fff' && c != '#ffffff' && c != 'transparent' && c != 'white'
}

/* -------初始化下拉刷新------- */
MeScroll.prototype.initDownScroll = function () {
  let me = this
  // 配置参数
  me.optDown = me.options.down || {}
  if (!me.optDown.textColor && me.hasColor(me.optDown.bgColor)) me.optDown.textColor = '#fff' // 当bgColor有值且textColor未设置,则textColor默认白色
  me.extendDownScroll(me.optDown)

  // 如果是mescroll-body且配置了native,则禁止自定义的下拉刷新
  if (me.isScrollBody && me.optDown.native) {
    me.optDown.use = false
  } else {
    me.optDown.native = false // 仅mescroll-body支持,mescroll-uni不支持
  }

  me.downHight = 0 // 下拉区域的高度

  // 在页面中加入下拉布局
  if (me.optDown.use && me.optDown.inited) {
    // 初始化完毕的回调
    setTimeout(function () {
      // 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
      me.optDown.inited(me)
    }, 0)
  }
}

/* 列表touchstart事件 */
MeScroll.prototype.touchstartEvent = function (e) {
  if (!this.optDown.use) return

  this.startPoint = this.getPoint(e) // 记录起点
  this.startTop = this.getScrollTop() // 记录此时的滚动条位置
  this.startAngle = 0 // 初始角度
  this.lastPoint = this.startPoint // 重置上次move的点
  this.maxTouchmoveY = this.getBodyHeight() - this.optDown.bottomOffset // 手指触摸的最大范围(写在touchstart避免body获取高度为0的情况)
  this.inTouchend = false // 标记不是touchend
}

/* 列表touchmove事件 */
MeScroll.prototype.touchmoveEvent = function (e) {
  if (!this.optDown.use) return
  let me = this

  let scrollTop = me.getScrollTop() // 当前滚动条的距离
  let curPoint = me.getPoint(e) // 当前点

  let moveY = curPoint.y - me.startPoint.y // 和起点比,移动的距离,大于0向下拉,小于0向上拉

  // 向下拉 && 在顶部
  // mescroll-body,直接判定在顶部即可
  // scroll-view在滚动时不会触发touchmove,当触顶/底/左/右时,才会触发touchmove
  // scroll-view滚动到顶部时,scrollTop不一定为0,也有可能大于0; 在iOS的APP中scrollTop可能为负数,不一定和startTop相等
  if (
    moveY > 0 &&
    ((me.isScrollBody && scrollTop <= 0) ||
      (!me.isScrollBody &&
        (scrollTop <= 0 || (scrollTop <= me.optDown.startTop && scrollTop === me.startTop))))
  ) {
    // 可下拉的条件
    if (
      !me.inTouchend &&
      !me.isDownScrolling &&
      !me.optDown.isLock &&
      (!me.isUpScrolling || (me.isUpScrolling && me.optUp.isBoth))
    ) {
      // 下拉的初始角度是否在配置的范围内
      if (!me.startAngle) me.startAngle = me.getAngle(me.lastPoint, curPoint) // 两点之间的角度,区间 [0,90]
      if (me.startAngle < me.optDown.minAngle) return // 如果小于配置的角度,则不往下执行下拉刷新

      // 如果手指的位置超过配置的距离,则提前结束下拉,避免Webview嵌套导致touchend无法触发
      if (me.maxTouchmoveY > 0 && curPoint.y >= me.maxTouchmoveY) {
        me.inTouchend = true // 标记执行touchend
        me.touchendEvent() // 提前触发touchend
        return
      }

      me.preventDefault(e) // 阻止默认事件

      let diff = curPoint.y - me.lastPoint.y // 和上次比,移动的距离 (大于0向下,小于0向上)

      // 下拉距离  < 指定距离
      if (me.downHight < me.optDown.offset) {
        if (me.movetype !== 1) {
          me.movetype = 1 // 加入标记,保证只执行一次
          me.isDownEndSuccess = null // 重置是否加载成功的状态 (wxs执行的是wxs.wxs)
          me.optDown.inOffset && me.optDown.inOffset(me) // 进入指定距离范围内那一刻的回调,只执行一次
          me.isMoveDown = true // 标记下拉区域高度改变,在touchend重置回来
        }
        me.downHight += diff * me.optDown.inOffsetRate // 越往下,高度变化越小

        // 指定距离  <= 下拉距离
      } else {
        if (me.movetype !== 2) {
          me.movetype = 2 // 加入标记,保证只执行一次
          me.optDown.outOffset && me.optDown.outOffset(me) // 下拉超过指定距离那一刻的回调,只执行一次
          me.isMoveDown = true // 标记下拉区域高度改变,在touchend重置回来
        }
        if (diff > 0) {
          // 向下拉
          me.downHight += diff * me.optDown.outOffsetRate // 越往下,高度变化越小
        } else {
          // 向上收
          me.downHight += diff // 向上收回高度,则向上滑多少收多少高度
        }
      }

      me.downHight = Math.round(me.downHight) // 取整
      let rate = me.downHight / me.optDown.offset // 下拉区域当前高度与指定距离的比值
      me.optDown.onMoving && me.optDown.onMoving(me, rate, me.downHight) // 下拉过程中的回调,一直在执行
    }
  }

  me.lastPoint = curPoint // 记录本次移动的点
}

/* 列表touchend事件 */
MeScroll.prototype.touchendEvent = function (e) {
  if (!this.optDown.use) return
  // 如果下拉区域高度已改变,则需重置回来
  if (this.isMoveDown) {
    if (this.downHight >= this.optDown.offset) {
      // 符合触发刷新的条件
      this.triggerDownScroll()
    } else {
      // 不符合的话 则重置
      this.downHight = 0
      this.endDownScrollCall(this)
    }
    this.movetype = 0
    this.isMoveDown = false
  } else if (!this.isScrollBody && this.getScrollTop() === this.startTop) {
    // scroll-view到顶/左/右/底的滑动事件
    let isScrollUp = this.getPoint(e).y - this.startPoint.y < 0 // 和起点比,移动的距离,大于0向下拉,小于0向上拉
    // 上滑
    if (isScrollUp) {
      // 需检查滑动的角度
      let angle = this.getAngle(this.getPoint(e), this.startPoint) // 两点之间的角度,区间 [0,90]
      if (angle > 80) {
        // 检查并触发上拉
        this.triggerUpScroll(true)
      }
    }
  }
}

/* 根据点击滑动事件获取第一个手指的坐标 */
MeScroll.prototype.getPoint = function (e) {
  if (!e) {
    return {
      x: 0,
      y: 0
    }
  }
  if (e.touches && e.touches[0]) {
    return {
      x: e.touches[0].pageX,
      y: e.touches[0].pageY
    }
  } else if (e.changedTouches && e.changedTouches[0]) {
    return {
      x: e.changedTouches[0].pageX,
      y: e.changedTouches[0].pageY
    }
  } else {
    return {
      x: e.clientX,
      y: e.clientY
    }
  }
}

/* 计算两点之间的角度: 区间 [0,90]*/
MeScroll.prototype.getAngle = function (p1, p2) {
  let x = Math.abs(p1.x - p2.x)
  let y = Math.abs(p1.y - p2.y)
  let z = Math.sqrt(x * x + y * y)
  let angle = 0
  if (z !== 0) {
    angle = (Math.asin(y / z) / Math.PI) * 180
  }
  return angle
}

/* 触发下拉刷新 */
MeScroll.prototype.triggerDownScroll = function () {
  if (this.optDown.beforeLoading && this.optDown.beforeLoading(this)) {
    //return true则处于完全自定义状态
  } else {
    this.showDownScroll() // 下拉刷新中...
    !this.optDown.native && this.optDown.callback && this.optDown.callback(this) // 执行回调,联网加载数据
  }
}

/* 显示下拉进度布局 */
MeScroll.prototype.showDownScroll = function () {
  this.isDownScrolling = true // 标记下拉中
  if (this.optDown.native) {
    uni.startPullDownRefresh() // 系统自带的下拉刷新
    this.showDownLoadingCall(0) // 仍触发showLoading,因为上拉加载用到
  } else {
    this.downHight = this.optDown.offset // 更新下拉区域高度
    this.showDownLoadingCall(this.downHight) // 下拉刷新中...
  }
}

MeScroll.prototype.showDownLoadingCall = function (downHight) {
  this.optDown.showLoading && this.optDown.showLoading(this, downHight) // 下拉刷新中...
  this.optDown.afterLoading && this.optDown.afterLoading(this, downHight) // 下拉刷新中...触发之后马上要执行的代码
}

/* 显示系统自带的下拉刷新时需要处理的业务 */
MeScroll.prototype.onPullDownRefresh = function () {
  this.isDownScrolling = true // 标记下拉中
  this.showDownLoadingCall(0) // 仍触发showLoading,因为上拉加载用到
  this.optDown.callback && this.optDown.callback(this) // 执行回调,联网加载数据
}

/* 结束下拉刷新 */
MeScroll.prototype.endDownScroll = function () {
  if (this.optDown.native) {
    // 结束原生下拉刷新
    this.isDownScrolling = false
    this.endDownScrollCall(this)
    uni.stopPullDownRefresh()
    return
  }
  let me = this
  // 结束下拉刷新的方法
  let endScroll = function () {
    me.downHight = 0
    me.isDownScrolling = false
    me.endDownScrollCall(me)
    if (!me.isScrollBody) {
      me.setScrollHeight(0) // scroll-view重置滚动区域,使数据不满屏时仍可检查触发翻页
      me.scrollTo(0, 0) // scroll-view需重置滚动条到顶部,避免startTop大于0时,对下拉刷新的影响
    }
  }
  // 结束下拉刷新时的回调
  let delay = 0
  if (me.optDown.beforeEndDownScroll) {
    delay = me.optDown.beforeEndDownScroll(me) // 结束下拉刷新的延时,单位ms
    if (me.isDownEndSuccess == null) delay = 0 // 没有执行加载中,则不延时
  }
  if (typeof delay === 'number' && delay > 0) {
    setTimeout(endScroll, delay)
  } else {
    endScroll()
  }
}

MeScroll.prototype.endDownScrollCall = function () {
  this.optDown.endDownScroll && this.optDown.endDownScroll(this)
  this.optDown.afterEndDownScroll && this.optDown.afterEndDownScroll(this)
}

/* 锁定下拉刷新:isLock=ture,null锁定;isLock=false解锁 */
MeScroll.prototype.lockDownScroll = function (isLock) {
  if (isLock == null) isLock = true
  this.optDown.isLock = isLock
}

/* 锁定上拉加载:isLock=ture,null锁定;isLock=false解锁 */
MeScroll.prototype.lockUpScroll = function (isLock) {
  if (isLock == null) isLock = true
  this.optUp.isLock = isLock
}

/* -------初始化上拉加载------- */
MeScroll.prototype.initUpScroll = function () {
  let me = this
  // 配置参数
  me.optUp = me.options.up || { use: false }
  if (!me.optUp.textColor && me.hasColor(me.optUp.bgColor)) me.optUp.textColor = '#fff' // 当bgColor有值且textColor未设置,则textColor默认白色
  me.extendUpScroll(me.optUp)

  if (me.optUp.use === false) return // 配置不使用上拉加载时,则不初始化上拉布局
  me.optUp.hasNext = true // 如果使用上拉,则默认有下一页
  me.startNum = me.optUp.page.num + 1 // 记录page开始的页码

  // 初始化完毕的回调
  if (me.optUp.inited) {
    setTimeout(function () {
      // 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
      me.optUp.inited(me)
    }, 0)
  }
}

/*滚动到底部的事件 (仅mescroll-body生效)*/
MeScroll.prototype.onReachBottom = function () {
  if (this.isScrollBody && !this.isUpScrolling) {
    // 只能支持下拉刷新的时候同时可以触发上拉加载,否则滚动到底部就需要上滑一点才能触发onReachBottom
    if (!this.optUp.isLock && this.optUp.hasNext) {
      this.triggerUpScroll()
    }
  }
}

/*列表滚动事件 (仅mescroll-body生效)*/
MeScroll.prototype.onPageScroll = function (e) {
  if (!this.isScrollBody) return

  // 更新滚动条的位置 (主要用于判断下拉刷新时,滚动条是否在顶部)
  this.setScrollTop(e.scrollTop)

  // 顶部按钮的显示隐藏
  if (e.scrollTop >= this.optUp.toTop.offset) {
    this.showTopBtn()
  } else {
    this.hideTopBtn()
  }
}

/*列表滚动事件*/
MeScroll.prototype.scroll = function (e, onScroll) {
  // 更新滚动条的位置
  this.setScrollTop(e.scrollTop)
  // 更新滚动内容高度
  this.setScrollHeight(e.scrollHeight)

  // 向上滑还是向下滑动
  if (this.preScrollY == null) this.preScrollY = 0
  this.isScrollUp = e.scrollTop - this.preScrollY > 0
  this.preScrollY = e.scrollTop

  // 上滑 && 检查并触发上拉
  this.isScrollUp && this.triggerUpScroll(true)

  // 顶部按钮的显示隐藏
  if (e.scrollTop >= this.optUp.toTop.offset) {
    this.showTopBtn()
  } else {
    this.hideTopBtn()
  }

  // 滑动监听
  this.optUp.onScroll && onScroll && onScroll()
}

/* 触发上拉加载 */
MeScroll.prototype.triggerUpScroll = function (isCheck) {
  if (!this.isUpScrolling && this.optUp.use && this.optUp.callback) {
    // 是否校验在底部; 默认不校验
    if (isCheck === true) {
      let canUp = false
      // 还有下一页 && 没有锁定 && 不在下拉中
      if (this.optUp.hasNext && !this.optUp.isLock && !this.isDownScrolling) {
        if (this.getScrollBottom() <= this.optUp.offset) {
          // 到底部
          canUp = true // 标记可上拉
        }
      }
      if (canUp === false) return
    }
    this.showUpScroll() // 上拉加载中...
    this.optUp.page.num++ // 预先加一页,如果失败则减回
    this.isUpAutoLoad = true // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调
    this.num = this.optUp.page.num // 把最新的页数赋值在mescroll上,避免对page的影响
    this.size = this.optUp.page.size // 把最新的页码赋值在mescroll上,避免对page的影响
    this.time = this.optUp.page.time // 把最新的页码赋值在mescroll上,避免对page的影响
    this.optUp.callback(this) // 执行回调,联网加载数据
  }
}

/* 显示上拉加载中 */
MeScroll.prototype.showUpScroll = function () {
  this.isUpScrolling = true // 标记上拉加载中
  this.optUp.showLoading && this.optUp.showLoading(this) // 回调
}

/* 显示上拉无更多数据 */
MeScroll.prototype.showNoMore = function () {
  this.optUp.hasNext = false // 标记无更多数据
  this.optUp.showNoMore && this.optUp.showNoMore(this) // 回调
}

/* 隐藏上拉区域**/
MeScroll.prototype.hideUpScroll = function () {
  this.optUp.hideUpScroll && this.optUp.hideUpScroll(this) // 回调
}

/* 结束上拉加载 */
MeScroll.prototype.endUpScroll = function (isShowNoMore) {
  if (isShowNoMore != null) {
    // isShowNoMore=null,不处理下拉状态,下拉刷新的时候调用
    if (isShowNoMore) {
      this.showNoMore() // isShowNoMore=true,显示无更多数据
    } else {
      this.hideUpScroll() // isShowNoMore=false,隐藏上拉加载
    }
  }
  this.isUpScrolling = false // 标记结束上拉加载
}

/* 重置上拉加载列表为第一页
 *isShowLoading 是否显示进度布局;
 * 1.默认null,不传参,则显示上拉加载的进度布局
 * 2.传参true, 则显示下拉刷新的进度布局
 * 3.传参false,则不显示上拉和下拉的进度 (常用于静默更新列表数据)
 */
MeScroll.prototype.resetUpScroll = function (isShowLoading) {
  if (this.optUp && this.optUp.use) {
    let page = this.optUp.page
    this.prePageNum = page.num // 缓存重置前的页码,加载失败可退回
    this.prePageTime = page.time // 缓存重置前的时间,加载失败可退回
    page.num = this.startNum // 重置为第一页
    page.time = null // 重置时间为空
    if (!this.isDownScrolling && isShowLoading !== false) {
      // 如果不是下拉刷新触发的resetUpScroll并且不配置列表静默更新,则显示进度;
      if (isShowLoading == null) {
        this.removeEmpty() // 移除空布局
        this.showUpScroll() // 不传参,默认显示上拉加载的进度布局
      } else {
        this.showDownScroll() // 传true,显示下拉刷新的进度布局,不清空列表
      }
    }
    this.isUpAutoLoad = true // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调
    this.num = page.num // 把最新的页数赋值在mescroll上,避免对page的影响
    this.size = page.size // 把最新的页码赋值在mescroll上,避免对page的影响
    this.time = page.time // 把最新的页码赋值在mescroll上,避免对page的影响
    this.optUp.callback && this.optUp.callback(this) // 执行上拉回调
  }
}

/* 设置page.num的值 */
MeScroll.prototype.setPageNum = function (num) {
  this.optUp.page.num = num - 1
}

/* 设置page.size的值 */
MeScroll.prototype.setPageSize = function (size) {
  this.optUp.page.size = size
}

/* 联网回调成功,结束下拉刷新和上拉加载
 * dataSize: 当前页的数据量(必传)
 * totalPage: 总页数(必传)
 * systime: 服务器时间 (可空)
 */
MeScroll.prototype.endByPage = function (dataSize, totalPage, systime) {
  let hasNext
  if (this.optUp.use && totalPage != null) hasNext = this.optUp.page.num < totalPage // 是否还有下一页
  this.endSuccess(dataSize, hasNext, systime)
}

/* 联网回调成功,结束下拉刷新和上拉加载
 * dataSize: 当前页的数据量(必传)
 * totalSize: 列表所有数据总数量(必传)
 * systime: 服务器时间 (可空)
 */
MeScroll.prototype.endBySize = function (dataSize, totalSize, systime) {
  let hasNext
  if (this.optUp.use && totalSize != null) {
    let loadSize = (this.optUp.page.num - 1) * this.optUp.page.size + dataSize // 已加载的数据总数
    hasNext = loadSize < totalSize // 是否还有下一页
  }
  this.endSuccess(dataSize, hasNext, systime)
}

/* 联网回调成功,结束下拉刷新和上拉加载
 * dataSize: 当前页的数据个数(不是所有页的数据总和),用于上拉加载判断是否还有下一页.如果不传,则会判断还有下一页
 * hasNext: 是否还有下一页,布尔类型;用来解决这个小问题:比如列表共有20条数据,每页加载10条,共2页.如果只根据dataSize判断,则需翻到第三页才会知道无更多数据,如果传了hasNext,则翻到第二页即可显示无更多数据.
 * systime: 服务器时间(可空);用来解决这个小问题:当准备翻下一页时,数据库新增了几条记录,此时翻下一页,前面的几条数据会和上一页的重复;这里传入了systime,那么upCallback的page.time就会有值,把page.time传给服务器,让后台过滤新加入的那几条记录
 */
MeScroll.prototype.endSuccess = function (dataSize, hasNext, systime) {
  let me = this
  // 结束下拉刷新
  if (me.isDownScrolling) {
    me.isDownEndSuccess = true
    me.endDownScroll()
  }

  // 结束上拉加载
  if (me.optUp.use) {
    let isShowNoMore // 是否已无更多数据
    if (dataSize != null) {
      let pageNum = me.optUp.page.num // 当前页码
      let pageSize = me.optUp.page.size // 每页长度
      // 如果是第一页
      if (pageNum === 1) {
        if (systime) me.optUp.page.time = systime // 设置加载列表数据第一页的时间
      }
      if (dataSize < pageSize || hasNext === false) {
        // 返回的数据不满一页时,则说明已无更多数据
        me.optUp.hasNext = false
        if (dataSize === 0 && pageNum === 1) {
          // 如果第一页无任何数据且配置了空布局
          isShowNoMore = false
          me.showEmpty()
        } else {
          // 总列表数少于配置的数量,则不显示无更多数据
          let allDataSize = (pageNum - 1) * pageSize + dataSize
          if (allDataSize < me.optUp.noMoreSize) {
            isShowNoMore = false
          } else {
            isShowNoMore = true
          }
          me.removeEmpty() // 移除空布局
        }
      } else {
        // 还有下一页
        isShowNoMore = false
        me.optUp.hasNext = true
        me.removeEmpty() // 移除空布局
      }
    }

    // 隐藏上拉
    me.endUpScroll(isShowNoMore)
  }
}

/* 回调失败,结束下拉刷新和上拉加载 */
MeScroll.prototype.endErr = function (errDistance) {
  // 结束下拉,回调失败重置回原来的页码和时间
  if (this.isDownScrolling) {
    this.isDownEndSuccess = false
    let page = this.optUp.page
    if (page && this.prePageNum) {
      page.num = this.prePageNum
      page.time = this.prePageTime
    }
    this.endDownScroll()
  }
  // 结束上拉,回调失败重置回原来的页码
  if (this.isUpScrolling) {
    this.optUp.page.num--
    this.endUpScroll(false)
    // 如果是mescroll-body,则需往回滚一定距离
    if (this.isScrollBody && errDistance !== 0) {
      // 不处理0
      if (!errDistance) errDistance = this.optUp.errDistance // 不传,则取默认
      this.scrollTo(this.getScrollTop() - errDistance, 0) // 往上回滚的距离
    }
  }
}

/* 显示空布局 */
MeScroll.prototype.showEmpty = function () {
  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(true)
}

/* 移除空布局 */
MeScroll.prototype.removeEmpty = function () {
  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(false)
}

/* 显示回到顶部的按钮 */
MeScroll.prototype.showTopBtn = function () {
  if (!this.topBtnShow) {
    this.topBtnShow = true
    this.optUp.toTop.onShow && this.optUp.toTop.onShow(true)
  }
}

/* 隐藏回到顶部的按钮 */
MeScroll.prototype.hideTopBtn = function () {
  if (this.topBtnShow) {
    this.topBtnShow = false
    this.optUp.toTop.onShow && this.optUp.toTop.onShow(false)
  }
}

/* 获取滚动条的位置 */
MeScroll.prototype.getScrollTop = function () {
  return this.scrollTop || 0
}

/* 记录滚动条的位置 */
MeScroll.prototype.setScrollTop = function (y) {
  this.scrollTop = y
}

/* 滚动到指定位置 */
MeScroll.prototype.scrollTo = function (y, t) {
  this.myScrollTo && this.myScrollTo(y, t) // scrollview需自定义回到顶部方法
}

/* 自定义scrollTo */
MeScroll.prototype.resetScrollTo = function (myScrollTo) {
  this.myScrollTo = myScrollTo
}

/* 滚动条到底部的距离 */
MeScroll.prototype.getScrollBottom = function () {
  return this.getScrollHeight() - this.getClientHeight() - this.getScrollTop()
}

/* 计步器
 star: 开始值
 end: 结束值
 callback(step,timer): 回调step值,计步器timer,可自行通过window.clearInterval(timer)结束计步器;
 t: 计步时长,传0则直接回调end值;不传则默认300ms
 rate: 周期;不传则默认30ms计步一次
 * */
MeScroll.prototype.getStep = function (star, end, callback, t, rate) {
  let diff = end - star // 差值
  if (t === 0 || diff === 0) {
    callback && callback(end)
    return
  }
  t = t || 300 // 时长 300ms
  rate = rate || 30 // 周期 30ms
  let count = t / rate // 次数
  let step = diff / count // 步长
  let i = 0 // 计数
  let timer = setInterval(function () {
    if (i < count - 1) {
      star += step
      callback && callback(star, timer)
      i++
    } else {
      callback && callback(end, timer) // 最后一次直接设置end,避免计算误差
      clearInterval(timer)
    }
  }, rate)
}

/* 滚动容器的高度 */
MeScroll.prototype.getClientHeight = function (isReal) {
  let h = this.clientHeight || 0
  if (h === 0 && isReal !== true) {
    // 未获取到容器的高度,可临时取body的高度 (可能会有误差)
    h = this.getBodyHeight()
  }
  return h
}
MeScroll.prototype.setClientHeight = function (h) {
  this.clientHeight = h
}

/* 滚动内容的高度 */
MeScroll.prototype.getScrollHeight = function () {
  return this.scrollHeight || 0
}
MeScroll.prototype.setScrollHeight = function (h) {
  this.scrollHeight = h
}

/* body的高度 */
MeScroll.prototype.getBodyHeight = function () {
  return this.bodyHeight || 0
}
MeScroll.prototype.setBodyHeight = function (h) {
  this.bodyHeight = h
}

/* 阻止浏览器默认滚动事件 */
MeScroll.prototype.preventDefault = function (e) {
  // 小程序不支持e.preventDefault, 已在wxs中禁止
  // app的bounce只能通过配置pages.json的style.app-plus.bounce为"none"来禁止, 或使用renderjs禁止
  // cancelable:是否可以被禁用; defaultPrevented:是否已经被禁用
  if (e && e.cancelable && !e.defaultPrevented) e.preventDefault()
}


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-uni.vue
<template>
	<view class="mescroll-uni-warp">
		<scroll-view :id="viewId" class="mescroll-uni" :class="{'mescroll-uni-fixed':isFixed}" :style="{'height':scrollHeight,'padding-top':padTop,'padding-bottom':padBottom,'top':fixedTop,'bottom':fixedBottom}" :scroll-top="scrollTop" :scroll-with-animation="scrollAnim" @scroll="scroll" :scroll-y='scrollable' :enable-back-to-top="true" :throttle="false">
			<view class="mescroll-uni-content mescroll-render-touch"
			@touchstart="wxsBiz.touchstartEvent" 
			@touchmove="wxsBiz.touchmoveEvent" 
			@touchend="wxsBiz.touchendEvent" 
			@touchcancel="wxsBiz.touchendEvent"
			:change:prop="wxsBiz.propObserver"
			:prop="wxsProp">
				<!-- 状态栏 -->
				<view v-if="topbar&&statusBarHeight" class="mescroll-topbar" :style="{height: statusBarHeight+'px', background: topbar}"></view>
		
				<view class="mescroll-wxs-content" :style="{'transform': translateY, 'transition': transition}" :change:prop="wxsBiz.callObserver" :prop="callProp">
					<!-- 下拉加载区域 (支付宝小程序子组件传参给子子组件仍报单项数据流的异常,暂时不通过mescroll-down组件实现)-->
					<!-- <mescroll-down :option="mescroll.optDown" :type="downLoadType" :rate="downRate"></mescroll-down> -->
					<view v-if="mescroll.optDown.use" class="mescroll-downwarp" :style="{'background':mescroll.optDown.bgColor,'color':mescroll.optDown.textColor}">
						<view class="downwarp-content">
							<view class="downwarp-progress mescroll-wxs-progress" :class="{'mescroll-rotate': isDownLoading}" :style="{'border-color':mescroll.optDown.textColor, 'transform': downRotate}"></view>
							<view class="downwarp-tip">{{downText}}</view>
						</view>
					</view>

					<!-- 列表内容 -->
					<slot></slot>

					<!-- 空布局 -->
					<mescroll-empty v-if="isShowEmpty" :option="mescroll.optUp.empty" @emptyclick="emptyClick"></mescroll-empty>

					<!-- 上拉加载区域 (下拉刷新时不显示, 支付宝小程序子组件传参给子子组件仍报单项数据流的异常,暂时不通过mescroll-up组件实现)-->
					<!-- <mescroll-up v-if="mescroll.optUp.use && !isDownLoading && upLoadType!==3" :option="mescroll.optUp" :type="upLoadType"></mescroll-up> -->
					<view v-if="mescroll.optUp.use && !isDownLoading && upLoadType!==3" class="mescroll-upwarp" :style="{'background':mescroll.optUp.bgColor,'color':mescroll.optUp.textColor}">
						<!-- 加载中 (此处不能用v-if,否则android小程序快速上拉可能会不断触发上拉回调) -->
						<view v-show="upLoadType===1">
							<view class="upwarp-progress mescroll-rotate" :style="{'border-color':mescroll.optUp.textColor}"></view>
							<view class="upwarp-tip">{{ mescroll.optUp.textLoading }}</view>
						</view>
						<!-- 无数据 -->
						<view v-if="upLoadType===2" class="upwarp-nodata">{{ mescroll.optUp.textNoMore }}</view>
					</view>
				</view>
			
				<!-- 底部是否偏移TabBar的高度(默认仅在H5端的tab页生效) -->
				<!-- #ifdef H5 -->
				<view v-if="bottombar && windowBottom>0" class="mescroll-bottombar" :style="{height: windowBottom+'px'}"></view>
				<!-- #endif -->
				
				<!-- 适配iPhoneX -->
				<view v-if="safearea" class="mescroll-safearea"></view>
			</view>
		</scroll-view>

		<!-- 回到顶部按钮 (fixed元素,需写在scroll-view外面,防止滚动的时候抖动)-->
		<mescroll-top v-model="isShowToTop" :option="mescroll.optUp.toTop" @click="toTopClick"></mescroll-top>
		
		<!-- #ifdef MP-WEIXIN || MP-QQ || APP-PLUS || H5 -->
		<!-- renderjs的数据载体,不可写在mescroll-downwarp内部,避免use为false时,载体丢失,无法更新数据 -->
		<view :change:prop="renderBiz.propObserver" :prop="wxsProp"></view>
		<!-- #endif -->
	</view>
</template>

<!-- 微信小程序, QQ小程序, app, h5使用wxs -->
<!-- #ifdef MP-WEIXIN || MP-QQ || APP-PLUS || H5 -->
<script src="./wxs/wxs.wxs" module="wxsBiz" lang="wxs"></script>
<!-- #endif -->

<!-- app, h5使用renderjs -->
<!-- #ifdef APP-PLUS || H5 -->
<script module="renderBiz" lang="renderjs">
	import renderBiz from './wxs/renderjs.js';
	export default {
		mixins:[renderBiz]
	}
</script>
<!-- #endif -->

<script>
	// 引入mescroll-uni.js,处理核心逻辑
	import MeScroll from './mescroll-uni.js';
	// 引入全局配置
	import GlobalOption from './mescroll-uni-option.js';
	// 引入国际化工具类
	import mescrollI18n from './mescroll-i18n.js';
	// 引入回到顶部组件
	import MescrollTop from './components/mescroll-top.vue';
	// 引入兼容wxs(含renderjs)写法的mixins
	import WxsMixin from './wxs/mixins.js';
	
	/**
	 * mescroll-uni 嵌在页面某个区域的下拉刷新和上拉加载组件, 如嵌在弹窗,浮层,swiper中...
	 * @property {Object} down 下拉刷新的参数配置
	 * @property {Object} up 上拉加载的参数配置
	 * @property {Object} i18n 国际化的参数配置
	 * @property {String, Number} top 下拉布局往下的偏移量 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx, 百分比则相对于windowHeight)
	 * @property {Boolean, String} topbar 偏移量top是否加上状态栏高度, 默认false (使用场景:取消原生导航栏时,配置此项可留出状态栏的占位, 支持传入字符串背景,如色值,背景图,渐变)
	 * @property {String, Number} bottom 上拉布局往上的偏移量 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx, 百分比则相对于windowHeight)
	 * @property {Boolean} safearea 偏移量bottom是否加上底部安全区的距离, 默认false (需要适配iPhoneX时使用)
	 * @property {Boolean} fixed 是否通过fixed固定mescroll的高度, 默认true
	 * @property {String, Number} height 指定mescroll的高度, 此项有值,则不使用fixed. (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx, 百分比则相对于windowHeight)
	 * @property {Boolean} bottombar 底部是否偏移TabBar的高度 (仅在H5端的tab页生效)
	 * @property {Boolean} disableScroll 是否禁止滚动, 默认false
	 * @event {Function} init 初始化完成的回调 
	 * @event {Function} down 下拉刷新的回调
	 * @event {Function} up 上拉加载的回调 
	 * @event {Function} emptyclick 点击empty配置的btnText按钮回调
	 * @event {Function} topclick 点击回到顶部的按钮回调
	 * @event {Function} scroll 滚动监听 (需在 up 配置 onScroll:true 才生效)
	 * @example <mescroll-uni @init="mescrollInit" @down="downCallback" @up="upCallback"> ... </mescroll-uni>
	 */
	export default {
		name: 'mescroll-uni',
		mixins: [WxsMixin],
		components: {
			MescrollTop
		},
		props: {
			down: Object,
			up: Object,
			i18n: Object,
			top: [String, Number],
			topbar: [Boolean, String],
			bottom: [String, Number],
			safearea: Boolean,
			fixed: {
				type: Boolean,
				default: true
			},
			height: [String, Number],
			bottombar:{
				type: Boolean,
				default: true
			},
			disableScroll: Boolean
		},
		data() {
			return {
				mescroll: {optDown:{},optUp:{}}, // mescroll实例
				viewId: 'id_' + Math.random().toString(36).substr(2,16), // 随机生成mescroll的id(不能数字开头,否则找不到元素)
				downHight: 0, //下拉刷新: 容器高度
				downRate: 0, // 下拉比率(inOffset: rate<1; outOffset: rate>=1)
				downLoadType: 0, // 下拉刷新状态: 0(loading前), 1(inOffset), 2(outOffset), 3(showLoading), 4(endDownScroll)
				upLoadType: 0, // 上拉加载状态: 0(loading前), 1loading中, 2没有更多了,显示END文本提示, 3(没有更多了,不显示END文本提示)
				isShowEmpty: false, // 是否显示空布局
				isShowToTop: false, // 是否显示回到顶部按钮
				scrollTop: 0, // 滚动条的位置
				scrollAnim: false, // 是否开启滚动动画
				windowTop: 0, // 可使用窗口的顶部位置
				windowBottom: 0, // 可使用窗口的底部位置
				windowHeight: 0, // 可使用窗口的高度
				statusBarHeight: 0 // 状态栏高度
			}
		},
		watch: {
			height() {
				// 设置容器的高度
				this.setClientHeight()
			}
		},
		computed: {
			// 是否使用fixed定位 (当height有值,则不使用)
			isFixed(){
				return !this.height && this.fixed
			},
			// mescroll的高度
			scrollHeight(){
				if (this.isFixed) {
					return "auto"
				} else if(this.height){
					return this.toPx(this.height) + 'px'
				}else{
					return "100%"
				}
			},
			// 下拉布局往下偏移的距离 (px)
			numTop() {
				return this.toPx(this.top)
			},
			fixedTop() {
				return this.isFixed ? (this.numTop + this.windowTop) + 'px' : 0
			},
			padTop() {
				return !this.isFixed ? this.numTop + 'px' : 0
			},
			// 上拉布局往上偏移 (px)
			numBottom() {
				return this.toPx(this.bottom)
			},
			fixedBottom() {
				return this.isFixed ? (this.numBottom + this.windowBottom) + 'px' : 0
			},
			padBottom() {
				return !this.isFixed ? this.numBottom + 'px' : 0
			},
			// 是否为重置下拉的状态
			isDownReset(){
				return this.downLoadType===3 || this.downLoadType===4
			},
			// 过渡
			transition() {
				return this.isDownReset ? 'transform 300ms' : '';
			},
			translateY() {
				return this.downHight > 0 ? 'translateY(' + this.downHight + 'px)' : ''; // transform会使fixed失效,需注意把fixed元素写在mescroll之外
			},
			// 列表是否可滑动
			scrollable(){
				if(this.disableScroll) return false
				return this.downLoadType===0 || this.isDownReset
			},
			// 是否在加载中
			isDownLoading(){
				return this.downLoadType === 3
			},
			// 旋转的角度
			downRotate(){
				return 'rotate(' + 360 * this.downRate + 'deg)'
			},
			// 文本提示
			downText(){
				if(!this.mescroll) return ""; // 避免头条小程序初始化时报错
				switch (this.downLoadType){
					case 1: return this.mescroll.optDown.textInOffset;
					case 2: return this.mescroll.optDown.textOutOffset;
					case 3: return this.mescroll.optDown.textLoading;
					case 4: return this.mescroll.isDownEndSuccess ? this.mescroll.optDown.textSuccess : this.mescroll.isDownEndSuccess==false ? this.mescroll.optDown.textErr : this.mescroll.optDown.textInOffset;
					default: return this.mescroll.optDown.textInOffset;
				}
			}
		},
		methods: {
			//number,rpx,upx,px,% --> px的数值
			toPx(num){
				if(typeof num === "string"){
					if (num.indexOf('px') !== -1) {
						if(num.indexOf('rpx') !== -1) { // "10rpx"
							num = num.replace('rpx', '');
						} else if(num.indexOf('upx') !== -1) { // "10upx"
							num = num.replace('upx', '');
						} else { // "10px"
							return Number(num.replace('px', ''))
						}
					}else if (num.indexOf('%') !== -1){
						// 传百分比,则相对于windowHeight,传"10%"则等于windowHeight的10%
						let rate = Number(num.replace("%","")) / 100
						return this.windowHeight * rate
					}
				}
				return num ? uni.upx2px(Number(num)) : 0
			},
			//注册列表滚动事件,用于下拉刷新和上拉加载
			scroll(e) {
				this.mescroll.scroll(e.detail, () => {
					this.$emit('scroll', this.mescroll) // 此时可直接通过 this.mescroll.scrollTop获取滚动条位置; this.mescroll.isScrollUp获取是否向上滑动
				})
			},
			// 点击空布局的按钮回调
			emptyClick() {
				this.$emit('emptyclick', this.mescroll)
			},
			// 点击回到顶部的按钮回调
			toTopClick() {
				this.mescroll.scrollTo(0, this.mescroll.optUp.toTop.duration); // 执行回到顶部
				this.$emit('topclick', this.mescroll); // 派发点击回到顶部按钮的回调
			},
			// 更新滚动区域的高度 (使内容不满屏和到底,都可继续翻页)
			setClientHeight() {
				if (!this.isExec) {
					this.isExec = true; // 避免多次获取
					this.$nextTick(() => { // 确保dom已渲染
						this.getClientInfo(data=>{
							this.isExec = false;
							if (data) {
								this.mescroll.setClientHeight(data.height);
							} else if (this.clientNum != 3) { // 极少部分情况,可能dom还未渲染完毕,递归获取,最多重试3次
								this.clientNum = this.clientNum == null ? 1 : this.clientNum + 1;
								setTimeout(() => {
									this.setClientHeight()
								}, this.clientNum * 100)
							}
						})
					})
				}
			},
			// 获取滚动区域的信息
			getClientInfo(success){
				let query = uni.createSelectorQuery().in(this);
				let view = query.select('#' + this.viewId);
				view.boundingClientRect(data => {
					success(data)
				}).exec();
			}
		},
		// 使用created初始化mescroll对象; 如果用mounted部分css样式编译到H5会失效
		created() {
			let vm = this;

			let diyOption = {
				// 下拉刷新的配置
				down: {
					inOffset() {
						vm.downLoadType = 1; // 下拉的距离进入offset范围内那一刻的回调 (自定义mescroll组件时,此行不可删)
					},
					outOffset() {
						vm.downLoadType = 2; // 下拉的距离大于offset那一刻的回调 (自定义mescroll组件时,此行不可删)
					},
					onMoving(mescroll, rate, downHight) {
						// 下拉过程中的回调,滑动过程一直在执行;
						vm.downHight = downHight; // 设置下拉区域的高度 (自定义mescroll组件时,此行不可删)
						vm.downRate = rate; //下拉比率 (inOffset: rate<1; outOffset: rate>=1)
					},
					showLoading(mescroll, downHight) {
						vm.downLoadType = 3; // 显示下拉刷新进度的回调 (自定义mescroll组件时,此行不可删)
						vm.downHight = downHight; // 设置下拉区域的高度 (自定义mescroll组件时,此行不可删)
					},
					beforeEndDownScroll(mescroll){
						vm.downLoadType = 4; 
						return mescroll.optDown.beforeEndDelay // 延时结束的时长
					},
					endDownScroll() {
						vm.downLoadType = 4; // 结束下拉 (自定义mescroll组件时,此行不可删)
						vm.downHight = 0; // 设置下拉区域的高度 (自定义mescroll组件时,此行不可删)
						vm.downResetTimer && clearTimeout(vm.downResetTimer)
						vm.downResetTimer = setTimeout(()=>{ // 过渡动画执行完毕后,需重置为0的状态,以便置空this.transition,避免iOS小程序列表渲染不完整
							if(vm.downLoadType===4) vm.downLoadType = 0
						},300)
					},
					// 派发下拉刷新的回调
					callback: function(mescroll) {
						vm.$emit('down', mescroll)
					}
				},
				// 上拉加载的配置
				up: {
					// 显示加载中的回调
					showLoading() {
						vm.upLoadType = 1;
					},
					// 显示无更多数据的回调
					showNoMore() {
						vm.upLoadType = 2;
					},
					// 隐藏上拉加载的回调
					hideUpScroll(mescroll) {
						vm.upLoadType = mescroll.optUp.hasNext ? 0 : 3;
					},
					// 空布局
					empty: {
						onShow(isShow) { // 显示隐藏的回调
							vm.isShowEmpty = isShow;
						}
					},
					// 回到顶部
					toTop: {
						onShow(isShow) { // 显示隐藏的回调
							vm.isShowToTop = isShow;
						}
					},
					// 派发上拉加载的回调
					callback: function(mescroll) {
						vm.$emit('up', mescroll);
						// 更新容器的高度 (多mescroll的情况)
						vm.setClientHeight()
					}
				}
			}

			let i18nType = mescrollI18n.getType() // 当前语言类型
			let i18nOption = {type: i18nType} // 国际化配置
			MeScroll.extend(i18nOption, vm.i18n) // 具体页面的国际化配置
			MeScroll.extend(i18nOption, GlobalOption.i18n) // 全局的国际化配置
			MeScroll.extend(diyOption, i18nOption[i18nType]); // 混入国际化配置
			MeScroll.extend(diyOption, {down:GlobalOption.down, up:GlobalOption.up}); // 混入全局的配置
			let myOption = JSON.parse(JSON.stringify({'down': vm.down,'up': vm.up})) // 深拷贝,避免对props的影响
			MeScroll.extend(myOption, diyOption); // 混入具体界面的配置

			// 初始化MeScroll对象
			vm.mescroll = new MeScroll(myOption);
			vm.mescroll.viewId = vm.viewId; // 附带id
			vm.mescroll.i18n = i18nOption; // 挂载语言包
			// init回调mescroll对象
			vm.$emit('init', vm.mescroll);
			
			// 设置高度
			const sys = uni.getSystemInfoSync();
			if(sys.windowTop) vm.windowTop = sys.windowTop;
			if(sys.windowBottom) vm.windowBottom = sys.windowBottom;
			if(sys.windowHeight) vm.windowHeight = sys.windowHeight;
			if(sys.statusBarHeight) vm.statusBarHeight = sys.statusBarHeight;
			// 使down的bottomOffset生效
			vm.mescroll.setBodyHeight(sys.windowHeight);

			// 因为使用的是scrollview,这里需自定义scrollTo
			vm.mescroll.resetScrollTo((y, t) => {
				vm.scrollAnim = (t !== 0); // t为0,则不使用动画过渡
				if(typeof y === 'string'){
					// 小程序不支持slot里面的scroll-into-view, 统一使用计算的方式实现
					vm.getClientInfo(function(rect){
						let mescrollTop = rect.top // mescroll到顶部的距离
						let selector;
						if(y.indexOf('#')==-1 && y.indexOf('.')==-1){
							selector = '#'+y // 不带#和. 则默认为id选择器
						}else{
							selector = y
							// #ifdef APP-PLUS || H5 || MP-ALIPAY || MP-DINGTALK
							if(y.indexOf('>>>')!=-1){ // 不支持跨自定义组件的后代选择器 (转为普通的选择器即可跨组件查询)
								selector = y.split('>>>')[1].trim()
							}
							// #endif
						}
						uni.createSelectorQuery().select(selector).boundingClientRect(function(rect){
							if (rect) {
								let curY = vm.mescroll.getScrollTop()
								let top = rect.top - mescrollTop
								top += curY
								if(!vm.isFixed) top -= vm.numTop
								vm.scrollTop = curY;
								vm.$nextTick(function() {
									vm.scrollTop = top
								})
							} else{
								console.error(selector + ' does not exist');
							}
						}).exec()
					})
					return;
				}
				let curY = vm.mescroll.getScrollTop()
				if (t === 0 || t === 300) { // 当t使用默认配置的300时,则使用系统自带的动画过渡
					vm.scrollTop = curY;
					vm.$nextTick(function() {
						vm.scrollTop = y
					})
				} else {
					vm.mescroll.getStep(curY, y, step => { // 此写法可支持配置t
						vm.scrollTop = step
					}, t)
				}
			})
			
			// 具体的界面如果不配置up.toTop.safearea,则取本vue的safearea值
			if (vm.up && vm.up.toTop && vm.up.toTop.safearea != null) {} else {
				vm.mescroll.optUp.toTop.safearea = vm.safearea;
			}
			
			// 全局配置监听
			uni.$on("setMescrollGlobalOption", options=>{
				if(!options) return;
				let i18nType = options.i18n ? options.i18n.type : null
				if(i18nType && vm.mescroll.i18n.type != i18nType){
					vm.mescroll.i18n.type = i18nType
					mescrollI18n.setType(i18nType)
					MeScroll.extend(options, vm.mescroll.i18n[i18nType])
				}
				if(options.down){
					let down = MeScroll.extend({}, options.down)
					vm.mescroll.optDown = MeScroll.extend(down, vm.mescroll.optDown)
				}
				if(options.up){
					let up = MeScroll.extend({}, options.up)
					vm.mescroll.optUp = MeScroll.extend(up, vm.mescroll.optUp)
				}
			})
		},
		mounted() {
			// 设置容器的高度
			this.setClientHeight()
		},
		destroyed() {
			// 注销全局配置监听
			uni.$off("setMescrollGlobalOption")
		}
	}
</script>

<style>
	@import "./mescroll-uni.css";
	@import "./components/mescroll-down.css";
	@import './components/mescroll-up.css';
</style>


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/components/mescroll-down.vue
<!-- 下拉刷新区域 -->
<template>
	<view v-if="mOption.use" class="mescroll-downwarp" :style="{'background-color':mOption.bgColor,'color':mOption.textColor}">
		<view class="downwarp-content">
			<view class="downwarp-progress" :class="{'mescroll-rotate': isDownLoading}" :style="{'border-color':mOption.textColor, 'transform':downRotate}"></view>
			<view class="downwarp-tip">{{downText}}</view>
		</view>
	</view>
</template>

<script>
export default {
	props: {
		option: Object , // down的配置项
		type: Number, // 下拉状态（inOffset：1， outOffset：2， showLoading：3， endDownScroll：4）
		rate: Number // 下拉比率 (inOffset: rate<1; outOffset: rate>=1)
	},
	computed: {
		// 支付宝小程序需写成计算属性,prop定义default仍报错
		mOption(){
			return this.option || {}
		},
		// 是否在加载中
		isDownLoading(){
			return this.type === 3
		},
		// 旋转的角度
		downRotate(){
			return 'rotate(' + 360 * this.rate + 'deg)'
		},
		// 文本提示
		downText(){
			switch (this.type){
				case 1: return this.mOption.textInOffset;
				case 2: return this.mOption.textOutOffset;
				case 3: return this.mOption.textLoading;
				case 4: return this.mOption.textLoading;
				default: return this.mOption.textInOffset;
			}
		}
	}
};
</script>

<style>
@import "./mescroll-down.css";
</style>


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/components/mescroll-top.vue
<!-- 回到顶部的按钮 -->
<template>
	<image
		v-if="option.src"
		class="mescroll-totop"
		:class="[isShow ? 'mescroll-totop-in' : 'mescroll-totop-out', {'mescroll-totop-safearea': option.safearea}]"
		:style="{'z-index':option.zIndex, 'left': left, 'right': right, 'bottom':addUnit(option.bottom), 'width':addUnit(option.width), 'border-radius':addUnit(option.radius)}"
		:src="option.src"
		mode="widthFix"
		@click="toTopClick"
	/>
</template>

<script>
export default {
	props: {
		// up.toTop的配置项
		option: {
			type: Object,
			default(){
				return {}
			}
		},
		// 是否显示
		value: false, // vue2
		modelValue: false // vue3
	},
	computed: {
		// 优先显示左边
		left(){
			return this.option.left ? this.addUnit(this.option.left) : 'auto';
		},
		// 右边距离 (优先显示左边)
		right() {
			return this.option.left ? 'auto' : this.addUnit(this.option.right);
		},
		// 是否显示
		isShow(){
			// #ifdef VUE3
			return this.modelValue
			// #endif
			// #ifdef VUE2
			return this.value
			// #endif
		}
	},
	methods: {
		addUnit(num){
			if(!num) return 0;
			if(typeof num === 'number') return num + 'rpx';
			return num
		},
		toTopClick() {
			// #ifdef VUE3
			this.$emit("update:modelValue", false); // 使v-model生效 vue3
			// #endif
			// #ifdef VUE2
			this.$emit('input', false); // 使v-model生效 vue2
			// #endif
			this.$emit('click'); // 派发点击事件
		}
	}
};
</script>

<style>
/* 回到顶部的按钮 */
.mescroll-totop {
	z-index: 9990;
	position: fixed !important; /* 加上important避免编译到H5,在多mescroll中定位失效 */
	right: 20rpx;
	bottom: 120rpx;
	width: 72rpx;
	height: auto;
	border-radius: 50%;
	opacity: 0;
	transition: opacity 0.5s; /* 过渡 */
	margin-bottom: var(--window-bottom); /* css变量 */
}

/* 适配 iPhoneX */
@supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {
	.mescroll-totop-safearea {
		margin-bottom: calc(var(--window-bottom) + constant(safe-area-inset-bottom)); /* window-bottom + 适配 iPhoneX */
		margin-bottom: calc(var(--window-bottom) + env(safe-area-inset-bottom));
	}
}

/* 显示 -- 淡入 */
.mescroll-totop-in {
	opacity: 1;
}

/* 隐藏 -- 淡出且不接收事件*/
.mescroll-totop-out {
	opacity: 0;
	pointer-events: none;
}
</style>


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/components/mescroll-up.vue
<!-- 上拉加载区域 -->
<template>
	<view class="mescroll-upwarp" :style="{'background-color':mOption.bgColor,'color':mOption.textColor}">
		<!-- 加载中 (此处不能用v-if,否则android小程序快速上拉可能会不断触发上拉回调) -->
		<view v-show="isUpLoading">
			<view class="upwarp-progress mescroll-rotate" :style="{'border-color':mOption.textColor}"></view>
			<view class="upwarp-tip">{{ mOption.textLoading }}</view>
		</view>
		<!-- 无数据 -->
		<view v-if="isUpNoMore" class="upwarp-nodata">{{ mOption.textNoMore }}</view>
	</view>
</template>

<script>
export default {
	props: {
		option: Object, // up的配置项
		type: Number // 上拉加载的状态：0（loading前），1（loading中），2（没有更多了）
	},
	computed: {
		// 支付宝小程序需写成计算属性,prop定义default仍报错
		mOption() {
			return this.option || {};
		},
		// 加载中
		isUpLoading() {
			return this.type === 1;
		},
		// 没有更多了
		isUpNoMore() {
			return this.type === 2;
		}
	}
};
</script>

<style>
@import './mescroll-up.css';
</style>


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mixins/mescroll-comp.js
/**
 * mescroll-body写在子组件时,需通过mescroll的mixins补充子组件缺少的生命周期
 */
const MescrollCompMixin = {
  // 因为子组件无onPageScroll和onReachBottom的页面生命周期，需在页面传递进到子组件 (一级)
  onPageScroll(e) {
    this.handlePageScroll(e)
  },
  onReachBottom() {
    this.handleReachBottom()
  },
  // 当down的native: true时, 还需传递此方法进到子组件
  onPullDownRefresh() {
    this.handlePullDownRefresh()
  },
  data() {
    return {
      mescroll: {
        // mescroll-body写在子子子...组件的情况 (多级)
        onPageScroll: (e) => {
          this.handlePageScroll(e)
        },
        onReachBottom: () => {
          this.handleReachBottom()
        },
        onPullDownRefresh: () => {
          this.handlePullDownRefresh()
        }
      }
    }
  },
  methods: {
    handlePageScroll(e) {
      let item = this.$refs['mescrollItem']
      if (item && item.mescroll) item.mescroll.onPageScroll(e)
    },
    handleReachBottom() {
      let item = this.$refs['mescrollItem']
      if (item && item.mescroll) item.mescroll.onReachBottom()
    },
    handlePullDownRefresh() {
      let item = this.$refs['mescrollItem']
      if (item && item.mescroll) item.mescroll.onPullDownRefresh()
    }
  }
}

export default MescrollCompMixin


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mixins/mescroll-more-item.js
/**
 * mescroll-more-item的mixins, 仅在多个 mescroll-body 写在子组件时使用 (参考 mescroll-more 案例)
 */
const MescrollMoreItemMixin = {
  // 支付宝小程序不支持props的mixin,需写在具体的页面中
  // #ifndef MP-ALIPAY || MP-DINGTALK
  props: {
    i: Number, // 每个tab页的专属下标
    index: {
      // 当前tab的下标
      type: Number,
      default() {
        return 0
      }
    }
  },
  // #endif
  data() {
    return {
      downOption: {
        auto: false // 不自动加载
      },
      upOption: {
        auto: false // 不自动加载
      },
      isInit: false // 当前tab是否已初始化
    }
  },
  watch: {
    // 监听下标的变化
    index(val) {
      if (this.i === val && !this.isInit) this.mescrollTrigger()
    }
  },
  methods: {
    // mescroll组件初始化的回调,可获取到mescroll对象 (覆盖mescroll-mixins.js的mescrollInit, 为了标记isInit)
    mescrollInit(mescroll) {
      this.mescroll = mescroll
      // 自动加载当前tab的数据
      if (this.i === this.index) {
        this.mescrollTrigger()
      }
    },
    // 主动触发加载
    mescrollTrigger() {
      this.isInit = true // 标记为true
      if (this.mescroll) {
        if (this.mescroll.optDown.use) {
          this.mescroll.triggerDownScroll()
        } else {
          this.mescroll.triggerUpScroll()
        }
      }
    }
  }
}

export default MescrollMoreItemMixin


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/mixins/mescroll-more.js
/**
 * mescroll-body写在子组件时, 需通过mescroll的mixins补充子组件缺少的生命周期
 */
const MescrollMoreMixin = {
  data() {
    return {
      tabIndex: 0, // 当前tab下标
      mescroll: {
        // mescroll-body写在子子子...组件的情况 (多级)
        onPageScroll: (e) => {
          this.handlePageScroll(e)
        },
        onReachBottom: () => {
          this.handleReachBottom()
        },
        onPullDownRefresh: () => {
          this.handlePullDownRefresh()
        }
      }
    }
  },
  // 因为子组件无onPageScroll和onReachBottom的页面生命周期，需在页面传递进到子组件
  onPageScroll(e) {
    this.handlePageScroll(e)
  },
  onReachBottom() {
    this.handleReachBottom()
  },
  // 当down的native: true时, 还需传递此方法进到子组件
  onPullDownRefresh() {
    this.handlePullDownRefresh()
  },
  methods: {
    handlePageScroll(e) {
      let mescroll = this.getMescroll(this.tabIndex)
      mescroll && mescroll.onPageScroll(e)
    },
    handleReachBottom() {
      let mescroll = this.getMescroll(this.tabIndex)
      mescroll && mescroll.onReachBottom()
    },
    handlePullDownRefresh() {
      let mescroll = this.getMescroll(this.tabIndex)
      mescroll && mescroll.onPullDownRefresh()
    },
    // 根据下标获取对应子组件的mescroll
    getMescroll(i) {
      if (!this.mescrollItems) this.mescrollItems = []
      if (!this.mescrollItems[i]) {
        // v-for中的refs
        let vForItem = this.$refs['mescrollItem']
        if (vForItem) {
          this.mescrollItems[i] = vForItem[i]
        } else {
          // 普通的refs,不可重复
          this.mescrollItems[i] = this.$refs['mescrollItem' + i]
        }
      }
      let item = this.mescrollItems[i]
      return item ? item.mescroll : null
    },
    // 切换tab,恢复滚动条位置
    tabChange(i) {
      let mescroll = this.getMescroll(i)
      if (mescroll) {
        // 恢复上次滚动条的位置
        let y = mescroll.getScrollTop()
        mescroll.scrollTo(y, 0)
        // 再次恢复上次滚动条的位置, 确保元素已渲染
        setTimeout(() => {
          mescroll.scrollTo(y, 0)
        }, 30)
      }
    }
  }
}

export default MescrollMoreMixin


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/wxs/mixins.js
// 定义在wxs (含renderjs) 逻辑层的数据和方法, 与视图层相互通信
const WxsMixin = {
  data() {
    return {
      // 传入wxs视图层的数据 (响应式)
      wxsProp: {
        optDown: {}, // 下拉刷新的配置
        scrollTop: 0, // 滚动条的距离
        bodyHeight: 0, // body的高度
        isDownScrolling: false, // 是否正在下拉刷新中
        isUpScrolling: false, // 是否正在上拉加载中
        isScrollBody: true, // 是否为mescroll-body滚动
        isUpBoth: true, // 上拉加载时,是否同时可以下拉刷新
        t: 0 // 数据更新的标记 (只有数据更新了,才会触发wxs的Observer)
      },

      // 标记调用wxs视图层的方法
      callProp: {
        callType: '', // 方法名
        t: 0 // 数据更新的标记 (只有数据更新了,才会触发wxs的Observer)
      },

      // 不用wxs的平台使用此处的wxsBiz对象,抹平wxs的写法 (微信小程序和APP使用的wxsBiz对象是./wxs/wxs.wxs)
      // #ifndef MP-WEIXIN || MP-QQ || APP-PLUS || H5
      wxsBiz: {
        //注册列表touchstart事件,用于下拉刷新
        touchstartEvent: (e) => {
          this.mescroll.touchstartEvent(e)
        },
        //注册列表touchmove事件,用于下拉刷新
        touchmoveEvent: (e) => {
          this.mescroll.touchmoveEvent(e)
        },
        //注册列表touchend事件,用于下拉刷新
        touchendEvent: (e) => {
          this.mescroll.touchendEvent(e)
        },
        propObserver() {}, // 抹平wxs的写法
        callObserver() {} // 抹平wxs的写法
      },
      // #endif

      // 不用renderjs的平台使用此处的renderBiz对象,抹平renderjs的写法 (app 和 h5 使用的renderBiz对象是./wxs/renderjs.js)
      // #ifndef APP-PLUS || H5
      renderBiz: {
        propObserver() {} // 抹平renderjs的写法
      }
      // #endif
    }
  },
  methods: {
    // wxs视图层调用逻辑层的回调
    wxsCall(msg) {
      if (msg.type === 'setWxsProp') {
        // 更新wxsProp数据 (值改变才触发更新)
        this.wxsProp = {
          optDown: this.mescroll.optDown,
          scrollTop: this.mescroll.getScrollTop(),
          bodyHeight: this.mescroll.getBodyHeight(),
          isDownScrolling: this.mescroll.isDownScrolling,
          isUpScrolling: this.mescroll.isUpScrolling,
          isUpBoth: this.mescroll.optUp.isBoth,
          isScrollBody: this.mescroll.isScrollBody,
          t: Date.now()
        }
      } else if (msg.type === 'setLoadType') {
        // 设置inOffset,outOffset的状态
        this.downLoadType = msg.downLoadType
        // 状态挂载到mescroll对象, 以便在其他组件中使用, 比如<me-video>中
        this.$set(this.mescroll, 'downLoadType', this.downLoadType)
        // 重置是否加载成功的状态
        this.$set(this.mescroll, 'isDownEndSuccess', null)
      } else if (msg.type === 'triggerDownScroll') {
        // 主动触发下拉刷新
        this.mescroll.triggerDownScroll()
      } else if (msg.type === 'endDownScroll') {
        // 结束下拉刷新
        this.mescroll.endDownScroll()
      } else if (msg.type === 'triggerUpScroll') {
        // 主动触发上拉加载
        this.mescroll.triggerUpScroll(true)
      }
    }
  },
  mounted() {
    // #ifdef MP-WEIXIN || MP-QQ || APP-PLUS || H5
    // 配置主动触发wxs显示加载进度的回调
    this.mescroll.optDown.afterLoading = () => {
      this.callProp = { callType: 'showLoading', t: Date.now() } // 触发wxs的方法 (值改变才触发更新)
    }
    // 配置主动触发wxs隐藏加载进度的回调
    this.mescroll.optDown.afterEndDownScroll = () => {
      this.callProp = { callType: 'endDownScroll', t: Date.now() } // 触发wxs的方法 (值改变才触发更新)
      let delay = 300 + (this.mescroll.optDown.beforeEndDelay || 0)
      setTimeout(() => {
        if (this.downLoadType === 4 || this.downLoadType === 0) {
          this.callProp = { callType: 'clearTransform', t: Date.now() } // 触发wxs的方法 (值改变才触发更新)
        }
        // 状态挂载到mescroll对象, 以便在其他组件中使用, 比如<me-video>中
        this.$set(this.mescroll, 'downLoadType', this.downLoadType)
      }, delay)
    }
    // 初始化wxs的数据
    this.wxsCall({ type: 'setWxsProp' })
    // #endif
  }
}

export default WxsMixin


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/components/mescroll-uni/wxs/renderjs.js
// 使用renderjs直接操作window对象,实现动态控制app和h5的bounce
// bounce: iOS橡皮筋,Android半月弧,h5浏览器下拉背景等效果 (下拉刷新时禁止)
// https://uniapp.dcloud.io/frame?id=renderjs

// 与wxs的me实例一致
var me = {}

// 初始化window对象的touch事件 (仅初始化一次)
if (window && !window.$mescrollRenderInit) {
  window.$mescrollRenderInit = true

  window.addEventListener(
    'touchstart',
    function (e) {
      if (me.disabled()) return
      me.startPoint = me.getPoint(e) // 记录起点
    },
    { passive: true }
  )

  window.addEventListener(
    'touchmove',
    function (e) {
      if (me.disabled()) return
      if (me.getScrollTop() > 0) return // 需在顶部下拉,才禁止bounce

      var curPoint = me.getPoint(e) // 当前点
      var moveY = curPoint.y - me.startPoint.y // 和起点比,移动的距离,大于0向下拉,小于0向上拉
      // 向下拉
      if (moveY > 0) {
        // 可下拉的条件
        if (
          !me.isDownScrolling &&
          !me.optDown.isLock &&
          (!me.isUpScrolling || (me.isUpScrolling && me.isUpBoth))
        ) {
          // 只有touch在mescroll的view上面,才禁止bounce
          var el = e.target
          var isMescrollTouch = false
          while (el && el.tagName && el.tagName !== 'UNI-PAGE-BODY' && el.tagName != 'BODY') {
            var cls = el.classList
            if (cls && cls.contains('mescroll-render-touch')) {
              isMescrollTouch = true
              break
            }
            el = el.parentNode // 继续检查其父元素
          }
          // 禁止bounce (不会对swiper和iOS侧滑返回造成影响)
          if (isMescrollTouch && e.cancelable && !e.defaultPrevented) e.preventDefault()
        }
      }
    },
    { passive: false }
  )
}

/* 获取滚动条的位置 */
me.getScrollTop = function () {
  return me.scrollTop || document.documentElement.scrollTop || document.body.scrollTop || 0
}

/* 是否禁用下拉刷新 */
me.disabled = function () {
  return !me.optDown || !me.optDown.use || me.optDown.native
}

/* 根据点击滑动事件获取第一个手指的坐标 */
me.getPoint = function (e) {
  if (!e) {
    return { x: 0, y: 0 }
  }
  if (e.touches && e.touches[0]) {
    return { x: e.touches[0].pageX, y: e.touches[0].pageY }
  } else if (e.changedTouches && e.changedTouches[0]) {
    return { x: e.changedTouches[0].pageX, y: e.changedTouches[0].pageY }
  } else {
    return { x: e.clientX, y: e.clientY }
  }
}

/**
 * 监听逻辑层数据的变化 (实时更新数据)
 */
function propObserver(wxsProp) {
  me.optDown = wxsProp.optDown
  me.scrollTop = wxsProp.scrollTop
  me.isDownScrolling = wxsProp.isDownScrolling
  me.isUpScrolling = wxsProp.isUpScrolling
  me.isUpBoth = wxsProp.isUpBoth
}

/* 导出模块 */
const renderBiz = {
  data() {
    return {
      propObserver: propObserver
    }
  }
}

export default renderBiz


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/hooks/useMescroll.js
// 小程序无法在hook中使用页面级别生命周期,需单独传入: https://ask.dcloud.net.cn/question/161173
// import { onPageScroll, onReachBottom, onPullDownRefresh} from '@dcloudio/uni-app';

/**
 * 初始化mescroll, 相当于vue2的mescroll-mixins.js文件 (mescroll-body 和 mescroll-uni 通用)
 * mescroll-body需传入onPageScroll, onReachBottom
 * mescroll-uni无需传onPageScroll, onReachBottom
 * 当down.native为true时,需传入onPullDownRefresh
 */
function useMescroll(onPageScroll, onReachBottom, onPullDownRefresh) {
  // mescroll实例对象
  let mescroll = null

  // mescroll组件初始化的回调,可获取到mescroll对象
  const mescrollInit = (e) => {
    mescroll = e
  }

  // 获取mescroll对象, mescrollInit执行之后会有值, 生命周期created中会有值
  const getMescroll = () => {
    return mescroll
  }

  // 下拉刷新的回调 (mixin默认resetUpScroll)
  const downCallback = () => {
    if (mescroll.optUp.use) {
      mescroll.resetUpScroll()
    } else {
      setTimeout(() => {
        mescroll.endSuccess()
      }, 500)
    }
  }

  // 上拉加载的回调
  const upCallback = () => {
    // mixin默认延时500自动结束加载
    setTimeout(() => {
      mescroll.endErr()
    }, 500)
  }

  // 注册系统自带的下拉刷新 (配置down.native为true时生效, 还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
  onPullDownRefresh &&
    onPullDownRefresh(() => {
      mescroll && mescroll.onPullDownRefresh()
    })

  // 注册列表滚动事件,用于判定在顶部可下拉刷新,在指定位置可显示隐藏回到顶部按钮 (此方法为页面生命周期,无法在子组件中触发, 仅在mescroll-body生效)
  onPageScroll &&
    onPageScroll((e) => {
      mescroll && mescroll.onPageScroll(e)
    })

  // 注册滚动到底部的事件,用于上拉加载 (此方法为页面生命周期,无法在子组件中触发, 仅在mescroll-body生效)
  onReachBottom &&
    onReachBottom(() => {
      mescroll && mescroll.onReachBottom()
    })

  return {
    getMescroll,
    mescrollInit,
    downCallback,
    upCallback
  }
}

export default useMescroll


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/hooks/useMescrollComp.js
import { ref } from 'vue'

// 小程序无法在hook中使用页面级别生命周期,需单独传入: https://ask.dcloud.net.cn/question/161173
// import { onPageScroll, onReachBottom, onPullDownRefresh} from '@dcloudio/uni-app';

/**
 * mescroll-body写在子组件时,需通过useMescrollComp补充子组件缺少的生命周期, 相当于vue2的mescroll-comp.js文件
 * 必须传入onPageScroll, onReachBottom
 * 当down.native为true时,需传入onPullDownRefresh
 */
function useMescrollComp(onPageScroll, onReachBottom, onPullDownRefresh) {
  // 因为子组件无onPageScroll和onReachBottom的页面生命周期，需在页面传递进到子组件
  onPageScroll((e) => {
    handlePageScroll(e)
  })

  onReachBottom(() => {
    handleReachBottom()
  })

  // 当down的native: true时, 还需传递此方法进到子组件
  onPullDownRefresh &&
    onPullDownRefresh(() => {
      handlePullDownRefresh()
    })

  const mescrollItem = ref(null)

  const handlePageScroll = (e) => {
    const mescroll = getMescroll()
    mescroll && mescroll.onPageScroll(e)
  }

  const handleReachBottom = () => {
    const mescroll = getMescroll()
    mescroll && mescroll.onReachBottom()
  }

  const handlePullDownRefresh = () => {
    const mescroll = getMescroll()
    mescroll && mescroll.onPullDownRefresh()
  }

  const getMescroll = () => {
    if (mescrollItem.value && mescrollItem.value.getMescroll) {
      return mescrollItem.value.getMescroll()
    }
    return null
  }

  return {
    mescrollItem,
    getMescroll
  }
}

export default useMescrollComp


#########################################################
# 文件路径: ./frontend/src/uni_modules/mescroll-uni/hooks/useMescrollMore.js
import { ref } from 'vue'

// 小程序无法在hook中使用页面级别生命周期,需单独传入: https://ask.dcloud.net.cn/question/161173
// import { onPageScroll, onReachBottom, onPullDownRefresh} from '@dcloudio/uni-app';

/** mescroll-more示例写在子组件时,需通过useMescrollMore补充子组件缺少的生命周期, 相当于vue2的mescroll-more.js文件 */
function useMescrollMore(mescrollItems, onPageScroll, onReachBottom, onPullDownRefresh) {
  // 当前tab下标
  const tabIndex = ref(0)

  // 因为子组件无onPageScroll和onReachBottom的页面生命周期，需在页面传递进到子组件
  onPageScroll &&
    onPageScroll((e) => {
      handlePageScroll(e)
    })

  onReachBottom &&
    onReachBottom(() => {
      handleReachBottom()
    })

  // 当down的native: true时, 还需传递此方法进到子组件
  onPullDownRefresh &&
    onPullDownRefresh(() => {
      handlePullDownRefresh()
    })

  const handlePageScroll = (e) => {
    let mescroll = getMescroll(tabIndex.value)
    mescroll && mescroll.onPageScroll(e)
  }
  const handleReachBottom = () => {
    let mescroll = getMescroll(tabIndex.value)
    mescroll && mescroll.onReachBottom()
  }

  const handlePullDownRefresh = () => {
    let mescroll = getMescroll(tabIndex.value)
    mescroll && mescroll.onPullDownRefresh()
  }

  // 根据下标获取对应子组件的mescroll
  const getMescroll = (i) => {
    if (mescrollItems && mescrollItems[i]) {
      return mescrollItems[i].value.getMescroll()
    } else {
      return null
    }
  }

  // 切换tab,恢复滚动条位置
  const scrollToLastY = () => {
    let mescroll = getMescroll(tabIndex.value)
    if (mescroll) {
      // 恢复上次滚动条的位置
      let y = mescroll.getScrollTop()
      mescroll.scrollTo(y, 0)
      // 再次恢复上次滚动条的位置, 确保元素已渲染
      setTimeout(() => {
        mescroll.scrollTo(y, 0)
      }, 20)
    }
  }

  return {
    tabIndex,
    getMescroll,
    scrollToLastY
  }
}

export default useMescrollMore


#########################################################
# 文件路径: ./frontend/src/utils/storage.js
/**
 * @Description: 本地存储
 * @Author zcf
 * @Date 2024-07-11 17:19
 * @E-mail boyzcf@qq.com
 */
const PREFIX = import.meta.env.VITE_APP_PREFIX

const storage = {
  local: {
    has: (key) => {
      return !!uni.getStorageSync(`${PREFIX}${key}`)
    },
    get: (key) => {
      return uni.getStorageSync(`${PREFIX}${key}`)
    },
    set: (key, value) => {
      uni.setStorageSync(`${PREFIX}${key}`, value)
    },
    remove: (key) => {
      uni.removeStorageSync(`${PREFIX}${key}`)
    },
    clear: () => {
      uni.clearStorageSync()
    }
  }
}

export default storage
